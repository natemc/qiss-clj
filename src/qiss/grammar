exprs      = exprsx

actuals    = <'[]'> | !'[]' <'['> exprsx <']'>
adverb     = '/' | '\\' | '/:' | '\\:' | '\'' | '\':'
<advcore>  = verb adverb
<ladvcore> = lverb adverb
adverbed   = advin | !advin advpre | !(advin|advpre) advcore
ladverbed  = ladvin | !ladvin ladvpre |(!ladvin|ladvpre) ladvcore
<advin>    = lhs ws? advcore ws? rhs
<ladvin>   = llhs ws? ladvcore ws? lrhs
<advpre>   = advcore ws? rhs
<ladvpre>  = ladvcore ws? lrhs
aggs       = aggsx
<aggsx>    = lexprx (<','> lexprx)*
alhs       = dalhs | id | ktalhs | talhs | valhs
dalhs      = <'('> ws? arg ws? <'!'> ws? arg ws? <')'>
<ktalhs>   = ktarg
<talhs>    = targ
valhs      = !dalhs <'('> ws? (arg|hole) (ws? <';'> ws? (arg|hole))* ws? <')'>
           | <'('> ws? did (ws did)+ ws? <')'>
assign     = alhs ws? <':'> ws? rhs
lassign    = lid ws? <':'> ws? lrhs
at         = <'@'> | <'@'> ws? rhs | elhs ws? <'@'> ws? rhs
lat        = <'@'> | <'@'> ws? lrhs | lelhs ws? <'@'> ws? lrhs
bool       = #'[01]' <'b'>
bools      = #'[01][01]+' <'b'>
by         = <'by'> ws? aggsx
call       = target actuals
char       = <'"'> #'\\.|[^\"]' <'"'>
chars      = <'"'> #'(\\.|[^\"])(\\.|[^\"])+' <'"'>
col        = lid ws? <':'> ws? rhs
cols       = col ws? (<';'> ws? col)*
comment    = ws #'/.*'
dcols      = id (ws? <','> ws? id)*
<delete>   = <'delete'> ws (delrows|delcols)
delcols    = dcols ws from
delrows    = from ws? where?
dot        = dotcore
           | dotcore ws? rhs
           | !(floatx|floatsx) elhs ws? dotcore ws? rhs
           | &floatsx lhs ws dotcore ws? rhs
ldot       = dotcore
           | dotcore ws? lrhs
           | (!floatx|floatsx) lelhs ws? dotcore ws? lrhs
           | &floatsx llhs ws dotcore ws? lrhs
<dotcore>  = !(floatx|floatsx) <'.'>
<dy>       = at | dot | dyop
<ldy>      = lat | ldot | ldyop
dyop       = lhs ws? op ws? rhs
ldyop      = llhs ws? lop ws? lrhs
empty      = '()'
expr       = exprx
<exprx>    = (delete|select|update)
           / dy
           / nsvl
           / (call|juxt)
           / svl
(*           / <comment> *)
lexpr      = lexprx   (* limited expression: , is not join *)
<lexprx>   = (delete|select|update)
           / ldy
           / lnsvl
           / (call|ljuxt)
           / svl
(*           / <comment> *)
<exprsx>   = (exprx|hole) (ws? <';'> ws? (exprx|hole))* ws?
float      = !floatsx #'-?([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)?'
floats     = &(floatx | (longx ws)+ floatx) floatsx
<floatsx>  = #'-?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?(([ \n\r\t]+)+-?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?)+'
<floatx>   = #'-?(\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)?'
did        = idx | '_' (* destructuring id *)
<arg>      = darg | !varg did | ktarg | targ | varg
darg       = arg ws? <'!'> ws? arg
ktarg      = <'('> ws? <'['> ws? targs <']'> ws? targs ws? <')'>
targ       = <'('> ws? <'['> ws? <']'> ws? targsx ws? <')'>
targs      = targsx
<targsx>   = did ((ws? <';'> ws? did)* | (ws did)*)
varg       = <'('> ws? (arg|hole) (ws? <';'> ws? (arg|hole))* <')'>
           | did (ws did)+
formals    = <'['> ws? ((arg|hole) (ws? <';'> ws? (arg|hole))* ws?)? <']'>
from       = <'from'> ws? lexprx  (* lexprx? *)
hole       = ws?
id         = idx
lid        = lidx
<idx>      = #'[a-zA-Z][a-zA-Z0-9_]*'
<lidx>     = !keyword idx
juxt       = !(advin|delete|dy|floatsx|select|update)
             lhs ws? !dot rhs
           | &(floatsx(ws|'{'|'(')) lhs ws? !dot rhs
(* juxt       = floatsx ws? !dot rhs / !(advin|delete|dy|select!floatsx) lhs ws? !dot rhs *)
ljuxt      = !(advin|delete|dy|floatsx|select|update)
             llhs ws? !dot lrhs
           | &(floatsx(ws|'{'|'(')) llhs ws? !dot lrhs
keycols    = <'['> ws? col? ws? (<';'> ws? col)* ws? <']'>
keyword    = 'by'|'delete'|'from'|'select'|'update'|'where'
lambda     = <'{'> ws? formals? ws? (exprs|exprs? indent exprs+ dedent) <'}'>
lhs        = lhsx
llhs       = llhsx
elhs       = lhsx|op (* at and dot support op on lhs *)
lelhs      = llhsx|lop
<lhsx>     = svl / (call | id | lit | parexpr)
<llhsx>    = call | lid | !svl lit | parexpr | svl
<lit>      = bool | char | empty | float | lambda | long | symbol | table | vec
long       = !(bool|bools|longsx) longx
longs      = longsx
<longx>    = #'-?[0-9]+'
<longsx>   = #'-?[0-9]+([ \n\r\t]+-?[0-9]+)+'
monop      = !(nfloat|nlong) op ws? rhs
lmonop     = !(nfloat|nlong) lop ws? rhs
nfloat     = #'-([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)?'
nlong      = #'-[0-9]+'
<nsvl>     = adverbed | assign | id | lit | monop | op | parexpr
<lnsvl>    = ladverbed | lassign | lid | lit | lmonop | lop | parexpr
op         = '!' | '#' | '+' | '-' | '*' | '%' | ',' | '&' | '_' | '|' | '?' | relop
lop        = '!' | '#' | '+' | '-' | '*' | '%' | '&' | '_' | '|' | '?' | relop
parexpr    = <'('> exprx <')'>
<relop>    = '~' | (!'<=' '<') | '<=' | '>=' | (!'>=') '>' | '=' | '<>'
rhs        = exprx
lrhs       = lexprx
select     = <'select'> ws? aggs? ws? (by ws)? from ws? where?
<svl>      = bools | chars | floats | longs | symbols (* simple vector literal *)
symbol     = !symbolsx <'`'> #'[\.:a-zA-Z0-9_]*'
symbols    = symbolsx
<symbolsx> = #'`[\.:a-zA-Z0-9_]*(`[\.:a-zA-Z0-9_]*)+'
table      = <'('> ws? keycols ws? <';'>? ws? cols ws? <')'>
target     = at|dot|lhsx|op
update     = <'update'> ws? aggs? ws? (by ws)? from ws? where?
vec        = <'('> ws? (exprx|hole) ws? (<';'> ws? (exprx|hole))+ ws? <')'>
verb       = adverbed | at | call | dot | id | lambda | op | parexpr
lverb      = ladverbed | lat | call | ldot | lid | lambda | lop | parexpr
where      = <'where'> ws lexprx (ws? <','> ws? lexprx)*
<st>       = <#'[ \t]+'>
<ws>       = <#'[ \n\r\t]+(/.*)?'>
indent     = <'!!!'>
dedent     = <':::'>
