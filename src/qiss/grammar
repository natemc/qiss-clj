expr       = exprx
lexpr      = lexprx   (* limited expression: , is not join *)

actuals    = <'['> exprsx <']'>
adverb     = '/' | '\\' | '/:' | '\\:' | '\'' | '\':'
<advcore>  = verb adverb
<ladvcore> = lverb adverb
adverbed   = advin | !advin advpre | !(advin|advpre) advcore
ladverbed  = ladvin | !ladvin ladvpre |(!ladvin|ladvpre) ladvcore
<advin>    = lhs ws? advcore ws? rhs
<ladvin>   = llhs ws? ladvcore ws? lrhs
<advpre>   = advcore ws? rhs
<ladvpre>  = ladvcore ws? lrhs
aggs       = aggsx
<aggsx>    = lexprx (<','> lexprx)*
assign     = id <':'> rhs
lassign    = lid <':'> lrhs
at         = <'@'> | <'@'> ws? rhs | lhs ws? <'@'> ws? rhs
lat        = <'@'> | <'@'> ws? lrhs | llhs ws? <'@'> ws? lrhs
bool       = #'[01]' <'b'>
bools      = #'[01][01]+' <'b'>
by         = <'by'> ws? aggsx
call       = target actuals
char       = <'"'> #'\\.|[^\"]' <'"'>
chars      = <'"'> #'(\\.|[^\"])(\\.|[^\"])+' <'"'>
col        = lid <':'> rhs
cols       = col (<';'> col)*
comment    = ws '/' #'.*'
dot        = dotcore
           | dotcore ws? rhs
           | !(floatx|floatsx) lhs ws? dotcore ws? rhs
ldot       = dotcore
           | dotcore ws? lrhs
           | !(floatx|floatsx) llhs ws? dotcore ws? lrhs
<dotcore>  = !floatsx <'.'>
<dy>       = at | dot | dyop
<ldy>      = lat | ldot | ldyop
dyop       = lhs ws? op ws? rhs
ldyop      = llhs ws? lop ws? lrhs
empty      = '()'
<exprx>    = (select|update)
	   / dy
	   / nsvl
	   / (call|juxt)
	   / svl
	   / <comment>
<lexprx>   = (select|update)
	   / ldy
	   / lnsvl
	   / (call|ljuxt)
	   / svl
	   / <comment>
exprs      = exprsx
<exprsx>   = (exprx|hole) (ws? <';'> ws? (exprx|hole))*
float      = !floatsx #'-?([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)?'
floats     = &(floatx | (longx ws)+ floatx) floatsx
<floatsx>  = #'-?([0-9]*\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?(([ \n\r\t]+)+-?([0-9]*\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?)+'
<floatx>   = #'-?([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)?'
formals    = <'['> id (<';'> id)* <']'>
from       = <'from'> ws? lexprx  (* lexprx? *)
hole       = ws?
id         = idx
lid        = lidx
<idx>      = #'[a-zA-Z][a-zA-Z0-9_]*'
<lidx>     = !keyword idx
juxt       = !(advin|dy|floatsx|select|update) lhs ws? !dot rhs
(* juxt       = floatsx ws? !dot rhs / !(advin|dy|select!floatsx) lhs ws? !dot rhs *)
ljuxt      = !(advin|dy|floatsx|select|update) llhs ws? !dot lrhs
keycols    = <'['> col? (<';'> col)* <']'>
keyword    = 'by'|'delete'|'from'|'select'|'update'|'where'
lambda     = <'{'> formals? exprs <'}'>
lhs        = lhsx
llhs       = llhsx
<lhsx>     = call | id | !svl lit | parexpr | svl
<llhsx>    = call | lid | !svl lit | parexpr | svl
list       = <'('> ws? (exprx|hole) ws? (<';'> ws? (exprx|hole))+ ws? <')'>
<lit>      = bool | char | empty | float | lambda | list | long | symbol | table
long       = !(bool|bools|longsx) longx
longs      = longsx
<longx>    = #'-?[0-9]+'
<longsx>   = #'-?[0-9]+([ \n\r\t]+-?[0-9]+)+'
monop      = !(nfloat|nlong) op ws? rhs
lmonop     = !(nfloat|nlong) lop ws? rhs
nfloat     = #'-([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)?'
nlong      = #'-[0-9]+'
<nsvl>     = adverbed | assign | id | lit | monop | op | parexpr
<lnsvl>    = ladverbed | lassign | lid | lit | lmonop | lop | parexpr
op         = '!' | '#' | '+' | '-' | '*' | '%' | ',' | '&' | '_' | '|' | '?' | relop
lop        = '!' | '#' | '+' | '-' | '*' | '%' | '&' | '_' | '|' | '?' | relop
<parexpr>  = <'('> exprx <')'>
<relop>    = '~' | (!'<=' '<') | '<=' | '>=' | (!'>=') '>' | '=' | '<>'
rhs        = exprx
lrhs       = lexprx
select     = <'select'> ws? aggs? ws? (by ws)? from ws? where?
<svl>      = bools | chars | floats | longs | symbols (* simple vector literal *)
symbol     = !symbolsx <'`'> #'[\.:a-zA-Z0-9_]*'
symbols    = symbolsx
<symbolsx> = #'`[\.:a-zA-Z0-9_]*(`[\.:a-zA-Z0-9_]*)+'
table      = <'('> keycols <';'>? cols <')'>
target     = at|dot|lhsx|op
update     = <'update'> ws? aggs? ws? (by ws)? from ws? where?
verb       = adverbed | at | call | dot | id | lambda | op | parexpr
lverb      = ladverbed | lat | call | ldot | lid | lambda | lop | parexpr
where      = <'where'> ws lexprx (<','> lexprx)*
<ws>       = <#'[ \n\r\t]+'>
