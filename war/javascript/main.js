if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function(source) {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = doc.createElement("script");
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    var loadingModule = false;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("SCRIPT");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(("area,base,br,col,command," + "embed,hr,img,input,keygen,link,meta,param,source,track,wbr").split(","));
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "'");
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u06ef\u06fa-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "'");
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.create("br"), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.userAgent.product");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.userAgent");
goog.define("goog.userAgent.product.ASSUME_FIREFOX", false);
goog.define("goog.userAgent.product.ASSUME_IPHONE", false);
goog.define("goog.userAgent.product.ASSUME_IPAD", false);
goog.define("goog.userAgent.product.ASSUME_ANDROID", false);
goog.define("goog.userAgent.product.ASSUME_CHROME", false);
goog.define("goog.userAgent.product.ASSUME_SAFARI", false);
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function() {
  return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.7.48";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__18588__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__18588 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__18589__i = 0, G__18589__a = new Array(arguments.length - 0);
        while (G__18589__i < G__18589__a.length) {
          G__18589__a[G__18589__i] = arguments[G__18589__i + 0];
          ++G__18589__i;
        }
        args = new cljs.core.IndexedSeq(G__18589__a, 0);
      }
      return G__18588__delegate.call(this, args);
    };
    G__18588.cljs$lang$maxFixedArity = 0;
    G__18588.cljs$lang$applyTo = function(arglist__18590) {
      var args = cljs.core.seq(arglist__18590);
      return G__18588__delegate(args);
    };
    G__18588.cljs$core$IFn$_invoke$arity$variadic = G__18588__delegate;
    return G__18588;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__18591__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__18591 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__18592__i = 0, G__18592__a = new Array(arguments.length - 0);
        while (G__18592__i < G__18592__a.length) {
          G__18592__a[G__18592__i] = arguments[G__18592__i + 0];
          ++G__18592__i;
        }
        args = new cljs.core.IndexedSeq(G__18592__a, 0);
      }
      return G__18591__delegate.call(this, args);
    };
    G__18591.cljs$lang$maxFixedArity = 0;
    G__18591.cljs$lang$applyTo = function(arglist__18593) {
      var args = cljs.core.seq(arglist__18593);
      return G__18591__delegate(args);
    };
    G__18591.cljs$core$IFn$_invoke$arity$variadic = G__18591__delegate;
    return G__18591;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__14319__auto__ = ty;
    if (cljs.core.truth_(and__14319__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__14319__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4423__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var s = temp__4423__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.make_array = function cljs$core$make_array() {
  var args18594 = [];
  var len__15370__auto___18597 = arguments.length;
  var i__15371__auto___18598 = 0;
  while (true) {
    if (i__15371__auto___18598 < len__15370__auto___18597) {
      args18594.push(arguments[i__15371__auto___18598]);
      var G__18599 = i__15371__auto___18598 + 1;
      i__15371__auto___18598 = G__18599;
      continue;
    } else {
    }
    break;
  }
  var G__18596 = args18594.length;
  switch(G__18596) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18594.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__15215__auto___18601 = len;
  var i_18602 = 0;
  while (true) {
    if (i_18602 < n__15215__auto___18601) {
      new_arr[i_18602] = arr[i_18602];
      var G__18603 = i_18602 + 1;
      i_18602 = G__18603;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__18604 = i + 1;
      i = G__18604;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var args18605 = [];
  var len__15370__auto___18614 = arguments.length;
  var i__15371__auto___18615 = 0;
  while (true) {
    if (i__15371__auto___18615 < len__15370__auto___18614) {
      args18605.push(arguments[i__15371__auto___18615]);
      var G__18616 = i__15371__auto___18615 + 1;
      i__15371__auto___18615 = G__18616;
      continue;
    } else {
    }
    break;
  }
  var G__18610 = args18605.length;
  switch(G__18610) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args18605.slice(2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__18611 = cljs.core.aget;
  var G__18612 = array[i];
  var G__18613 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__18611, G__18612, G__18613) : cljs.core.apply.call(null, G__18611, G__18612, G__18613);
};
cljs.core.aget.cljs$lang$applyTo = function(seq18606) {
  var G__18607 = cljs.core.first(seq18606);
  var seq18606__$1 = cljs.core.next(seq18606);
  var G__18608 = cljs.core.first(seq18606__$1);
  var seq18606__$2 = cljs.core.next(seq18606__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__18607, G__18608, seq18606__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var args18618 = [];
  var len__15370__auto___18629 = arguments.length;
  var i__15371__auto___18630 = 0;
  while (true) {
    if (i__15371__auto___18630 < len__15370__auto___18629) {
      args18618.push(arguments[i__15371__auto___18630]);
      var G__18631 = i__15371__auto___18630 + 1;
      i__15371__auto___18630 = G__18631;
      continue;
    } else {
    }
    break;
  }
  var G__18624 = args18618.length;
  switch(G__18624) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args18618.slice(3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__18625 = cljs.core.aset;
  var G__18626 = array[idx];
  var G__18627 = idx2;
  var G__18628 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__18625, G__18626, G__18627, G__18628) : cljs.core.apply.call(null, G__18625, G__18626, G__18627, G__18628);
};
cljs.core.aset.cljs$lang$applyTo = function(seq18619) {
  var G__18620 = cljs.core.first(seq18619);
  var seq18619__$1 = cljs.core.next(seq18619);
  var G__18621 = cljs.core.first(seq18619__$1);
  var seq18619__$2 = cljs.core.next(seq18619__$1);
  var G__18622 = cljs.core.first(seq18619__$2);
  var seq18619__$3 = cljs.core.next(seq18619__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__18620, G__18621, G__18622, seq18619__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var args18633 = [];
  var len__15370__auto___18639 = arguments.length;
  var i__15371__auto___18640 = 0;
  while (true) {
    if (i__15371__auto___18640 < len__15370__auto___18639) {
      args18633.push(arguments[i__15371__auto___18640]);
      var G__18641 = i__15371__auto___18640 + 1;
      i__15371__auto___18640 = G__18641;
      continue;
    } else {
    }
    break;
  }
  var G__18635 = args18633.length;
  switch(G__18635) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18633.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__18636 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__18637 = [];
  var G__18638 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__18636, G__18637, G__18638) : cljs.core.reduce.call(null, G__18636, G__18637, G__18638);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var args__15377__auto__ = [];
  var len__15370__auto___18646 = arguments.length;
  var i__15371__auto___18647 = 0;
  while (true) {
    if (i__15371__auto___18647 < len__15370__auto___18646) {
      args__15377__auto__.push(arguments[i__15371__auto___18647]);
      var G__18648 = i__15371__auto___18647 + 1;
      i__15371__auto___18647 = G__18648;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 2 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15378__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq18643) {
  var G__18644 = cljs.core.first(seq18643);
  var seq18643__$1 = cljs.core.next(seq18643);
  var G__18645 = cljs.core.first(seq18643__$1);
  var seq18643__$2 = cljs.core.next(seq18643__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__18644, G__18645, seq18643__$2);
};
cljs.core.Fn = {};
cljs.core.IFn = {};
cljs.core._invoke = function cljs$core$_invoke() {
  var args18653 = [];
  var len__15370__auto___18656 = arguments.length;
  var i__15371__auto___18657 = 0;
  while (true) {
    if (i__15371__auto___18657 < len__15370__auto___18656) {
      args18653.push(arguments[i__15371__auto___18657]);
      var G__18658 = i__15371__auto___18657 + 1;
      i__15371__auto___18657 = G__18658;
      continue;
    } else {
    }
    break;
  }
  var G__18655 = args18653.length;
  switch(G__18655) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18653.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__14968__auto__.call(null, this$);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__14968__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__14968__auto__.call(null, this$, a);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__14968__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__14968__auto__.call(null, this$, a, b);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__14968__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$4 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__14968__auto__.call(null, this$, a, b, c);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__14968__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$5 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__14968__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__14968__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$6 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__14968__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__14968__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$7 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__14968__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$8 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$9 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$10 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$11 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$12 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$13 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$14 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$15 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$16 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$17 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$18 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$19 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$20 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$21 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._invoke[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$22 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__14968__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__14968__auto____$1 = cljs.core._invoke["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__14968__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = {};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__14967__auto__ = value == null ? null : value;
    var m__14968__auto__ = cljs.core._clone[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__14968__auto__.call(null, value);
    } else {
      var m__14968__auto____$1 = cljs.core._clone["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__14968__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = {};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._count[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._count["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = {};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._empty[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._empty["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = {};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._conj[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__14968__auto__.call(null, coll, o);
    } else {
      var m__14968__auto____$1 = cljs.core._conj["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__14968__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = {};
cljs.core._nth = function cljs$core$_nth() {
  var args18670 = [];
  var len__15370__auto___18673 = arguments.length;
  var i__15371__auto___18674 = 0;
  while (true) {
    if (i__15371__auto___18674 < len__15370__auto___18673) {
      args18670.push(arguments[i__15371__auto___18674]);
      var G__18675 = i__15371__auto___18674 + 1;
      i__15371__auto___18674 = G__18675;
      continue;
    } else {
    }
    break;
  }
  var G__18672 = args18670.length;
  switch(G__18672) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18670.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._nth[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__14968__auto__.call(null, coll, n);
    } else {
      var m__14968__auto____$1 = cljs.core._nth["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__14968__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._nth[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__14968__auto__.call(null, coll, n, not_found);
    } else {
      var m__14968__auto____$1 = cljs.core._nth["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__14968__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = {};
cljs.core.ISeq = {};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._first[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._first["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._rest[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._rest["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = {};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._next[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._next["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = {};
cljs.core._lookup = function cljs$core$_lookup() {
  var args18685 = [];
  var len__15370__auto___18688 = arguments.length;
  var i__15371__auto___18689 = 0;
  while (true) {
    if (i__15371__auto___18689 < len__15370__auto___18688) {
      args18685.push(arguments[i__15371__auto___18689]);
      var G__18690 = i__15371__auto___18689 + 1;
      i__15371__auto___18689 = G__18690;
      continue;
    } else {
    }
    break;
  }
  var G__18687 = args18685.length;
  switch(G__18687) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18685.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._lookup[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__14968__auto__.call(null, o, k);
    } else {
      var m__14968__auto____$1 = cljs.core._lookup["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__14968__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._lookup[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__14968__auto__.call(null, o, k, not_found);
    } else {
      var m__14968__auto____$1 = cljs.core._lookup["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__14968__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__14968__auto__.call(null, coll, k);
    } else {
      var m__14968__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__14968__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._assoc[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__14968__auto__.call(null, coll, k, v);
    } else {
      var m__14968__auto____$1 = cljs.core._assoc["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__14968__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = {};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._dissoc[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__14968__auto__.call(null, coll, k);
    } else {
      var m__14968__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__14968__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = {};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._key[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._key["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._val[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._val["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = {};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._disjoin[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__14968__auto__.call(null, coll, v);
    } else {
      var m__14968__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__14968__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = {};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._peek[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._peek["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._pop[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._pop["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = {};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._assoc_n[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__14968__auto__.call(null, coll, n, val);
    } else {
      var m__14968__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__14968__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = {};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._deref[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto__.call(null, o);
    } else {
      var m__14968__auto____$1 = cljs.core._deref["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__14968__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__14968__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__14968__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = {};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._meta[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto__.call(null, o);
    } else {
      var m__14968__auto____$1 = cljs.core._meta["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = {};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._with_meta[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__14968__auto__.call(null, o, meta);
    } else {
      var m__14968__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__14968__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = {};
cljs.core._reduce = function cljs$core$_reduce() {
  var args18714 = [];
  var len__15370__auto___18717 = arguments.length;
  var i__15371__auto___18718 = 0;
  while (true) {
    if (i__15371__auto___18718 < len__15370__auto___18717) {
      args18714.push(arguments[i__15371__auto___18718]);
      var G__18719 = i__15371__auto___18718 + 1;
      i__15371__auto___18718 = G__18719;
      continue;
    } else {
    }
    break;
  }
  var G__18716 = args18714.length;
  switch(G__18716) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18714.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._reduce[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__14968__auto__.call(null, coll, f);
    } else {
      var m__14968__auto____$1 = cljs.core._reduce["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__14968__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._reduce[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__14968__auto__.call(null, coll, f, start);
    } else {
      var m__14968__auto____$1 = cljs.core._reduce["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__14968__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = {};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._kv_reduce[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__14968__auto__.call(null, coll, f, init);
    } else {
      var m__14968__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__14968__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = {};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._equiv[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__14968__auto__.call(null, o, other);
    } else {
      var m__14968__auto____$1 = cljs.core._equiv["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__14968__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = {};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._hash[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto__.call(null, o);
    } else {
      var m__14968__auto____$1 = cljs.core._hash["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = {};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._seq[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto__.call(null, o);
    } else {
      var m__14968__auto____$1 = cljs.core._seq["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__14968__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = {};
cljs.core.IList = {};
cljs.core.IRecord = {};
cljs.core.IReversible = {};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._rseq[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._rseq["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = {};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._sorted_seq[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__14968__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__14968__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__14968__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__14968__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__14968__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__14968__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._entry_key[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__14968__auto__.call(null, coll, entry);
    } else {
      var m__14968__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__14968__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._comparator[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._comparator["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = {};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__14967__auto__ = writer == null ? null : writer;
    var m__14968__auto__ = cljs.core._write[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__14968__auto__.call(null, writer, s);
    } else {
      var m__14968__auto____$1 = cljs.core._write["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__14968__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__14967__auto__ = writer == null ? null : writer;
    var m__14968__auto__ = cljs.core._flush[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__14968__auto__.call(null, writer);
    } else {
      var m__14968__auto____$1 = cljs.core._flush["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__14968__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = {};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._pr_writer[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__14968__auto__.call(null, o, writer, opts);
    } else {
      var m__14968__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__14968__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = {};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (!(d == null) && !(d.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__14967__auto__ = d == null ? null : d;
    var m__14968__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(d) : m__14968__auto__.call(null, d);
    } else {
      var m__14968__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(d) : m__14968__auto____$1.call(null, d);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", d);
      }
    }
  }
};
cljs.core.IWatchable = {};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._notify_watches[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__14968__auto__.call(null, this$, oldval, newval);
    } else {
      var m__14968__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__14968__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._add_watch[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__14968__auto__.call(null, this$, key, f);
    } else {
      var m__14968__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__14968__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = cljs.core._remove_watch[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__14968__auto__.call(null, this$, key);
    } else {
      var m__14968__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__14968__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = {};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._as_transient[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__14968__auto__.call(null, tcoll, val);
    } else {
      var m__14968__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__14968__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__14968__auto__.call(null, tcoll);
    } else {
      var m__14968__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__14968__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__14968__auto__.call(null, tcoll, key, val);
    } else {
      var m__14968__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__14968__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__14968__auto__.call(null, tcoll, key);
    } else {
      var m__14968__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__14968__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__14968__auto__.call(null, tcoll, n, val);
    } else {
      var m__14968__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__14968__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__14968__auto__.call(null, tcoll);
    } else {
      var m__14968__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__14968__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__14967__auto__ = tcoll == null ? null : tcoll;
    var m__14968__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__14968__auto__.call(null, tcoll, v);
    } else {
      var m__14968__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__14968__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = {};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__14967__auto__ = x == null ? null : x;
    var m__14968__auto__ = cljs.core._compare[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__14968__auto__.call(null, x, y);
    } else {
      var m__14968__auto____$1 = cljs.core._compare["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__14968__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = {};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._drop_first[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = {};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._chunked_first[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._chunked_rest[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = {};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._chunked_next[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = {};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__14967__auto__ = x == null ? null : x;
    var m__14968__auto__ = cljs.core._name[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto__.call(null, x);
    } else {
      var m__14968__auto____$1 = cljs.core._name["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__14967__auto__ = x == null ? null : x;
    var m__14968__auto__ = cljs.core._namespace[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto__.call(null, x);
    } else {
      var m__14968__auto____$1 = cljs.core._namespace["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = {};
cljs.core.IReset = {};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__14968__auto__.call(null, o, new_value);
    } else {
      var m__14968__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__14968__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = {};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var args18775 = [];
  var len__15370__auto___18778 = arguments.length;
  var i__15371__auto___18779 = 0;
  while (true) {
    if (i__15371__auto___18779 < len__15370__auto___18778) {
      args18775.push(arguments[i__15371__auto___18779]);
      var G__18780 = i__15371__auto___18779 + 1;
      i__15371__auto___18779 = G__18780;
      continue;
    } else {
    }
    break;
  }
  var G__18777 = args18775.length;
  switch(G__18777) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18775.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__14968__auto__.call(null, o, f);
    } else {
      var m__14968__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__14968__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__14968__auto__.call(null, o, f, a);
    } else {
      var m__14968__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__14968__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$4 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__14968__auto__.call(null, o, f, a, b);
    } else {
      var m__14968__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__14968__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$5 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__14968__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__14968__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__14968__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = {};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__14967__auto__ = o == null ? null : o;
    var m__14968__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__14968__auto__.call(null, o, new_value);
    } else {
      var m__14968__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__14968__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = {};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__14967__auto__ = coll == null ? null : coll;
    var m__14968__auto__ = cljs.core._iterator[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto__.call(null, coll);
    } else {
      var m__14968__auto____$1 = cljs.core._iterator["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__14968__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__18786 = i + 2;
        var G__18787 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__18786;
        h1 = G__18787;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__18790 = i + 1;
          var G__18791 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__18790;
          hash = G__18791;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__14319__auto__ = cljs.core.not(a.ns);
      if (and__14319__auto__) {
        return b.ns;
      } else {
        return and__14319__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__18804 = a.ns;
            var G__18805 = b.ns;
            return goog.array.defaultCompare(G__18804, G__18805);
          }();
          if (0 === nsc) {
            var G__18806 = a.name;
            var G__18807 = b.name;
            return goog.array.defaultCompare(G__18806, G__18807);
          } else {
            return nsc;
          }
        }
      } else {
        var G__18808 = a.name;
        var G__18809 = b.name;
        return goog.array.defaultCompare(G__18808, G__18809);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__18811 = null;
  var G__18811__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__18811__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__18811 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18811__2.call(this, self__, coll);
      case 3:
        return G__18811__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18811.cljs$core$IFn$_invoke$arity$2 = G__18811__2;
  G__18811.cljs$core$IFn$_invoke$arity$3 = G__18811__3;
  return G__18811;
}();
cljs.core.Symbol.prototype.apply = function(self__, args18810) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18810)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__14747__auto__ = self__._hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var args18812 = [];
  var len__15370__auto___18815 = arguments.length;
  var i__15371__auto___18816 = 0;
  while (true) {
    if (i__15371__auto___18816 < len__15370__auto___18815) {
      args18812.push(arguments[i__15371__auto___18816]);
      var G__18817 = i__15371__auto___18816 + 1;
      i__15371__auto___18816 = G__18817;
      continue;
    } else {
    }
    break;
  }
  var G__18814 = args18812.length;
  switch(G__18814) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18812.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx === -1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__18820 = this$__$1.sym;
    var G__18821 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__18820, G__18821) : cljs.core._EQ_.call(null, G__18820, G__18821);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__18866 = null;
  var G__18866__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__18866__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__18866__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__18866__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__18866__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__18866__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__18866__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__18866__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__18866__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__18866__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__18866__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__18866__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__18866__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__18866__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__18866__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__18866__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__18866__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__18866__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__18866__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__18866__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__18866__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__18866__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__18822 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__18823 = a;
    var G__18824 = b;
    var G__18825 = c;
    var G__18826 = d;
    var G__18827 = e;
    var G__18828 = f;
    var G__18829 = g;
    var G__18830 = h;
    var G__18831 = i;
    var G__18832 = j;
    var G__18833 = k;
    var G__18834 = l;
    var G__18835 = m;
    var G__18836 = n;
    var G__18837 = o;
    var G__18838 = p;
    var G__18839 = q;
    var G__18840 = r;
    var G__18841 = s;
    var G__18842 = t;
    var G__18843 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__18822, G__18823, G__18824, G__18825, G__18826, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833, G__18834, G__18835, G__18836, G__18837, G__18838, G__18839, G__18840, G__18841, G__18842, G__18843) : cljs.core.apply.call(null, G__18822, G__18823, G__18824, G__18825, G__18826, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833, G__18834, G__18835, G__18836, 
    G__18837, G__18838, G__18839, G__18840, G__18841, G__18842, G__18843);
  };
  G__18866 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__18866__1.call(this, self__);
      case 2:
        return G__18866__2.call(this, self__, a);
      case 3:
        return G__18866__3.call(this, self__, a, b);
      case 4:
        return G__18866__4.call(this, self__, a, b, c);
      case 5:
        return G__18866__5.call(this, self__, a, b, c, d);
      case 6:
        return G__18866__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__18866__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__18866__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__18866__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__18866__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__18866__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__18866__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__18866__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__18866__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__18866__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__18866__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__18866__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__18866__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__18866__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__18866__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__18866__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__18866__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18866.cljs$core$IFn$_invoke$arity$1 = G__18866__1;
  G__18866.cljs$core$IFn$_invoke$arity$2 = G__18866__2;
  G__18866.cljs$core$IFn$_invoke$arity$3 = G__18866__3;
  G__18866.cljs$core$IFn$_invoke$arity$4 = G__18866__4;
  G__18866.cljs$core$IFn$_invoke$arity$5 = G__18866__5;
  G__18866.cljs$core$IFn$_invoke$arity$6 = G__18866__6;
  G__18866.cljs$core$IFn$_invoke$arity$7 = G__18866__7;
  G__18866.cljs$core$IFn$_invoke$arity$8 = G__18866__8;
  G__18866.cljs$core$IFn$_invoke$arity$9 = G__18866__9;
  G__18866.cljs$core$IFn$_invoke$arity$10 = G__18866__10;
  G__18866.cljs$core$IFn$_invoke$arity$11 = G__18866__11;
  G__18866.cljs$core$IFn$_invoke$arity$12 = G__18866__12;
  G__18866.cljs$core$IFn$_invoke$arity$13 = G__18866__13;
  G__18866.cljs$core$IFn$_invoke$arity$14 = G__18866__14;
  G__18866.cljs$core$IFn$_invoke$arity$15 = G__18866__15;
  G__18866.cljs$core$IFn$_invoke$arity$16 = G__18866__16;
  G__18866.cljs$core$IFn$_invoke$arity$17 = G__18866__17;
  G__18866.cljs$core$IFn$_invoke$arity$18 = G__18866__18;
  G__18866.cljs$core$IFn$_invoke$arity$19 = G__18866__19;
  G__18866.cljs$core$IFn$_invoke$arity$20 = G__18866__20;
  G__18866.cljs$core$IFn$_invoke$arity$21 = G__18866__21;
  G__18866.cljs$core$IFn$_invoke$arity$22 = G__18866__22;
  return G__18866;
}();
cljs.core.Var.prototype.apply = function(self__, args18819) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18819)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__18844 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__18845 = a;
  var G__18846 = b;
  var G__18847 = c;
  var G__18848 = d;
  var G__18849 = e;
  var G__18850 = f;
  var G__18851 = g;
  var G__18852 = h;
  var G__18853 = i;
  var G__18854 = j;
  var G__18855 = k;
  var G__18856 = l;
  var G__18857 = m;
  var G__18858 = n;
  var G__18859 = o;
  var G__18860 = p;
  var G__18861 = q;
  var G__18862 = r;
  var G__18863 = s;
  var G__18864 = t;
  var G__18865 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850, G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, G__18860, G__18861, G__18862, G__18863, G__18864, G__18865) : cljs.core.apply.call(null, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850, G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, 
  G__18859, G__18860, G__18861, G__18862, G__18863, G__18864, G__18865);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var args18879 = [];
  var len__15370__auto___18885 = arguments.length;
  var i__15371__auto___18886 = 0;
  while (true) {
    if (i__15371__auto___18886 < len__15370__auto___18885) {
      args18879.push(arguments[i__15371__auto___18886]);
      var G__18887 = i__15371__auto___18886 + 1;
      i__15371__auto___18886 = G__18887;
      continue;
    } else {
    }
    break;
  }
  var G__18884 = args18879.length;
  switch(G__18884) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args18879.slice(2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__18889 = y;
        var G__18890 = cljs.core.first(more);
        var G__18891 = cljs.core.next(more);
        x = G__18889;
        y = G__18890;
        more = G__18891;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq18880) {
  var G__18881 = cljs.core.first(seq18880);
  var seq18880__$1 = cljs.core.next(seq18880);
  var G__18882 = cljs.core.first(seq18880__$1);
  var seq18880__$2 = cljs.core.next(seq18880__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__18881, G__18882, seq18880__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__18892 = n + 1;
      var G__18893 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__18894 = cljs.core.next(coll__$1);
      n = G__18892;
      hash_code = G__18893;
      coll__$1 = G__18894;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__18895 = n + 1;
      var G__18896 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__18897 = cljs.core.next(coll__$1);
      n = G__18895;
      hash_code = G__18896;
      coll__$1 = G__18897;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__18898 = this$__$1.valueOf();
    var G__18899 = other.valueOf();
    return goog.array.defaultCompare(G__18898, G__18899);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var args18900 = [];
  var len__15370__auto___18909 = arguments.length;
  var i__15371__auto___18910 = 0;
  while (true) {
    if (i__15371__auto___18910 < len__15370__auto___18909) {
      args18900.push(arguments[i__15371__auto___18910]);
      var G__18911 = i__15371__auto___18910 + 1;
      i__15371__auto___18910 = G__18911;
      continue;
    } else {
    }
    break;
  }
  var G__18902 = args18900.length;
  switch(G__18902) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18900.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__18903 = val;
          var G__18904 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18903, G__18904) : f.call(null, G__18903, G__18904);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__18913 = nval;
          var G__18914 = n + 1;
          val = G__18913;
          n = G__18914;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18905 = val__$1;
        var G__18906 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18905, G__18906) : f.call(null, G__18905, G__18906);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18915 = nval;
        var G__18916 = n + 1;
        val__$1 = G__18915;
        n = G__18916;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18907 = val__$1;
        var G__18908 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18907, G__18908) : f.call(null, G__18907, G__18908);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18917 = nval;
        var G__18918 = n + 1;
        val__$1 = G__18917;
        n = G__18918;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var args18919 = [];
  var len__15370__auto___18928 = arguments.length;
  var i__15371__auto___18929 = 0;
  while (true) {
    if (i__15371__auto___18929 < len__15370__auto___18928) {
      args18919.push(arguments[i__15371__auto___18929]);
      var G__18930 = i__15371__auto___18929 + 1;
      i__15371__auto___18929 = G__18930;
      continue;
    } else {
    }
    break;
  }
  var G__18921 = args18919.length;
  switch(G__18921) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18919.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__18922 = val;
          var G__18923 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18922, G__18923) : f.call(null, G__18922, G__18923);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__18932 = nval;
          var G__18933 = n + 1;
          val = G__18932;
          n = G__18933;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18924 = val__$1;
        var G__18925 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18924, G__18925) : f.call(null, G__18924, G__18925);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18934 = nval;
        var G__18935 = n + 1;
        val__$1 = G__18934;
        n = G__18935;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__18926 = val__$1;
        var G__18927 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18926, G__18927) : f.call(null, G__18926, G__18927);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__18936 = nval;
        var G__18937 = n + 1;
        val__$1 = G__18936;
        n = G__18937;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__14643__auto__ = 0;
  var y__14644__auto__ = self__.arr.length - self__.i;
  return x__14643__auto__ > y__14644__auto__ ? x__14643__auto__ : y__14644__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var args18942 = [];
  var len__15370__auto___18945 = arguments.length;
  var i__15371__auto___18946 = 0;
  while (true) {
    if (i__15371__auto___18946 < len__15370__auto___18945) {
      args18942.push(arguments[i__15371__auto___18946]);
      var G__18947 = i__15371__auto___18946 + 1;
      i__15371__auto___18946 = G__18947;
      continue;
    } else {
    }
    break;
  }
  var G__18944 = args18942.length;
  switch(G__18944) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18942.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var args18949 = [];
  var len__15370__auto___18952 = arguments.length;
  var i__15371__auto___18953 = 0;
  while (true) {
    if (i__15371__auto___18953 < len__15370__auto___18952) {
      args18949.push(arguments[i__15371__auto___18953]);
      var G__18954 = i__15371__auto___18953 + 1;
      i__15371__auto___18953 = G__18954;
      continue;
    } else {
    }
    break;
  }
  var G__18951 = args18949.length;
  switch(G__18951) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18949.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__18956 = cljs.core.List.EMPTY;
  var G__18957 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__18956, G__18957) : cljs.core.with_meta.call(null, G__18956, G__18957);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__18958 = sn;
      s = G__18958;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var args18959 = [];
  var len__15370__auto___18965 = arguments.length;
  var i__15371__auto___18966 = 0;
  while (true) {
    if (i__15371__auto___18966 < len__15370__auto___18965) {
      args18959.push(arguments[i__15371__auto___18966]);
      var G__18967 = i__15371__auto___18966 + 1;
      i__15371__auto___18966 = G__18967;
      continue;
    } else {
    }
    break;
  }
  var G__18964 = args18959.length;
  switch(G__18964) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args18959.slice(2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__18969 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__18970 = cljs.core.first(xs);
      var G__18971 = cljs.core.next(xs);
      coll = G__18969;
      x = G__18970;
      xs = G__18971;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq18960) {
  var G__18961 = cljs.core.first(seq18960);
  var seq18960__$1 = cljs.core.next(seq18960);
  var G__18962 = cljs.core.first(seq18960__$1);
  var seq18960__$2 = cljs.core.next(seq18960__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__18961, G__18962, seq18960__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__18972 = cljs.core.next(s);
      var G__18973 = acc + 1;
      s = G__18972;
      acc = G__18973;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var args18978 = [];
  var len__15370__auto___18981 = arguments.length;
  var i__15371__auto___18982 = 0;
  while (true) {
    if (i__15371__auto___18982 < len__15370__auto___18981) {
      args18978.push(arguments[i__15371__auto___18982]);
      var G__18983 = i__15371__auto___18982 + 1;
      i__15371__auto___18982 = G__18983;
      continue;
    } else {
    }
    break;
  }
  var G__18980 = args18978.length;
  switch(G__18980) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18978.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__18985 = cljs.core.next(coll);
            var G__18986 = n - 1;
            coll = G__18985;
            n = G__18986;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__18987 = cljs.core.next(coll);
            var G__18988 = n - 1;
            var G__18989 = not_found;
            coll = G__18987;
            n = G__18988;
            not_found = G__18989;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var args18990 = [];
  var len__15370__auto___18997 = arguments.length;
  var i__15371__auto___18998 = 0;
  while (true) {
    if (i__15371__auto___18998 < len__15370__auto___18997) {
      args18990.push(arguments[i__15371__auto___18998]);
      var G__18999 = i__15371__auto___18998 + 1;
      i__15371__auto___18998 = G__18999;
      continue;
    } else {
    }
    break;
  }
  var G__18992 = args18990.length;
  switch(G__18992) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18990.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__19001 = n__$1 - 1;
      var G__19002 = cljs.core.rest(xs);
      n__$1 = G__19001;
      xs = G__19002;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var args19003 = [];
  var len__15370__auto___19008 = arguments.length;
  var i__15371__auto___19009 = 0;
  while (true) {
    if (i__15371__auto___19009 < len__15370__auto___19008) {
      args19003.push(arguments[i__15371__auto___19009]);
      var G__19010 = i__15371__auto___19009 + 1;
      i__15371__auto___19009 = G__19010;
      continue;
    } else {
    }
    break;
  }
  var G__19005 = args19003.length;
  switch(G__19005) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19003.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var args19012 = [];
  var len__15370__auto___19019 = arguments.length;
  var i__15371__auto___19020 = 0;
  while (true) {
    if (i__15371__auto___19020 < len__15370__auto___19019) {
      args19012.push(arguments[i__15371__auto___19020]);
      var G__19021 = i__15371__auto___19020 + 1;
      i__15371__auto___19020 = G__19021;
      continue;
    } else {
    }
    break;
  }
  var G__19018 = args19012.length;
  switch(G__19018) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19012.slice(3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__19023 = ret;
      var G__19024 = cljs.core.first(kvs);
      var G__19025 = cljs.core.second(kvs);
      var G__19026 = cljs.core.nnext(kvs);
      coll = G__19023;
      k = G__19024;
      v = G__19025;
      kvs = G__19026;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq19013) {
  var G__19014 = cljs.core.first(seq19013);
  var seq19013__$1 = cljs.core.next(seq19013);
  var G__19015 = cljs.core.first(seq19013__$1);
  var seq19013__$2 = cljs.core.next(seq19013__$1);
  var G__19016 = cljs.core.first(seq19013__$2);
  var seq19013__$3 = cljs.core.next(seq19013__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__19014, G__19015, G__19016, seq19013__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var args19027 = [];
  var len__15370__auto___19033 = arguments.length;
  var i__15371__auto___19034 = 0;
  while (true) {
    if (i__15371__auto___19034 < len__15370__auto___19033) {
      args19027.push(arguments[i__15371__auto___19034]);
      var G__19035 = i__15371__auto___19034 + 1;
      i__15371__auto___19034 = G__19035;
      continue;
    } else {
    }
    break;
  }
  var G__19032 = args19027.length;
  switch(G__19032) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19027.slice(2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__19037 = ret;
        var G__19038 = cljs.core.first(ks);
        var G__19039 = cljs.core.next(ks);
        coll = G__19037;
        k = G__19038;
        ks = G__19039;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq19028) {
  var G__19029 = cljs.core.first(seq19028);
  var seq19028__$1 = cljs.core.next(seq19028);
  var G__19030 = cljs.core.first(seq19028__$1);
  var seq19028__$2 = cljs.core.next(seq19028__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__19029, G__19030, seq19028__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__14331__auto__ = goog.isFunction(f);
  if (or__14331__auto__) {
    return or__14331__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__19045 = null;
  var G__19045__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__19045__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__19045__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__19045__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__19045__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__19045__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__19045__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__19045__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__19045__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__19045__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__19045__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__19045__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__19045__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__19045__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__19045__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__19045__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__19045__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__19045__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__19045__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__19045__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__19045__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__19045__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__19045 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__19045__1.call(this, self__);
      case 2:
        return G__19045__2.call(this, self__, a);
      case 3:
        return G__19045__3.call(this, self__, a, b);
      case 4:
        return G__19045__4.call(this, self__, a, b, c);
      case 5:
        return G__19045__5.call(this, self__, a, b, c, d);
      case 6:
        return G__19045__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__19045__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__19045__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__19045__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__19045__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__19045__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__19045__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__19045__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__19045__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__19045__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__19045__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__19045__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__19045__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__19045__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__19045__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__19045__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__19045__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19045.cljs$core$IFn$_invoke$arity$1 = G__19045__1;
  G__19045.cljs$core$IFn$_invoke$arity$2 = G__19045__2;
  G__19045.cljs$core$IFn$_invoke$arity$3 = G__19045__3;
  G__19045.cljs$core$IFn$_invoke$arity$4 = G__19045__4;
  G__19045.cljs$core$IFn$_invoke$arity$5 = G__19045__5;
  G__19045.cljs$core$IFn$_invoke$arity$6 = G__19045__6;
  G__19045.cljs$core$IFn$_invoke$arity$7 = G__19045__7;
  G__19045.cljs$core$IFn$_invoke$arity$8 = G__19045__8;
  G__19045.cljs$core$IFn$_invoke$arity$9 = G__19045__9;
  G__19045.cljs$core$IFn$_invoke$arity$10 = G__19045__10;
  G__19045.cljs$core$IFn$_invoke$arity$11 = G__19045__11;
  G__19045.cljs$core$IFn$_invoke$arity$12 = G__19045__12;
  G__19045.cljs$core$IFn$_invoke$arity$13 = G__19045__13;
  G__19045.cljs$core$IFn$_invoke$arity$14 = G__19045__14;
  G__19045.cljs$core$IFn$_invoke$arity$15 = G__19045__15;
  G__19045.cljs$core$IFn$_invoke$arity$16 = G__19045__16;
  G__19045.cljs$core$IFn$_invoke$arity$17 = G__19045__17;
  G__19045.cljs$core$IFn$_invoke$arity$18 = G__19045__18;
  G__19045.cljs$core$IFn$_invoke$arity$19 = G__19045__19;
  G__19045.cljs$core$IFn$_invoke$arity$20 = G__19045__20;
  G__19045.cljs$core$IFn$_invoke$arity$21 = G__19045__21;
  G__19045.cljs$core$IFn$_invoke$arity$22 = G__19045__22;
  return G__19045;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args19044) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19044)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__14319__auto__ = !(o == null);
    if (and__14319__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__14319__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var args19050 = [];
  var len__15370__auto___19056 = arguments.length;
  var i__15371__auto___19057 = 0;
  while (true) {
    if (i__15371__auto___19057 < len__15370__auto___19056) {
      args19050.push(arguments[i__15371__auto___19057]);
      var G__19058 = i__15371__auto___19057 + 1;
      i__15371__auto___19057 = G__19058;
      continue;
    } else {
    }
    break;
  }
  var G__19055 = args19050.length;
  switch(G__19055) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19050.slice(2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__19060 = ret;
        var G__19061 = cljs.core.first(ks);
        var G__19062 = cljs.core.next(ks);
        coll = G__19060;
        k = G__19061;
        ks = G__19062;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq19051) {
  var G__19052 = cljs.core.first(seq19051);
  var seq19051__$1 = cljs.core.next(seq19051);
  var G__19053 = cljs.core.first(seq19051__$1);
  var seq19051__$2 = cljs.core.next(seq19051__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__19052, G__19053, seq19051__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var args19083 = [];
  var len__15370__auto___19089 = arguments.length;
  var i__15371__auto___19090 = 0;
  while (true) {
    if (i__15371__auto___19090 < len__15370__auto___19089) {
      args19083.push(arguments[i__15371__auto___19090]);
      var G__19091 = i__15371__auto___19090 + 1;
      i__15371__auto___19090 = G__19091;
      continue;
    } else {
    }
    break;
  }
  var G__19086 = args19083.length;
  switch(G__19086) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19083.slice(0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__15389__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq19084) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19084));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__19095_19097 = obj;
  var G__19096_19098 = function(G__19095_19097, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__19095_19097, keys);
  goog.object.forEach(G__19095_19097, G__19096_19098);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__19099 = i__$1 + 1;
      var G__19100 = j__$1 + 1;
      var G__19101 = len__$1 - 1;
      i__$1 = G__19099;
      j__$1 = G__19100;
      len__$1 = G__19101;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__19102 = i__$1 - 1;
      var G__19103 = j__$1 - 1;
      var G__19104 = len__$1 - 1;
      i__$1 = G__19102;
      j__$1 = G__19103;
      len__$1 = G__19104;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__14331__auto__ = cljs.core.fn_QMARK_(f);
  if (or__14331__auto__) {
    return or__14331__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var args19115 = [];
  var len__15370__auto___19121 = arguments.length;
  var i__15371__auto___19122 = 0;
  while (true) {
    if (i__15371__auto___19122 < len__15370__auto___19121) {
      args19115.push(arguments[i__15371__auto___19122]);
      var G__19123 = i__15371__auto___19122 + 1;
      i__15371__auto___19122 = G__19123;
      continue;
    } else {
    }
    break;
  }
  var G__19120 = args19115.length;
  switch(G__19120) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19115.slice(2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__19125 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__19126 = etc;
          s = G__19125;
          xs = G__19126;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq19116) {
  var G__19117 = cljs.core.first(seq19116);
  var seq19116__$1 = cljs.core.next(seq19116);
  var G__19118 = cljs.core.first(seq19116__$1);
  var seq19116__$2 = cljs.core.next(seq19116__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__19117, G__19118, seq19116__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var args19129 = [];
  var len__15370__auto___19132 = arguments.length;
  var i__15371__auto___19133 = 0;
  while (true) {
    if (i__15371__auto___19133 < len__15370__auto___19132) {
      args19129.push(arguments[i__15371__auto___19133]);
      var G__19134 = i__15371__auto___19133 + 1;
      i__15371__auto___19133 = G__19134;
      continue;
    } else {
    }
    break;
  }
  var G__19131 = args19129.length;
  switch(G__19131) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19129.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__19136 = xs;
      var G__19137 = ys;
      var G__19138 = len;
      var G__19139 = n + 1;
      xs = G__19136;
      ys = G__19137;
      len = G__19138;
      n = G__19139;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var args19140 = [];
  var len__15370__auto___19145 = arguments.length;
  var i__15371__auto___19146 = 0;
  while (true) {
    if (i__15371__auto___19146 < len__15370__auto___19145) {
      args19140.push(arguments[i__15371__auto___19146]);
      var G__19147 = i__15371__auto___19146 + 1;
      i__15371__auto___19146 = G__19147;
      continue;
    } else {
    }
    break;
  }
  var G__19142 = args19140.length;
  switch(G__19142) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19140.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__19143_19149 = a;
    var G__19144_19150 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__19143_19149, G__19144_19150);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var args19151 = [];
  var len__15370__auto___19154 = arguments.length;
  var i__15371__auto___19155 = 0;
  while (true) {
    if (i__15371__auto___19155 < len__15370__auto___19154) {
      args19151.push(arguments[i__15371__auto___19155]);
      var G__19156 = i__15371__auto___19155 + 1;
      i__15371__auto___19155 = G__19156;
      continue;
    } else {
    }
    break;
  }
  var G__19153 = args19151.length;
  switch(G__19153) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19151.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var args19158 = [];
  var len__15370__auto___19166 = arguments.length;
  var i__15371__auto___19167 = 0;
  while (true) {
    if (i__15371__auto___19167 < len__15370__auto___19166) {
      args19158.push(arguments[i__15371__auto___19167]);
      var G__19168 = i__15371__auto___19167 + 1;
      i__15371__auto___19167 = G__19168;
      continue;
    } else {
    }
    break;
  }
  var G__19160 = args19158.length;
  switch(G__19160) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19158.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4423__auto__ = cljs.core.seq(coll);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    var G__19161 = f;
    var G__19162 = cljs.core.first(s);
    var G__19163 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__19161, G__19162, G__19163) : cljs.core.reduce.call(null, G__19161, G__19162, G__19163);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__19164 = val__$1;
        var G__19165 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19164, G__19165) : f.call(null, G__19164, G__19165);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__19170 = nval;
        var G__19171 = cljs.core.next(coll__$1);
        val__$1 = G__19170;
        coll__$1 = G__19171;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce() {
  var args19172 = [];
  var len__15370__auto___19177 = arguments.length;
  var i__15371__auto___19178 = 0;
  while (true) {
    if (i__15371__auto___19178 < len__15370__auto___19177) {
      args19172.push(arguments[i__15371__auto___19178]);
      var G__19179 = i__15371__auto___19178 + 1;
      i__15371__auto___19178 = G__19179;
      continue;
    } else {
    }
    break;
  }
  var G__19174 = args19172.length;
  switch(G__19174) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19172.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var args19181 = [];
  var len__15370__auto___19184 = arguments.length;
  var i__15371__auto___19185 = 0;
  while (true) {
    if (i__15371__auto___19185 < len__15370__auto___19184) {
      args19181.push(arguments[i__15371__auto___19185]);
      var G__19186 = i__15371__auto___19185 + 1;
      i__15371__auto___19185 = G__19186;
      continue;
    } else {
    }
    break;
  }
  var G__19183 = args19181.length;
  switch(G__19183) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19181.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__19188 = null;
    var G__19188__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__19188__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__19188__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__19188 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__19188__0.call(this);
        case 1:
          return G__19188__1.call(this, x);
        case 2:
          return G__19188__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19188.cljs$core$IFn$_invoke$arity$0 = G__19188__0;
    G__19188.cljs$core$IFn$_invoke$arity$1 = G__19188__1;
    G__19188.cljs$core$IFn$_invoke$arity$2 = G__19188__2;
    return G__19188;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var args19189 = [];
  var len__15370__auto___19192 = arguments.length;
  var i__15371__auto___19193 = 0;
  while (true) {
    if (i__15371__auto___19193 < len__15370__auto___19192) {
      args19189.push(arguments[i__15371__auto___19193]);
      var G__19194 = i__15371__auto___19193 + 1;
      i__15371__auto___19193 = G__19194;
      continue;
    } else {
    }
    break;
  }
  var G__19191 = args19189.length;
  switch(G__19191) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19189.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var args19196 = [];
  var len__15370__auto___19202 = arguments.length;
  var i__15371__auto___19203 = 0;
  while (true) {
    if (i__15371__auto___19203 < len__15370__auto___19202) {
      args19196.push(arguments[i__15371__auto___19203]);
      var G__19204 = i__15371__auto___19203 + 1;
      i__15371__auto___19203 = G__19204;
      continue;
    } else {
    }
    break;
  }
  var G__19201 = args19196.length;
  switch(G__19201) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19196.slice(2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq19197) {
  var G__19198 = cljs.core.first(seq19197);
  var seq19197__$1 = cljs.core.next(seq19197);
  var G__19199 = cljs.core.first(seq19197__$1);
  var seq19197__$2 = cljs.core.next(seq19197__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__19198, G__19199, seq19197__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var args19206 = [];
  var len__15370__auto___19212 = arguments.length;
  var i__15371__auto___19213 = 0;
  while (true) {
    if (i__15371__auto___19213 < len__15370__auto___19212) {
      args19206.push(arguments[i__15371__auto___19213]);
      var G__19214 = i__15371__auto___19213 + 1;
      i__15371__auto___19213 = G__19214;
      continue;
    } else {
    }
    break;
  }
  var G__19211 = args19206.length;
  switch(G__19211) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19206.slice(2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq19207) {
  var G__19208 = cljs.core.first(seq19207);
  var seq19207__$1 = cljs.core.next(seq19207);
  var G__19209 = cljs.core.first(seq19207__$1);
  var seq19207__$2 = cljs.core.next(seq19207__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__19208, G__19209, seq19207__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var args19216 = [];
  var len__15370__auto___19222 = arguments.length;
  var i__15371__auto___19223 = 0;
  while (true) {
    if (i__15371__auto___19223 < len__15370__auto___19222) {
      args19216.push(arguments[i__15371__auto___19223]);
      var G__19224 = i__15371__auto___19223 + 1;
      i__15371__auto___19223 = G__19224;
      continue;
    } else {
    }
    break;
  }
  var G__19221 = args19216.length;
  switch(G__19221) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19216.slice(2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq19217) {
  var G__19218 = cljs.core.first(seq19217);
  var seq19217__$1 = cljs.core.next(seq19217);
  var G__19219 = cljs.core.first(seq19217__$1);
  var seq19217__$2 = cljs.core.next(seq19217__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__19218, G__19219, seq19217__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var args19226 = [];
  var len__15370__auto___19232 = arguments.length;
  var i__15371__auto___19233 = 0;
  while (true) {
    if (i__15371__auto___19233 < len__15370__auto___19232) {
      args19226.push(arguments[i__15371__auto___19233]);
      var G__19234 = i__15371__auto___19233 + 1;
      i__15371__auto___19233 = G__19234;
      continue;
    } else {
    }
    break;
  }
  var G__19231 = args19226.length;
  switch(G__19231) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19226.slice(2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq19227) {
  var G__19228 = cljs.core.first(seq19227);
  var seq19227__$1 = cljs.core.next(seq19227);
  var G__19229 = cljs.core.first(seq19227__$1);
  var seq19227__$2 = cljs.core.next(seq19227__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__19228, G__19229, seq19227__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var args19236 = [];
  var len__15370__auto___19242 = arguments.length;
  var i__15371__auto___19243 = 0;
  while (true) {
    if (i__15371__auto___19243 < len__15370__auto___19242) {
      args19236.push(arguments[i__15371__auto___19243]);
      var G__19244 = i__15371__auto___19243 + 1;
      i__15371__auto___19243 = G__19244;
      continue;
    } else {
    }
    break;
  }
  var G__19241 = args19236.length;
  switch(G__19241) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19236.slice(2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__19246 = y;
        var G__19247 = cljs.core.first(more);
        var G__19248 = cljs.core.next(more);
        x = G__19246;
        y = G__19247;
        more = G__19248;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq19237) {
  var G__19238 = cljs.core.first(seq19237);
  var seq19237__$1 = cljs.core.next(seq19237);
  var G__19239 = cljs.core.first(seq19237__$1);
  var seq19237__$2 = cljs.core.next(seq19237__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__19238, G__19239, seq19237__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var args19249 = [];
  var len__15370__auto___19255 = arguments.length;
  var i__15371__auto___19256 = 0;
  while (true) {
    if (i__15371__auto___19256 < len__15370__auto___19255) {
      args19249.push(arguments[i__15371__auto___19256]);
      var G__19257 = i__15371__auto___19256 + 1;
      i__15371__auto___19256 = G__19257;
      continue;
    } else {
    }
    break;
  }
  var G__19254 = args19249.length;
  switch(G__19254) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19249.slice(2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__19259 = y;
        var G__19260 = cljs.core.first(more);
        var G__19261 = cljs.core.next(more);
        x = G__19259;
        y = G__19260;
        more = G__19261;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq19250) {
  var G__19251 = cljs.core.first(seq19250);
  var seq19250__$1 = cljs.core.next(seq19250);
  var G__19252 = cljs.core.first(seq19250__$1);
  var seq19250__$2 = cljs.core.next(seq19250__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19251, G__19252, seq19250__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var args19262 = [];
  var len__15370__auto___19268 = arguments.length;
  var i__15371__auto___19269 = 0;
  while (true) {
    if (i__15371__auto___19269 < len__15370__auto___19268) {
      args19262.push(arguments[i__15371__auto___19269]);
      var G__19270 = i__15371__auto___19269 + 1;
      i__15371__auto___19269 = G__19270;
      continue;
    } else {
    }
    break;
  }
  var G__19267 = args19262.length;
  switch(G__19267) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19262.slice(2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__19272 = y;
        var G__19273 = cljs.core.first(more);
        var G__19274 = cljs.core.next(more);
        x = G__19272;
        y = G__19273;
        more = G__19274;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq19263) {
  var G__19264 = cljs.core.first(seq19263);
  var seq19263__$1 = cljs.core.next(seq19263);
  var G__19265 = cljs.core.first(seq19263__$1);
  var seq19263__$2 = cljs.core.next(seq19263__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__19264, G__19265, seq19263__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var args19275 = [];
  var len__15370__auto___19281 = arguments.length;
  var i__15371__auto___19282 = 0;
  while (true) {
    if (i__15371__auto___19282 < len__15370__auto___19281) {
      args19275.push(arguments[i__15371__auto___19282]);
      var G__19283 = i__15371__auto___19282 + 1;
      i__15371__auto___19282 = G__19283;
      continue;
    } else {
    }
    break;
  }
  var G__19280 = args19275.length;
  switch(G__19280) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19275.slice(2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__19285 = y;
        var G__19286 = cljs.core.first(more);
        var G__19287 = cljs.core.next(more);
        x = G__19285;
        y = G__19286;
        more = G__19287;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq19276) {
  var G__19277 = cljs.core.first(seq19276);
  var seq19276__$1 = cljs.core.next(seq19276);
  var G__19278 = cljs.core.first(seq19276__$1);
  var seq19276__$2 = cljs.core.next(seq19276__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19277, G__19278, seq19276__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var args19288 = [];
  var len__15370__auto___19294 = arguments.length;
  var i__15371__auto___19295 = 0;
  while (true) {
    if (i__15371__auto___19295 < len__15370__auto___19294) {
      args19288.push(arguments[i__15371__auto___19295]);
      var G__19296 = i__15371__auto___19295 + 1;
      i__15371__auto___19295 = G__19296;
      continue;
    } else {
    }
    break;
  }
  var G__19293 = args19288.length;
  switch(G__19293) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19288.slice(2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__14643__auto__ = x;
  var y__14644__auto__ = y;
  return x__14643__auto__ > y__14644__auto__ ? x__14643__auto__ : y__14644__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__14643__auto__ = x;
    var y__14644__auto__ = y;
    return x__14643__auto__ > y__14644__auto__ ? x__14643__auto__ : y__14644__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq19289) {
  var G__19290 = cljs.core.first(seq19289);
  var seq19289__$1 = cljs.core.next(seq19289);
  var G__19291 = cljs.core.first(seq19289__$1);
  var seq19289__$2 = cljs.core.next(seq19289__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__19290, G__19291, seq19289__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var args19298 = [];
  var len__15370__auto___19304 = arguments.length;
  var i__15371__auto___19305 = 0;
  while (true) {
    if (i__15371__auto___19305 < len__15370__auto___19304) {
      args19298.push(arguments[i__15371__auto___19305]);
      var G__19306 = i__15371__auto___19305 + 1;
      i__15371__auto___19305 = G__19306;
      continue;
    } else {
    }
    break;
  }
  var G__19303 = args19298.length;
  switch(G__19303) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19298.slice(2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__14650__auto__ = x;
  var y__14651__auto__ = y;
  return x__14650__auto__ < y__14651__auto__ ? x__14650__auto__ : y__14651__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__14650__auto__ = x;
    var y__14651__auto__ = y;
    return x__14650__auto__ < y__14651__auto__ ? x__14650__auto__ : y__14651__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq19299) {
  var G__19300 = cljs.core.first(seq19299);
  var seq19299__$1 = cljs.core.next(seq19299);
  var G__19301 = cljs.core.first(seq19299__$1);
  var seq19299__$2 = cljs.core.next(seq19299__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__19300, G__19301, seq19299__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var args19308 = [];
  var len__15370__auto___19314 = arguments.length;
  var i__15371__auto___19315 = 0;
  while (true) {
    if (i__15371__auto___19315 < len__15370__auto___19314) {
      args19308.push(arguments[i__15371__auto___19315]);
      var G__19316 = i__15371__auto___19315 + 1;
      i__15371__auto___19315 = G__19316;
      continue;
    } else {
    }
    break;
  }
  var G__19313 = args19308.length;
  switch(G__19313) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19308.slice(2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq19309) {
  var G__19310 = cljs.core.first(seq19309);
  var seq19309__$1 = cljs.core.next(seq19309);
  var G__19311 = cljs.core.first(seq19309__$1);
  var seq19309__$2 = cljs.core.next(seq19309__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__19310, G__19311, seq19309__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var args19318 = [];
  var len__15370__auto___19324 = arguments.length;
  var i__15371__auto___19325 = 0;
  while (true) {
    if (i__15371__auto___19325 < len__15370__auto___19324) {
      args19318.push(arguments[i__15371__auto___19325]);
      var G__19326 = i__15371__auto___19325 + 1;
      i__15371__auto___19325 = G__19326;
      continue;
    } else {
    }
    break;
  }
  var G__19323 = args19318.length;
  switch(G__19323) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19318.slice(2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq19319) {
  var G__19320 = cljs.core.first(seq19319);
  var seq19319__$1 = cljs.core.next(seq19319);
  var G__19321 = cljs.core.first(seq19319__$1);
  var seq19319__$2 = cljs.core.next(seq19319__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__19320, G__19321, seq19319__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var args19328 = [];
  var len__15370__auto___19334 = arguments.length;
  var i__15371__auto___19335 = 0;
  while (true) {
    if (i__15371__auto___19335 < len__15370__auto___19334) {
      args19328.push(arguments[i__15371__auto___19335]);
      var G__19336 = i__15371__auto___19335 + 1;
      i__15371__auto___19335 = G__19336;
      continue;
    } else {
    }
    break;
  }
  var G__19333 = args19328.length;
  switch(G__19333) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19328.slice(2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq19329) {
  var G__19330 = cljs.core.first(seq19329);
  var seq19329__$1 = cljs.core.next(seq19329);
  var G__19331 = cljs.core.first(seq19329__$1);
  var seq19329__$2 = cljs.core.next(seq19329__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__19330, G__19331, seq19329__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var args19338 = [];
  var len__15370__auto___19344 = arguments.length;
  var i__15371__auto___19345 = 0;
  while (true) {
    if (i__15371__auto___19345 < len__15370__auto___19344) {
      args19338.push(arguments[i__15371__auto___19345]);
      var G__19346 = i__15371__auto___19345 + 1;
      i__15371__auto___19345 = G__19346;
      continue;
    } else {
    }
    break;
  }
  var G__19343 = args19338.length;
  switch(G__19343) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19338.slice(2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq19339) {
  var G__19340 = cljs.core.first(seq19339);
  var seq19339__$1 = cljs.core.next(seq19339);
  var G__19341 = cljs.core.first(seq19339__$1);
  var seq19339__$2 = cljs.core.next(seq19339__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__19340, G__19341, seq19339__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var args19348 = [];
  var len__15370__auto___19354 = arguments.length;
  var i__15371__auto___19355 = 0;
  while (true) {
    if (i__15371__auto___19355 < len__15370__auto___19354) {
      args19348.push(arguments[i__15371__auto___19355]);
      var G__19356 = i__15371__auto___19355 + 1;
      i__15371__auto___19355 = G__19356;
      continue;
    } else {
    }
    break;
  }
  var G__19353 = args19348.length;
  switch(G__19353) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19348.slice(2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq19349) {
  var G__19350 = cljs.core.first(seq19349);
  var seq19349__$1 = cljs.core.next(seq19349);
  var G__19351 = cljs.core.first(seq19349__$1);
  var seq19349__$2 = cljs.core.next(seq19349__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__19350, G__19351, seq19349__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var args19358 = [];
  var len__15370__auto___19364 = arguments.length;
  var i__15371__auto___19365 = 0;
  while (true) {
    if (i__15371__auto___19365 < len__15370__auto___19364) {
      args19358.push(arguments[i__15371__auto___19365]);
      var G__19366 = i__15371__auto___19365 + 1;
      i__15371__auto___19365 = G__19366;
      continue;
    } else {
    }
    break;
  }
  var G__19363 = args19358.length;
  switch(G__19363) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19358.slice(2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq19359) {
  var G__19360 = cljs.core.first(seq19359);
  var seq19359__$1 = cljs.core.next(seq19359);
  var G__19361 = cljs.core.first(seq19359__$1);
  var seq19359__$2 = cljs.core.next(seq19359__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__19360, G__19361, seq19359__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var args19368 = [];
  var len__15370__auto___19374 = arguments.length;
  var i__15371__auto___19375 = 0;
  while (true) {
    if (i__15371__auto___19375 < len__15370__auto___19374) {
      args19368.push(arguments[i__15371__auto___19375]);
      var G__19376 = i__15371__auto___19375 + 1;
      i__15371__auto___19375 = G__19376;
      continue;
    } else {
    }
    break;
  }
  var G__19373 = args19368.length;
  switch(G__19373) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19368.slice(2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq19369) {
  var G__19370 = cljs.core.first(seq19369);
  var seq19369__$1 = cljs.core.next(seq19369);
  var G__19371 = cljs.core.first(seq19369__$1);
  var seq19369__$2 = cljs.core.next(seq19369__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__19370, G__19371, seq19369__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var args19378 = [];
  var len__15370__auto___19384 = arguments.length;
  var i__15371__auto___19385 = 0;
  while (true) {
    if (i__15371__auto___19385 < len__15370__auto___19384) {
      args19378.push(arguments[i__15371__auto___19385]);
      var G__19386 = i__15371__auto___19385 + 1;
      i__15371__auto___19385 = G__19386;
      continue;
    } else {
    }
    break;
  }
  var G__19383 = args19378.length;
  switch(G__19383) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19378.slice(2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq19379) {
  var G__19380 = cljs.core.first(seq19379);
  var seq19379__$1 = cljs.core.next(seq19379);
  var G__19381 = cljs.core.first(seq19379__$1);
  var seq19379__$2 = cljs.core.next(seq19379__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__19380, G__19381, seq19379__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var args19388 = [];
  var len__15370__auto___19394 = arguments.length;
  var i__15371__auto___19395 = 0;
  while (true) {
    if (i__15371__auto___19395 < len__15370__auto___19394) {
      args19388.push(arguments[i__15371__auto___19395]);
      var G__19396 = i__15371__auto___19395 + 1;
      i__15371__auto___19395 = G__19396;
      continue;
    } else {
    }
    break;
  }
  var G__19393 = args19388.length;
  switch(G__19393) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19388.slice(2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq19389) {
  var G__19390 = cljs.core.first(seq19389);
  var seq19389__$1 = cljs.core.next(seq19389);
  var G__19391 = cljs.core.first(seq19389__$1);
  var seq19389__$2 = cljs.core.next(seq19389__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__19390, G__19391, seq19389__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var args19398 = [];
  var len__15370__auto___19404 = arguments.length;
  var i__15371__auto___19405 = 0;
  while (true) {
    if (i__15371__auto___19405 < len__15370__auto___19404) {
      args19398.push(arguments[i__15371__auto___19405]);
      var G__19406 = i__15371__auto___19405 + 1;
      i__15371__auto___19405 = G__19406;
      continue;
    } else {
    }
    break;
  }
  var G__19403 = args19398.length;
  switch(G__19403) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19398.slice(2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq19399) {
  var G__19400 = cljs.core.first(seq19399);
  var seq19399__$1 = cljs.core.next(seq19399);
  var G__19401 = cljs.core.first(seq19399__$1);
  var seq19399__$2 = cljs.core.next(seq19399__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__19400, G__19401, seq19399__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var args19408 = [];
  var len__15370__auto___19414 = arguments.length;
  var i__15371__auto___19415 = 0;
  while (true) {
    if (i__15371__auto___19415 < len__15370__auto___19414) {
      args19408.push(arguments[i__15371__auto___19415]);
      var G__19416 = i__15371__auto___19415 + 1;
      i__15371__auto___19415 = G__19416;
      continue;
    } else {
    }
    break;
  }
  var G__19413 = args19408.length;
  switch(G__19413) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19408.slice(2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq19409) {
  var G__19410 = cljs.core.first(seq19409);
  var seq19409__$1 = cljs.core.next(seq19409);
  var G__19411 = cljs.core.first(seq19409__$1);
  var seq19409__$2 = cljs.core.next(seq19409__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__19410, G__19411, seq19409__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var args19418 = [];
  var len__15370__auto___19424 = arguments.length;
  var i__15371__auto___19425 = 0;
  while (true) {
    if (i__15371__auto___19425 < len__15370__auto___19424) {
      args19418.push(arguments[i__15371__auto___19425]);
      var G__19426 = i__15371__auto___19425 + 1;
      i__15371__auto___19425 = G__19426;
      continue;
    } else {
    }
    break;
  }
  var G__19423 = args19418.length;
  switch(G__19423) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19418.slice(2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__19428 = y;
        var G__19429 = cljs.core.first(more);
        var G__19430 = cljs.core.next(more);
        x = G__19428;
        y = G__19429;
        more = G__19430;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq19419) {
  var G__19420 = cljs.core.first(seq19419);
  var seq19419__$1 = cljs.core.next(seq19419);
  var G__19421 = cljs.core.first(seq19419__$1);
  var seq19419__$2 = cljs.core.next(seq19419__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19420, G__19421, seq19419__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__19431 = n__$1 - 1;
      var G__19432 = cljs.core.next(xs);
      n__$1 = G__19431;
      xs = G__19432;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var args19433 = [];
  var len__15370__auto___19438 = arguments.length;
  var i__15371__auto___19439 = 0;
  while (true) {
    if (i__15371__auto___19439 < len__15370__auto___19438) {
      args19433.push(arguments[i__15371__auto___19439]);
      var G__19440 = i__15371__auto___19439 + 1;
      i__15371__auto___19439 = G__19440;
      continue;
    } else {
    }
    break;
  }
  var G__19437 = args19433.length;
  switch(G__19437) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19433.slice(1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15389__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__19442 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__19443 = cljs.core.next(more);
      sb = G__19442;
      more = G__19443;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq19434) {
  var G__19435 = cljs.core.first(seq19434);
  var seq19434__$1 = cljs.core.next(seq19434);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__19435, seq19434__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var args19444 = [];
  var len__15370__auto___19447 = arguments.length;
  var i__15371__auto___19448 = 0;
  while (true) {
    if (i__15371__auto___19448 < len__15370__auto___19447) {
      args19444.push(arguments[i__15371__auto___19448]);
      var G__19449 = i__15371__auto___19448 + 1;
      i__15371__auto___19448 = G__19449;
      continue;
    } else {
    }
    break;
  }
  var G__19446 = args19444.length;
  switch(G__19446) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19444.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__19451 = cljs.core.next(xs);
            var G__19452 = cljs.core.next(ys);
            xs = G__19451;
            ys = G__19452;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__19453 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__19454 = cljs.core.next(s);
        res = G__19453;
        s = G__19454;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__19455 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__19456 = cljs.core.next(s);
      h = G__19455;
      s = G__19456;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__19457 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__19458 = cljs.core.next(s__$1);
      h = G__19457;
      s__$1 = G__19458;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__19465_19471 = cljs.core.seq(fn_map);
  var chunk__19466_19472 = null;
  var count__19467_19473 = 0;
  var i__19468_19474 = 0;
  while (true) {
    if (i__19468_19474 < count__19467_19473) {
      var vec__19469_19475 = chunk__19466_19472.cljs$core$IIndexed$_nth$arity$2(null, i__19468_19474);
      var key_name_19476 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19469_19475, 0, null);
      var f_19477 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19469_19475, 1, null);
      var str_name_19478 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_19476) : cljs.core.name.call(null, key_name_19476);
      obj[str_name_19478] = f_19477;
      var G__19479 = seq__19465_19471;
      var G__19480 = chunk__19466_19472;
      var G__19481 = count__19467_19473;
      var G__19482 = i__19468_19474 + 1;
      seq__19465_19471 = G__19479;
      chunk__19466_19472 = G__19480;
      count__19467_19473 = G__19481;
      i__19468_19474 = G__19482;
      continue;
    } else {
      var temp__4425__auto___19483 = cljs.core.seq(seq__19465_19471);
      if (temp__4425__auto___19483) {
        var seq__19465_19484__$1 = temp__4425__auto___19483;
        if (cljs.core.chunked_seq_QMARK_(seq__19465_19484__$1)) {
          var c__15115__auto___19485 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__19465_19484__$1) : cljs.core.chunk_first.call(null, seq__19465_19484__$1);
          var G__19486 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__19465_19484__$1) : cljs.core.chunk_rest.call(null, seq__19465_19484__$1);
          var G__19487 = c__15115__auto___19485;
          var G__19488 = cljs.core.count(c__15115__auto___19485);
          var G__19489 = 0;
          seq__19465_19471 = G__19486;
          chunk__19466_19472 = G__19487;
          count__19467_19473 = G__19488;
          i__19468_19474 = G__19489;
          continue;
        } else {
          var vec__19470_19490 = cljs.core.first(seq__19465_19484__$1);
          var key_name_19491 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19470_19490, 0, null);
          var f_19492 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19470_19490, 1, null);
          var str_name_19493 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_19491) : cljs.core.name.call(null, key_name_19491);
          obj[str_name_19493] = f_19492;
          var G__19494 = cljs.core.next(seq__19465_19484__$1);
          var G__19495 = null;
          var G__19496 = 0;
          var G__19497 = 0;
          seq__19465_19471 = G__19494;
          chunk__19466_19472 = G__19495;
          count__19467_19473 = G__19496;
          i__19468_19474 = G__19497;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var args__15377__auto__ = [];
  var len__15370__auto___19503 = arguments.length;
  var i__15371__auto___19504 = 0;
  while (true) {
    if (i__15371__auto___19504 < len__15370__auto___19503) {
      args__15377__auto__.push(arguments[i__15371__auto___19504]);
      var G__19505 = i__15371__auto___19504 + 1;
      i__15371__auto___19504 = G__19505;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__19506 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__19506;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__19507 = i - 1;
      var G__19508 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__19507;
      r = G__19508;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq19502) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19502));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__14331__auto__ = coll == null;
    if (or__14331__auto__) {
      return or__14331__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__14319__auto__ = cljs.core.not(a.ns);
      if (and__14319__auto__) {
        return b.ns;
      } else {
        return and__14319__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__19519 = a.ns;
            var G__19520 = b.ns;
            return goog.array.defaultCompare(G__19519, G__19520);
          }();
          if (0 === nsc) {
            var G__19521 = a.name;
            var G__19522 = b.name;
            return goog.array.defaultCompare(G__19521, G__19522);
          } else {
            return nsc;
          }
        }
      } else {
        var G__19523 = a.name;
        var G__19524 = b.name;
        return goog.array.defaultCompare(G__19523, G__19524);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__19526 = null;
  var G__19526__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__19526__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__19526 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19526__2.call(this, self__, coll);
      case 3:
        return G__19526__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19526.cljs$core$IFn$_invoke$arity$2 = G__19526__2;
  G__19526.cljs$core$IFn$_invoke$arity$3 = G__19526__3;
  return G__19526;
}();
cljs.core.Keyword.prototype.apply = function(self__, args19525) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19525)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__14747__auto__ = self__._hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var args19529 = [];
  var len__15370__auto___19532 = arguments.length;
  var i__15371__auto___19533 = 0;
  while (true) {
    if (i__15371__auto___19533 < len__15370__auto___19532) {
      args19529.push(arguments[i__15371__auto___19533]);
      var G__19534 = i__15371__auto___19533 + 1;
      i__15371__auto___19533 = G__19534;
      continue;
    } else {
    }
    break;
  }
  var G__19531 = args19529.length;
  switch(G__19531) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19529.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__19536 = ls.sval();
        ls = G__19536;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var args19537 = [];
  var len__15370__auto___19540 = arguments.length;
  var i__15371__auto___19541 = 0;
  while (true) {
    if (i__15371__auto___19541 < len__15370__auto___19540) {
      args19537.push(arguments[i__15371__auto___19541]);
      var G__19542 = i__15371__auto___19541 + 1;
      i__15371__auto___19541 = G__19542;
      continue;
    } else {
    }
    break;
  }
  var G__19539 = args19537.length;
  switch(G__19539) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19537.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__19546 = cljs.core.next(s__$1);
      s__$1 = G__19546;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_19547 = 0;
  var xs_19548 = cljs.core.seq(coll);
  while (true) {
    if (xs_19548) {
      ret[i_19547] = cljs.core.to_array(cljs.core.first(xs_19548));
      var G__19549 = i_19547 + 1;
      var G__19550 = cljs.core.next(xs_19548);
      i_19547 = G__19549;
      xs_19548 = G__19550;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var args19551 = [];
  var len__15370__auto___19554 = arguments.length;
  var i__15371__auto___19555 = 0;
  while (true) {
    if (i__15371__auto___19555 < len__15370__auto___19554) {
      args19551.push(arguments[i__15371__auto___19555]);
      var G__19556 = i__15371__auto___19555 + 1;
      i__15371__auto___19555 = G__19556;
      continue;
    } else {
    }
    break;
  }
  var G__19553 = args19551.length;
  switch(G__19553) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19551.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19558 = i + 1;
        var G__19559 = cljs.core.next(s__$1);
        i = G__19558;
        s__$1 = G__19559;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__15215__auto___19560 = size;
    var i_19561 = 0;
    while (true) {
      if (i_19561 < n__15215__auto___19560) {
        a[i_19561] = init_val_or_seq;
        var G__19562 = i_19561 + 1;
        i_19561 = G__19562;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var args19563 = [];
  var len__15370__auto___19566 = arguments.length;
  var i__15371__auto___19567 = 0;
  while (true) {
    if (i__15371__auto___19567 < len__15370__auto___19566) {
      args19563.push(arguments[i__15371__auto___19567]);
      var G__19568 = i__15371__auto___19567 + 1;
      i__15371__auto___19567 = G__19568;
      continue;
    } else {
    }
    break;
  }
  var G__19565 = args19563.length;
  switch(G__19565) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19563.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19570 = i + 1;
        var G__19571 = cljs.core.next(s__$1);
        i = G__19570;
        s__$1 = G__19571;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__15215__auto___19572 = size;
    var i_19573 = 0;
    while (true) {
      if (i_19573 < n__15215__auto___19572) {
        a[i_19573] = init_val_or_seq;
        var G__19574 = i_19573 + 1;
        i_19573 = G__19574;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var args19575 = [];
  var len__15370__auto___19578 = arguments.length;
  var i__15371__auto___19579 = 0;
  while (true) {
    if (i__15371__auto___19579 < len__15370__auto___19578) {
      args19575.push(arguments[i__15371__auto___19579]);
      var G__19580 = i__15371__auto___19579 + 1;
      i__15371__auto___19579 = G__19580;
      continue;
    } else {
    }
    break;
  }
  var G__19577 = args19575.length;
  switch(G__19577) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19575.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19582 = i + 1;
        var G__19583 = cljs.core.next(s__$1);
        i = G__19582;
        s__$1 = G__19583;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__15215__auto___19584 = size;
    var i_19585 = 0;
    while (true) {
      if (i_19585 < n__15215__auto___19584) {
        a[i_19585] = init_val_or_seq;
        var G__19586 = i_19585 + 1;
        i_19585 = G__19586;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var args19587 = [];
  var len__15370__auto___19590 = arguments.length;
  var i__15371__auto___19591 = 0;
  while (true) {
    if (i__15371__auto___19591 < len__15370__auto___19590) {
      args19587.push(arguments[i__15371__auto___19591]);
      var G__19592 = i__15371__auto___19591 + 1;
      i__15371__auto___19591 = G__19592;
      continue;
    } else {
    }
    break;
  }
  var G__19589 = args19587.length;
  switch(G__19589) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19587.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__19594 = i + 1;
        var G__19595 = cljs.core.next(s__$1);
        i = G__19594;
        s__$1 = G__19595;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__15215__auto___19596 = size;
    var i_19597 = 0;
    while (true) {
      if (i_19597 < n__15215__auto___19596) {
        a[i_19597] = init_val_or_seq;
        var G__19598 = i_19597 + 1;
        i_19597 = G__19598;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__19599 = cljs.core.next(s__$1);
        var G__19600 = i - 1;
        var G__19601 = sum + 1;
        s__$1 = G__19599;
        i = G__19600;
        sum = G__19601;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var args19603 = [];
  var len__15370__auto___19615 = arguments.length;
  var i__15371__auto___19616 = 0;
  while (true) {
    if (i__15371__auto___19616 < len__15370__auto___19615) {
      args19603.push(arguments[i__15371__auto___19616]);
      var G__19617 = i__15371__auto___19616 + 1;
      i__15371__auto___19616 = G__19617;
      continue;
    } else {
    }
    break;
  }
  var G__19608 = args19603.length;
  switch(G__19608) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19603.slice(2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq19604) {
  var G__19605 = cljs.core.first(seq19604);
  var seq19604__$1 = cljs.core.next(seq19604);
  var G__19606 = cljs.core.first(seq19604__$1);
  var seq19604__$2 = cljs.core.next(seq19604__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__19605, G__19606, seq19604__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var args19619 = [];
  var len__15370__auto___19627 = arguments.length;
  var i__15371__auto___19628 = 0;
  while (true) {
    if (i__15371__auto___19628 < len__15370__auto___19627) {
      args19619.push(arguments[i__15371__auto___19628]);
      var G__19629 = i__15371__auto___19628 + 1;
      i__15371__auto___19628 = G__19629;
      continue;
    } else {
    }
    break;
  }
  var G__19626 = args19619.length;
  switch(G__19626) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19619.slice(4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__15389__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq19620) {
  var G__19621 = cljs.core.first(seq19620);
  var seq19620__$1 = cljs.core.next(seq19620);
  var G__19622 = cljs.core.first(seq19620__$1);
  var seq19620__$2 = cljs.core.next(seq19620__$1);
  var G__19623 = cljs.core.first(seq19620__$2);
  var seq19620__$3 = cljs.core.next(seq19620__$2);
  var G__19624 = cljs.core.first(seq19620__$3);
  var seq19620__$4 = cljs.core.next(seq19620__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__19621, G__19622, G__19623, G__19624, seq19620__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var args19631 = [];
  var len__15370__auto___19637 = arguments.length;
  var i__15371__auto___19638 = 0;
  while (true) {
    if (i__15371__auto___19638 < len__15370__auto___19637) {
      args19631.push(arguments[i__15371__auto___19638]);
      var G__19639 = i__15371__auto___19638 + 1;
      i__15371__auto___19638 = G__19639;
      continue;
    } else {
    }
    break;
  }
  var G__19636 = args19631.length;
  switch(G__19636) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19631.slice(2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__19641 = ntcoll;
      var G__19642 = cljs.core.first(vals);
      var G__19643 = cljs.core.next(vals);
      tcoll = G__19641;
      val = G__19642;
      vals = G__19643;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq19632) {
  var G__19633 = cljs.core.first(seq19632);
  var seq19632__$1 = cljs.core.next(seq19632);
  var G__19634 = cljs.core.first(seq19632__$1);
  var seq19632__$2 = cljs.core.next(seq19632__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19633, G__19634, seq19632__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var args19644 = [];
  var len__15370__auto___19651 = arguments.length;
  var i__15371__auto___19652 = 0;
  while (true) {
    if (i__15371__auto___19652 < len__15370__auto___19651) {
      args19644.push(arguments[i__15371__auto___19652]);
      var G__19653 = i__15371__auto___19652 + 1;
      i__15371__auto___19652 = G__19653;
      continue;
    } else {
    }
    break;
  }
  var G__19650 = args19644.length;
  switch(G__19650) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19644.slice(3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__19655 = ntcoll;
      var G__19656 = cljs.core.first(kvs);
      var G__19657 = cljs.core.second(kvs);
      var G__19658 = cljs.core.nnext(kvs);
      tcoll = G__19655;
      key = G__19656;
      val = G__19657;
      kvs = G__19658;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq19645) {
  var G__19646 = cljs.core.first(seq19645);
  var seq19645__$1 = cljs.core.next(seq19645);
  var G__19647 = cljs.core.first(seq19645__$1);
  var seq19645__$2 = cljs.core.next(seq19645__$1);
  var G__19648 = cljs.core.first(seq19645__$2);
  var seq19645__$3 = cljs.core.next(seq19645__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19646, G__19647, G__19648, seq19645__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var args19659 = [];
  var len__15370__auto___19665 = arguments.length;
  var i__15371__auto___19666 = 0;
  while (true) {
    if (i__15371__auto___19666 < len__15370__auto___19665) {
      args19659.push(arguments[i__15371__auto___19666]);
      var G__19667 = i__15371__auto___19666 + 1;
      i__15371__auto___19666 = G__19667;
      continue;
    } else {
    }
    break;
  }
  var G__19664 = args19659.length;
  switch(G__19664) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19659.slice(2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__19669 = ntcoll;
      var G__19670 = cljs.core.first(ks);
      var G__19671 = cljs.core.next(ks);
      tcoll = G__19669;
      key = G__19670;
      ks = G__19671;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq19660) {
  var G__19661 = cljs.core.first(seq19660);
  var seq19660__$1 = cljs.core.next(seq19660);
  var G__19662 = cljs.core.first(seq19660__$1);
  var seq19660__$2 = cljs.core.next(seq19660__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19661, G__19662, seq19660__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var args19672 = [];
  var len__15370__auto___19678 = arguments.length;
  var i__15371__auto___19679 = 0;
  while (true) {
    if (i__15371__auto___19679 < len__15370__auto___19678) {
      args19672.push(arguments[i__15371__auto___19679]);
      var G__19680 = i__15371__auto___19679 + 1;
      i__15371__auto___19679 = G__19680;
      continue;
    } else {
    }
    break;
  }
  var G__19677 = args19672.length;
  switch(G__19677) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19672.slice(2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__19682 = ntcoll;
      var G__19683 = cljs.core.first(vals);
      var G__19684 = cljs.core.next(vals);
      tcoll = G__19682;
      val = G__19683;
      vals = G__19684;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq19673) {
  var G__19674 = cljs.core.first(seq19673);
  var seq19673__$1 = cljs.core.next(seq19673);
  var G__19675 = cljs.core.first(seq19673__$1);
  var seq19673__$2 = cljs.core.next(seq19673__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19674, G__19675, seq19673__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a15259 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a15259);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a15259) : f.call(null, a15259);
      }
    } else {
      var b15260 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a15259, b15260);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a15259, b15260) : f.call(null, a15259, b15260);
        }
      } else {
        var c15261 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a15259, b15260, c15261);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a15259, b15260, c15261) : f.call(null, a15259, b15260, c15261);
          }
        } else {
          var d15262 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a15259, b15260, c15261, d15262);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a15259, b15260, c15261, d15262) : f.call(null, a15259, b15260, c15261, d15262);
            }
          } else {
            var e15263 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a15259, b15260, c15261, d15262, e15263);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a15259, b15260, c15261, d15262, e15263) : f.call(null, a15259, b15260, c15261, d15262, e15263);
              }
            } else {
              var f15264 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a15259, b15260, c15261, d15262, e15263, f15264);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a15259, b15260, c15261, d15262, e15263, f15264) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264);
                }
              } else {
                var g15265 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a15259, b15260, c15261, d15262, e15263, f15264, g15265);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a15259, b15260, c15261, d15262, e15263, f15264, g15265) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265);
                  }
                } else {
                  var h15266 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266);
                    }
                  } else {
                    var i15267 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267);
                      }
                    } else {
                      var j15268 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268);
                        }
                      } else {
                        var k15269 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269);
                          }
                        } else {
                          var l15270 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270);
                            }
                          } else {
                            var m15271 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271);
                              }
                            } else {
                              var n15272 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272);
                                }
                              } else {
                                var o15273 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273);
                                  }
                                } else {
                                  var p15274 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274);
                                    }
                                  } else {
                                    var q15275 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275);
                                      }
                                    } else {
                                      var r15276 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276);
                                        }
                                      } else {
                                        var s15277 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276, s15277);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276, s15277) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276, s15277);
                                          }
                                        } else {
                                          var t15278 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276, s15277, t15278);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276, s15277, t15278) : f.call(null, a15259, b15260, c15261, d15262, e15263, f15264, g15265, h15266, i15267, j15268, k15269, l15270, m15271, n15272, o15273, p15274, q15275, r15276, s15277, t15278);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var args19685 = [];
  var len__15370__auto___19694 = arguments.length;
  var i__15371__auto___19695 = 0;
  while (true) {
    if (i__15371__auto___19695 < len__15370__auto___19694) {
      args19685.push(arguments[i__15371__auto___19695]);
      var G__19696 = i__15371__auto___19695 + 1;
      i__15371__auto___19695 = G__19696;
      continue;
    } else {
    }
    break;
  }
  var G__19693 = args19685.length;
  switch(G__19693) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19685.slice(5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__15389__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq19686) {
  var G__19687 = cljs.core.first(seq19686);
  var seq19686__$1 = cljs.core.next(seq19686);
  var G__19688 = cljs.core.first(seq19686__$1);
  var seq19686__$2 = cljs.core.next(seq19686__$1);
  var G__19689 = cljs.core.first(seq19686__$2);
  var seq19686__$3 = cljs.core.next(seq19686__$2);
  var G__19690 = cljs.core.first(seq19686__$3);
  var seq19686__$4 = cljs.core.next(seq19686__$3);
  var G__19691 = cljs.core.first(seq19686__$4);
  var seq19686__$5 = cljs.core.next(seq19686__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__19687, G__19688, G__19689, G__19690, G__19691, seq19686__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var args19698 = [];
  var len__15370__auto___19723 = arguments.length;
  var i__15371__auto___19724 = 0;
  while (true) {
    if (i__15371__auto___19724 < len__15370__auto___19723) {
      args19698.push(arguments[i__15371__auto___19724]);
      var G__19725 = i__15371__auto___19724 + 1;
      i__15371__auto___19724 = G__19725;
      continue;
    } else {
    }
    break;
  }
  var G__19707 = args19698.length;
  switch(G__19707) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19698.slice(6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__15389__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__19708 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19708) : f.call(null, G__19708);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__19709 = cljs.core.meta(obj);
    var G__19710 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19709, G__19710) : f.call(null, G__19709, G__19710);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__19711 = cljs.core.meta(obj);
    var G__19712 = a;
    var G__19713 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19711, G__19712, G__19713) : f.call(null, G__19711, G__19712, G__19713);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__19714 = cljs.core.meta(obj);
    var G__19715 = a;
    var G__19716 = b;
    var G__19717 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__19714, G__19715, G__19716, G__19717) : f.call(null, G__19714, G__19715, G__19716, G__19717);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__19718 = cljs.core.meta(obj);
    var G__19719 = a;
    var G__19720 = b;
    var G__19721 = c;
    var G__19722 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__19718, G__19719, G__19720, G__19721, G__19722) : f.call(null, G__19718, G__19719, G__19720, G__19721, G__19722);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq19699) {
  var G__19700 = cljs.core.first(seq19699);
  var seq19699__$1 = cljs.core.next(seq19699);
  var G__19701 = cljs.core.first(seq19699__$1);
  var seq19699__$2 = cljs.core.next(seq19699__$1);
  var G__19702 = cljs.core.first(seq19699__$2);
  var seq19699__$3 = cljs.core.next(seq19699__$2);
  var G__19703 = cljs.core.first(seq19699__$3);
  var seq19699__$4 = cljs.core.next(seq19699__$3);
  var G__19704 = cljs.core.first(seq19699__$4);
  var seq19699__$5 = cljs.core.next(seq19699__$4);
  var G__19705 = cljs.core.first(seq19699__$5);
  var seq19699__$6 = cljs.core.next(seq19699__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__19700, G__19701, G__19702, G__19703, G__19704, G__19705, seq19699__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var args19727 = [];
  var len__15370__auto___19733 = arguments.length;
  var i__15371__auto___19734 = 0;
  while (true) {
    if (i__15371__auto___19734 < len__15370__auto___19733) {
      args19727.push(arguments[i__15371__auto___19734]);
      var G__19735 = i__15371__auto___19734 + 1;
      i__15371__auto___19734 = G__19735;
      continue;
    } else {
    }
    break;
  }
  var G__19732 = args19727.length;
  switch(G__19732) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19727.slice(2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq19728) {
  var G__19729 = cljs.core.first(seq19728);
  var seq19728__$1 = cljs.core.next(seq19728);
  var G__19730 = cljs.core.first(seq19728__$1);
  var seq19728__$2 = cljs.core.next(seq19728__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__19729, G__19730, seq19728__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t19740 !== "undefined") {
  } else {
    cljs.core.t19740 = function(nil_iter, meta19741) {
      this.nil_iter = nil_iter;
      this.meta19741 = meta19741;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t19740.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19742, meta19741__$1) {
      var self__ = this;
      var _19742__$1 = this;
      return new cljs.core.t19740(self__.nil_iter, meta19741__$1);
    };
    cljs.core.t19740.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19742) {
      var self__ = this;
      var _19742__$1 = this;
      return self__.meta19741;
    };
    cljs.core.t19740.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t19740.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t19740.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t19740.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), new cljs.core.Symbol(null, "meta19741", "meta19741", -690286872, null)], 
      null);
    };
    cljs.core.t19740.cljs$lang$type = true;
    cljs.core.t19740.cljs$lang$ctorStr = "cljs.core/t19740";
    cljs.core.t19740.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
      return cljs.core._write(writer__14911__auto__, "cljs.core/t19740");
    };
    cljs.core.__GT_t19740 = function cljs$core$nil_iter_$___GT_t19740(nil_iter__$1, meta19741) {
      return new cljs.core.t19740(nil_iter__$1, meta19741);
    };
  }
  return new cljs.core.t19740(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__14319__auto__ = !(lt.stepper == null);
      if (and__14319__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__14319__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__19743 = lt;
        var G__19744 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__19743, G__19744) : self__.xform.call(null, G__19743, G__19744);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__19745 = cljs.core.next(iters__$1);
        iters__$1 = G__19745;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__15215__auto___19746 = self__.iters.length;
  var i_19747 = 0;
  while (true) {
    if (i_19747 < n__15215__auto___19746) {
      self__.nexts[i_19747] = self__.iters[i_19747].next();
      var G__19748 = i_19747 + 1;
      i_19747 = G__19748;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__14319__auto__ = !(lt.stepper == null);
      if (and__14319__auto__) {
        return this$.hasNext();
      } else {
        return and__14319__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var args19749 = [];
  var len__15370__auto___19752 = arguments.length;
  var i__15371__auto___19753 = 0;
  while (true) {
    if (i__15371__auto___19753 < len__15370__auto___19752) {
      args19749.push(arguments[i__15371__auto___19753]);
      var G__19754 = i__15371__auto___19753 + 1;
      i__15371__auto___19753 = G__19754;
      continue;
    } else {
    }
    break;
  }
  var G__19751 = args19749.length;
  switch(G__19751) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19749.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__19756_19760 = cljs.core.seq(colls);
  var chunk__19757_19761 = null;
  var count__19758_19762 = 0;
  var i__19759_19763 = 0;
  while (true) {
    if (i__19759_19763 < count__19758_19762) {
      var coll_19764 = chunk__19757_19761.cljs$core$IIndexed$_nth$arity$2(null, i__19759_19763);
      iters.push(cljs.core.iter(coll_19764));
      var G__19765 = seq__19756_19760;
      var G__19766 = chunk__19757_19761;
      var G__19767 = count__19758_19762;
      var G__19768 = i__19759_19763 + 1;
      seq__19756_19760 = G__19765;
      chunk__19757_19761 = G__19766;
      count__19758_19762 = G__19767;
      i__19759_19763 = G__19768;
      continue;
    } else {
      var temp__4425__auto___19769 = cljs.core.seq(seq__19756_19760);
      if (temp__4425__auto___19769) {
        var seq__19756_19770__$1 = temp__4425__auto___19769;
        if (cljs.core.chunked_seq_QMARK_(seq__19756_19770__$1)) {
          var c__15115__auto___19771 = cljs.core.chunk_first(seq__19756_19770__$1);
          var G__19772 = cljs.core.chunk_rest(seq__19756_19770__$1);
          var G__19773 = c__15115__auto___19771;
          var G__19774 = cljs.core.count(c__15115__auto___19771);
          var G__19775 = 0;
          seq__19756_19760 = G__19772;
          chunk__19757_19761 = G__19773;
          count__19758_19762 = G__19774;
          i__19759_19763 = G__19775;
          continue;
        } else {
          var coll_19776 = cljs.core.first(seq__19756_19770__$1);
          iters.push(cljs.core.iter(coll_19776));
          var G__19777 = cljs.core.next(seq__19756_19770__$1);
          var G__19778 = null;
          var G__19779 = 0;
          var G__19780 = 0;
          seq__19756_19760 = G__19777;
          chunk__19757_19761 = G__19778;
          count__19758_19762 = G__19779;
          i__19759_19763 = G__19780;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var args19781 = [];
  var len__15370__auto___19787 = arguments.length;
  var i__15371__auto___19788 = 0;
  while (true) {
    if (i__15371__auto___19788 < len__15370__auto___19787) {
      args19781.push(arguments[i__15371__auto___19788]);
      var G__19789 = i__15371__auto___19788 + 1;
      i__15371__auto___19788 = G__19789;
      continue;
    } else {
    }
    break;
  }
  var G__19786 = args19781.length;
  switch(G__19786) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19781.slice(2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__14331__auto__ = cljs.core.seq(coll);
    if (or__14331__auto__) {
      return or__14331__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq19782) {
  var G__19783 = cljs.core.first(seq19782);
  var seq19782__$1 = cljs.core.next(seq19782);
  var G__19784 = cljs.core.first(seq19782__$1);
  var seq19782__$2 = cljs.core.next(seq19782__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__19783, G__19784, seq19782__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__19792 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19792) : pred.call(null, G__19792);
      }())) {
        var G__19793 = pred;
        var G__19794 = cljs.core.next(coll);
        pred = G__19793;
        coll = G__19794;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__14331__auto__ = function() {
        var G__19798 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19798) : pred.call(null, G__19798);
      }();
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var G__19799 = pred;
        var G__19800 = cljs.core.next(coll);
        pred = G__19799;
        coll = G__19800;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__19801 = null;
    var G__19801__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__19801__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__19801__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__19801__3 = function() {
      var G__19802__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__19802 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__19803__i = 0, G__19803__a = new Array(arguments.length - 2);
          while (G__19803__i < G__19803__a.length) {
            G__19803__a[G__19803__i] = arguments[G__19803__i + 2];
            ++G__19803__i;
          }
          zs = new cljs.core.IndexedSeq(G__19803__a, 0);
        }
        return G__19802__delegate.call(this, x, y, zs);
      };
      G__19802.cljs$lang$maxFixedArity = 2;
      G__19802.cljs$lang$applyTo = function(arglist__19804) {
        var x = cljs.core.first(arglist__19804);
        arglist__19804 = cljs.core.next(arglist__19804);
        var y = cljs.core.first(arglist__19804);
        var zs = cljs.core.rest(arglist__19804);
        return G__19802__delegate(x, y, zs);
      };
      G__19802.cljs$core$IFn$_invoke$arity$variadic = G__19802__delegate;
      return G__19802;
    }();
    G__19801 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__19801__0.call(this);
        case 1:
          return G__19801__1.call(this, x);
        case 2:
          return G__19801__2.call(this, x, y);
        default:
          var G__19805 = null;
          if (arguments.length > 2) {
            var G__19806__i = 0, G__19806__a = new Array(arguments.length - 2);
            while (G__19806__i < G__19806__a.length) {
              G__19806__a[G__19806__i] = arguments[G__19806__i + 2];
              ++G__19806__i;
            }
            G__19805 = new cljs.core.IndexedSeq(G__19806__a, 0);
          }
          return G__19801__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__19805);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19801.cljs$lang$maxFixedArity = 2;
    G__19801.cljs$lang$applyTo = G__19801__3.cljs$lang$applyTo;
    G__19801.cljs$core$IFn$_invoke$arity$0 = G__19801__0;
    G__19801.cljs$core$IFn$_invoke$arity$1 = G__19801__1;
    G__19801.cljs$core$IFn$_invoke$arity$2 = G__19801__2;
    G__19801.cljs$core$IFn$_invoke$arity$variadic = G__19801__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__19801;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__19807__delegate = function(args) {
      return x;
    };
    var G__19807 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__19808__i = 0, G__19808__a = new Array(arguments.length - 0);
        while (G__19808__i < G__19808__a.length) {
          G__19808__a[G__19808__i] = arguments[G__19808__i + 0];
          ++G__19808__i;
        }
        args = new cljs.core.IndexedSeq(G__19808__a, 0);
      }
      return G__19807__delegate.call(this, args);
    };
    G__19807.cljs$lang$maxFixedArity = 0;
    G__19807.cljs$lang$applyTo = function(arglist__19809) {
      var args = cljs.core.seq(arglist__19809);
      return G__19807__delegate(args);
    };
    G__19807.cljs$core$IFn$_invoke$arity$variadic = G__19807__delegate;
    return G__19807;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var args19810 = [];
  var len__15370__auto___19837 = arguments.length;
  var i__15371__auto___19838 = 0;
  while (true) {
    if (i__15371__auto___19838 < len__15370__auto___19837) {
      args19810.push(arguments[i__15371__auto___19838]);
      var G__19839 = i__15371__auto___19838 + 1;
      i__15371__auto___19838 = G__19839;
      continue;
    } else {
    }
    break;
  }
  var G__19816 = args19810.length;
  switch(G__19816) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19810.slice(3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__19841 = null;
    var G__19841__0 = function() {
      var G__19817 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19817) : f.call(null, G__19817);
    };
    var G__19841__1 = function(x) {
      var G__19818 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19818) : f.call(null, G__19818);
    };
    var G__19841__2 = function(x, y) {
      var G__19819 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19819) : f.call(null, G__19819);
    };
    var G__19841__3 = function(x, y, z) {
      var G__19820 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19820) : f.call(null, G__19820);
    };
    var G__19841__4 = function() {
      var G__19842__delegate = function(x, y, z, args) {
        var G__19821 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19821) : f.call(null, G__19821);
      };
      var G__19842 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19843__i = 0, G__19843__a = new Array(arguments.length - 3);
          while (G__19843__i < G__19843__a.length) {
            G__19843__a[G__19843__i] = arguments[G__19843__i + 3];
            ++G__19843__i;
          }
          args = new cljs.core.IndexedSeq(G__19843__a, 0);
        }
        return G__19842__delegate.call(this, x, y, z, args);
      };
      G__19842.cljs$lang$maxFixedArity = 3;
      G__19842.cljs$lang$applyTo = function(arglist__19844) {
        var x = cljs.core.first(arglist__19844);
        arglist__19844 = cljs.core.next(arglist__19844);
        var y = cljs.core.first(arglist__19844);
        arglist__19844 = cljs.core.next(arglist__19844);
        var z = cljs.core.first(arglist__19844);
        var args = cljs.core.rest(arglist__19844);
        return G__19842__delegate(x, y, z, args);
      };
      G__19842.cljs$core$IFn$_invoke$arity$variadic = G__19842__delegate;
      return G__19842;
    }();
    G__19841 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19841__0.call(this);
        case 1:
          return G__19841__1.call(this, x);
        case 2:
          return G__19841__2.call(this, x, y);
        case 3:
          return G__19841__3.call(this, x, y, z);
        default:
          var G__19845 = null;
          if (arguments.length > 3) {
            var G__19846__i = 0, G__19846__a = new Array(arguments.length - 3);
            while (G__19846__i < G__19846__a.length) {
              G__19846__a[G__19846__i] = arguments[G__19846__i + 3];
              ++G__19846__i;
            }
            G__19845 = new cljs.core.IndexedSeq(G__19846__a, 0);
          }
          return G__19841__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19845);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19841.cljs$lang$maxFixedArity = 3;
    G__19841.cljs$lang$applyTo = G__19841__4.cljs$lang$applyTo;
    G__19841.cljs$core$IFn$_invoke$arity$0 = G__19841__0;
    G__19841.cljs$core$IFn$_invoke$arity$1 = G__19841__1;
    G__19841.cljs$core$IFn$_invoke$arity$2 = G__19841__2;
    G__19841.cljs$core$IFn$_invoke$arity$3 = G__19841__3;
    G__19841.cljs$core$IFn$_invoke$arity$variadic = G__19841__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19841;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__19847 = null;
    var G__19847__0 = function() {
      var G__19823 = function() {
        var G__19824 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19824) : g.call(null, G__19824);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19823) : f.call(null, G__19823);
    };
    var G__19847__1 = function(x) {
      var G__19826 = function() {
        var G__19827 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19827) : g.call(null, G__19827);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19826) : f.call(null, G__19826);
    };
    var G__19847__2 = function(x, y) {
      var G__19829 = function() {
        var G__19830 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19830) : g.call(null, G__19830);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19829) : f.call(null, G__19829);
    };
    var G__19847__3 = function(x, y, z) {
      var G__19832 = function() {
        var G__19833 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19833) : g.call(null, G__19833);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19832) : f.call(null, G__19832);
    };
    var G__19847__4 = function() {
      var G__19848__delegate = function(x, y, z, args) {
        var G__19835 = function() {
          var G__19836 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19836) : g.call(null, G__19836);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19835) : f.call(null, G__19835);
      };
      var G__19848 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19849__i = 0, G__19849__a = new Array(arguments.length - 3);
          while (G__19849__i < G__19849__a.length) {
            G__19849__a[G__19849__i] = arguments[G__19849__i + 3];
            ++G__19849__i;
          }
          args = new cljs.core.IndexedSeq(G__19849__a, 0);
        }
        return G__19848__delegate.call(this, x, y, z, args);
      };
      G__19848.cljs$lang$maxFixedArity = 3;
      G__19848.cljs$lang$applyTo = function(arglist__19850) {
        var x = cljs.core.first(arglist__19850);
        arglist__19850 = cljs.core.next(arglist__19850);
        var y = cljs.core.first(arglist__19850);
        arglist__19850 = cljs.core.next(arglist__19850);
        var z = cljs.core.first(arglist__19850);
        var args = cljs.core.rest(arglist__19850);
        return G__19848__delegate(x, y, z, args);
      };
      G__19848.cljs$core$IFn$_invoke$arity$variadic = G__19848__delegate;
      return G__19848;
    }();
    G__19847 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19847__0.call(this);
        case 1:
          return G__19847__1.call(this, x);
        case 2:
          return G__19847__2.call(this, x, y);
        case 3:
          return G__19847__3.call(this, x, y, z);
        default:
          var G__19851 = null;
          if (arguments.length > 3) {
            var G__19852__i = 0, G__19852__a = new Array(arguments.length - 3);
            while (G__19852__i < G__19852__a.length) {
              G__19852__a[G__19852__i] = arguments[G__19852__i + 3];
              ++G__19852__i;
            }
            G__19851 = new cljs.core.IndexedSeq(G__19852__a, 0);
          }
          return G__19847__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19851);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19847.cljs$lang$maxFixedArity = 3;
    G__19847.cljs$lang$applyTo = G__19847__4.cljs$lang$applyTo;
    G__19847.cljs$core$IFn$_invoke$arity$0 = G__19847__0;
    G__19847.cljs$core$IFn$_invoke$arity$1 = G__19847__1;
    G__19847.cljs$core$IFn$_invoke$arity$2 = G__19847__2;
    G__19847.cljs$core$IFn$_invoke$arity$3 = G__19847__3;
    G__19847.cljs$core$IFn$_invoke$arity$variadic = G__19847__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19847;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__19853__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__19854 = cljs.core.first(fs__$2).call(null, ret);
            var G__19855 = cljs.core.next(fs__$2);
            ret = G__19854;
            fs__$2 = G__19855;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__19853 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__19856__i = 0, G__19856__a = new Array(arguments.length - 0);
          while (G__19856__i < G__19856__a.length) {
            G__19856__a[G__19856__i] = arguments[G__19856__i + 0];
            ++G__19856__i;
          }
          args = new cljs.core.IndexedSeq(G__19856__a, 0);
        }
        return G__19853__delegate.call(this, args);
      };
      G__19853.cljs$lang$maxFixedArity = 0;
      G__19853.cljs$lang$applyTo = function(arglist__19857) {
        var args = cljs.core.seq(arglist__19857);
        return G__19853__delegate(args);
      };
      G__19853.cljs$core$IFn$_invoke$arity$variadic = G__19853__delegate;
      return G__19853;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq19811) {
  var G__19812 = cljs.core.first(seq19811);
  var seq19811__$1 = cljs.core.next(seq19811);
  var G__19813 = cljs.core.first(seq19811__$1);
  var seq19811__$2 = cljs.core.next(seq19811__$1);
  var G__19814 = cljs.core.first(seq19811__$2);
  var seq19811__$3 = cljs.core.next(seq19811__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__19812, G__19813, G__19814, seq19811__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var args19858 = [];
  var len__15370__auto___19866 = arguments.length;
  var i__15371__auto___19867 = 0;
  while (true) {
    if (i__15371__auto___19867 < len__15370__auto___19866) {
      args19858.push(arguments[i__15371__auto___19867]);
      var G__19868 = i__15371__auto___19867 + 1;
      i__15371__auto___19867 = G__19868;
      continue;
    } else {
    }
    break;
  }
  var G__19865 = args19858.length;
  switch(G__19865) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args19858.slice(4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__15389__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__19870 = null;
    var G__19870__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__19870__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__19870__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__19870__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__19870__4 = function() {
      var G__19871__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__19871 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19872__i = 0, G__19872__a = new Array(arguments.length - 3);
          while (G__19872__i < G__19872__a.length) {
            G__19872__a[G__19872__i] = arguments[G__19872__i + 3];
            ++G__19872__i;
          }
          args = new cljs.core.IndexedSeq(G__19872__a, 0);
        }
        return G__19871__delegate.call(this, x, y, z, args);
      };
      G__19871.cljs$lang$maxFixedArity = 3;
      G__19871.cljs$lang$applyTo = function(arglist__19873) {
        var x = cljs.core.first(arglist__19873);
        arglist__19873 = cljs.core.next(arglist__19873);
        var y = cljs.core.first(arglist__19873);
        arglist__19873 = cljs.core.next(arglist__19873);
        var z = cljs.core.first(arglist__19873);
        var args = cljs.core.rest(arglist__19873);
        return G__19871__delegate(x, y, z, args);
      };
      G__19871.cljs$core$IFn$_invoke$arity$variadic = G__19871__delegate;
      return G__19871;
    }();
    G__19870 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19870__0.call(this);
        case 1:
          return G__19870__1.call(this, x);
        case 2:
          return G__19870__2.call(this, x, y);
        case 3:
          return G__19870__3.call(this, x, y, z);
        default:
          var G__19874 = null;
          if (arguments.length > 3) {
            var G__19875__i = 0, G__19875__a = new Array(arguments.length - 3);
            while (G__19875__i < G__19875__a.length) {
              G__19875__a[G__19875__i] = arguments[G__19875__i + 3];
              ++G__19875__i;
            }
            G__19874 = new cljs.core.IndexedSeq(G__19875__a, 0);
          }
          return G__19870__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19874);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19870.cljs$lang$maxFixedArity = 3;
    G__19870.cljs$lang$applyTo = G__19870__4.cljs$lang$applyTo;
    G__19870.cljs$core$IFn$_invoke$arity$0 = G__19870__0;
    G__19870.cljs$core$IFn$_invoke$arity$1 = G__19870__1;
    G__19870.cljs$core$IFn$_invoke$arity$2 = G__19870__2;
    G__19870.cljs$core$IFn$_invoke$arity$3 = G__19870__3;
    G__19870.cljs$core$IFn$_invoke$arity$variadic = G__19870__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19870;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__19876 = null;
    var G__19876__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__19876__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__19876__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__19876__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__19876__4 = function() {
      var G__19877__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__19877 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19878__i = 0, G__19878__a = new Array(arguments.length - 3);
          while (G__19878__i < G__19878__a.length) {
            G__19878__a[G__19878__i] = arguments[G__19878__i + 3];
            ++G__19878__i;
          }
          args = new cljs.core.IndexedSeq(G__19878__a, 0);
        }
        return G__19877__delegate.call(this, x, y, z, args);
      };
      G__19877.cljs$lang$maxFixedArity = 3;
      G__19877.cljs$lang$applyTo = function(arglist__19879) {
        var x = cljs.core.first(arglist__19879);
        arglist__19879 = cljs.core.next(arglist__19879);
        var y = cljs.core.first(arglist__19879);
        arglist__19879 = cljs.core.next(arglist__19879);
        var z = cljs.core.first(arglist__19879);
        var args = cljs.core.rest(arglist__19879);
        return G__19877__delegate(x, y, z, args);
      };
      G__19877.cljs$core$IFn$_invoke$arity$variadic = G__19877__delegate;
      return G__19877;
    }();
    G__19876 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19876__0.call(this);
        case 1:
          return G__19876__1.call(this, x);
        case 2:
          return G__19876__2.call(this, x, y);
        case 3:
          return G__19876__3.call(this, x, y, z);
        default:
          var G__19880 = null;
          if (arguments.length > 3) {
            var G__19881__i = 0, G__19881__a = new Array(arguments.length - 3);
            while (G__19881__i < G__19881__a.length) {
              G__19881__a[G__19881__i] = arguments[G__19881__i + 3];
              ++G__19881__i;
            }
            G__19880 = new cljs.core.IndexedSeq(G__19881__a, 0);
          }
          return G__19876__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19880);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19876.cljs$lang$maxFixedArity = 3;
    G__19876.cljs$lang$applyTo = G__19876__4.cljs$lang$applyTo;
    G__19876.cljs$core$IFn$_invoke$arity$0 = G__19876__0;
    G__19876.cljs$core$IFn$_invoke$arity$1 = G__19876__1;
    G__19876.cljs$core$IFn$_invoke$arity$2 = G__19876__2;
    G__19876.cljs$core$IFn$_invoke$arity$3 = G__19876__3;
    G__19876.cljs$core$IFn$_invoke$arity$variadic = G__19876__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19876;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__19882 = null;
    var G__19882__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__19882__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__19882__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__19882__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__19882__4 = function() {
      var G__19883__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__19883 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19884__i = 0, G__19884__a = new Array(arguments.length - 3);
          while (G__19884__i < G__19884__a.length) {
            G__19884__a[G__19884__i] = arguments[G__19884__i + 3];
            ++G__19884__i;
          }
          args = new cljs.core.IndexedSeq(G__19884__a, 0);
        }
        return G__19883__delegate.call(this, x, y, z, args);
      };
      G__19883.cljs$lang$maxFixedArity = 3;
      G__19883.cljs$lang$applyTo = function(arglist__19885) {
        var x = cljs.core.first(arglist__19885);
        arglist__19885 = cljs.core.next(arglist__19885);
        var y = cljs.core.first(arglist__19885);
        arglist__19885 = cljs.core.next(arglist__19885);
        var z = cljs.core.first(arglist__19885);
        var args = cljs.core.rest(arglist__19885);
        return G__19883__delegate(x, y, z, args);
      };
      G__19883.cljs$core$IFn$_invoke$arity$variadic = G__19883__delegate;
      return G__19883;
    }();
    G__19882 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19882__0.call(this);
        case 1:
          return G__19882__1.call(this, x);
        case 2:
          return G__19882__2.call(this, x, y);
        case 3:
          return G__19882__3.call(this, x, y, z);
        default:
          var G__19886 = null;
          if (arguments.length > 3) {
            var G__19887__i = 0, G__19887__a = new Array(arguments.length - 3);
            while (G__19887__i < G__19887__a.length) {
              G__19887__a[G__19887__i] = arguments[G__19887__i + 3];
              ++G__19887__i;
            }
            G__19886 = new cljs.core.IndexedSeq(G__19887__a, 0);
          }
          return G__19882__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19886);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19882.cljs$lang$maxFixedArity = 3;
    G__19882.cljs$lang$applyTo = G__19882__4.cljs$lang$applyTo;
    G__19882.cljs$core$IFn$_invoke$arity$0 = G__19882__0;
    G__19882.cljs$core$IFn$_invoke$arity$1 = G__19882__1;
    G__19882.cljs$core$IFn$_invoke$arity$2 = G__19882__2;
    G__19882.cljs$core$IFn$_invoke$arity$3 = G__19882__3;
    G__19882.cljs$core$IFn$_invoke$arity$variadic = G__19882__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19882;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__19888__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__19888 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__19889__i = 0, G__19889__a = new Array(arguments.length - 0);
        while (G__19889__i < G__19889__a.length) {
          G__19889__a[G__19889__i] = arguments[G__19889__i + 0];
          ++G__19889__i;
        }
        args = new cljs.core.IndexedSeq(G__19889__a, 0);
      }
      return G__19888__delegate.call(this, args);
    };
    G__19888.cljs$lang$maxFixedArity = 0;
    G__19888.cljs$lang$applyTo = function(arglist__19890) {
      var args = cljs.core.seq(arglist__19890);
      return G__19888__delegate(args);
    };
    G__19888.cljs$core$IFn$_invoke$arity$variadic = G__19888__delegate;
    return G__19888;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq19859) {
  var G__19860 = cljs.core.first(seq19859);
  var seq19859__$1 = cljs.core.next(seq19859);
  var G__19861 = cljs.core.first(seq19859__$1);
  var seq19859__$2 = cljs.core.next(seq19859__$1);
  var G__19862 = cljs.core.first(seq19859__$2);
  var seq19859__$3 = cljs.core.next(seq19859__$2);
  var G__19863 = cljs.core.first(seq19859__$3);
  var seq19859__$4 = cljs.core.next(seq19859__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__19860, G__19861, G__19862, G__19863, seq19859__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var args19891 = [];
  var len__15370__auto___19910 = arguments.length;
  var i__15371__auto___19911 = 0;
  while (true) {
    if (i__15371__auto___19911 < len__15370__auto___19910) {
      args19891.push(arguments[i__15371__auto___19911]);
      var G__19912 = i__15371__auto___19911 + 1;
      i__15371__auto___19911 = G__19912;
      continue;
    } else {
    }
    break;
  }
  var G__19893 = args19891.length;
  switch(G__19893) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19891.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__19914 = null;
    var G__19914__1 = function(a) {
      var G__19894 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19894) : f.call(null, G__19894);
    };
    var G__19914__2 = function(a, b) {
      var G__19895 = a == null ? x : a;
      var G__19896 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19895, G__19896) : f.call(null, G__19895, G__19896);
    };
    var G__19914__3 = function(a, b, c) {
      var G__19897 = a == null ? x : a;
      var G__19898 = b;
      var G__19899 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19897, G__19898, G__19899) : f.call(null, G__19897, G__19898, G__19899);
    };
    var G__19914__4 = function() {
      var G__19915__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__19915 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__19916__i = 0, G__19916__a = new Array(arguments.length - 3);
          while (G__19916__i < G__19916__a.length) {
            G__19916__a[G__19916__i] = arguments[G__19916__i + 3];
            ++G__19916__i;
          }
          ds = new cljs.core.IndexedSeq(G__19916__a, 0);
        }
        return G__19915__delegate.call(this, a, b, c, ds);
      };
      G__19915.cljs$lang$maxFixedArity = 3;
      G__19915.cljs$lang$applyTo = function(arglist__19917) {
        var a = cljs.core.first(arglist__19917);
        arglist__19917 = cljs.core.next(arglist__19917);
        var b = cljs.core.first(arglist__19917);
        arglist__19917 = cljs.core.next(arglist__19917);
        var c = cljs.core.first(arglist__19917);
        var ds = cljs.core.rest(arglist__19917);
        return G__19915__delegate(a, b, c, ds);
      };
      G__19915.cljs$core$IFn$_invoke$arity$variadic = G__19915__delegate;
      return G__19915;
    }();
    G__19914 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__19914__1.call(this, a);
        case 2:
          return G__19914__2.call(this, a, b);
        case 3:
          return G__19914__3.call(this, a, b, c);
        default:
          var G__19918 = null;
          if (arguments.length > 3) {
            var G__19919__i = 0, G__19919__a = new Array(arguments.length - 3);
            while (G__19919__i < G__19919__a.length) {
              G__19919__a[G__19919__i] = arguments[G__19919__i + 3];
              ++G__19919__i;
            }
            G__19918 = new cljs.core.IndexedSeq(G__19919__a, 0);
          }
          return G__19914__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__19918);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19914.cljs$lang$maxFixedArity = 3;
    G__19914.cljs$lang$applyTo = G__19914__4.cljs$lang$applyTo;
    G__19914.cljs$core$IFn$_invoke$arity$1 = G__19914__1;
    G__19914.cljs$core$IFn$_invoke$arity$2 = G__19914__2;
    G__19914.cljs$core$IFn$_invoke$arity$3 = G__19914__3;
    G__19914.cljs$core$IFn$_invoke$arity$variadic = G__19914__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19914;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__19920 = null;
    var G__19920__2 = function(a, b) {
      var G__19900 = a == null ? x : a;
      var G__19901 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19900, G__19901) : f.call(null, G__19900, G__19901);
    };
    var G__19920__3 = function(a, b, c) {
      var G__19902 = a == null ? x : a;
      var G__19903 = b == null ? y : b;
      var G__19904 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19902, G__19903, G__19904) : f.call(null, G__19902, G__19903, G__19904);
    };
    var G__19920__4 = function() {
      var G__19921__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__19921 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__19922__i = 0, G__19922__a = new Array(arguments.length - 3);
          while (G__19922__i < G__19922__a.length) {
            G__19922__a[G__19922__i] = arguments[G__19922__i + 3];
            ++G__19922__i;
          }
          ds = new cljs.core.IndexedSeq(G__19922__a, 0);
        }
        return G__19921__delegate.call(this, a, b, c, ds);
      };
      G__19921.cljs$lang$maxFixedArity = 3;
      G__19921.cljs$lang$applyTo = function(arglist__19923) {
        var a = cljs.core.first(arglist__19923);
        arglist__19923 = cljs.core.next(arglist__19923);
        var b = cljs.core.first(arglist__19923);
        arglist__19923 = cljs.core.next(arglist__19923);
        var c = cljs.core.first(arglist__19923);
        var ds = cljs.core.rest(arglist__19923);
        return G__19921__delegate(a, b, c, ds);
      };
      G__19921.cljs$core$IFn$_invoke$arity$variadic = G__19921__delegate;
      return G__19921;
    }();
    G__19920 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__19920__2.call(this, a, b);
        case 3:
          return G__19920__3.call(this, a, b, c);
        default:
          var G__19924 = null;
          if (arguments.length > 3) {
            var G__19925__i = 0, G__19925__a = new Array(arguments.length - 3);
            while (G__19925__i < G__19925__a.length) {
              G__19925__a[G__19925__i] = arguments[G__19925__i + 3];
              ++G__19925__i;
            }
            G__19924 = new cljs.core.IndexedSeq(G__19925__a, 0);
          }
          return G__19920__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__19924);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19920.cljs$lang$maxFixedArity = 3;
    G__19920.cljs$lang$applyTo = G__19920__4.cljs$lang$applyTo;
    G__19920.cljs$core$IFn$_invoke$arity$2 = G__19920__2;
    G__19920.cljs$core$IFn$_invoke$arity$3 = G__19920__3;
    G__19920.cljs$core$IFn$_invoke$arity$variadic = G__19920__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19920;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__19926 = null;
    var G__19926__2 = function(a, b) {
      var G__19905 = a == null ? x : a;
      var G__19906 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19905, G__19906) : f.call(null, G__19905, G__19906);
    };
    var G__19926__3 = function(a, b, c) {
      var G__19907 = a == null ? x : a;
      var G__19908 = b == null ? y : b;
      var G__19909 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19907, G__19908, G__19909) : f.call(null, G__19907, G__19908, G__19909);
    };
    var G__19926__4 = function() {
      var G__19927__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__19927 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__19928__i = 0, G__19928__a = new Array(arguments.length - 3);
          while (G__19928__i < G__19928__a.length) {
            G__19928__a[G__19928__i] = arguments[G__19928__i + 3];
            ++G__19928__i;
          }
          ds = new cljs.core.IndexedSeq(G__19928__a, 0);
        }
        return G__19927__delegate.call(this, a, b, c, ds);
      };
      G__19927.cljs$lang$maxFixedArity = 3;
      G__19927.cljs$lang$applyTo = function(arglist__19929) {
        var a = cljs.core.first(arglist__19929);
        arglist__19929 = cljs.core.next(arglist__19929);
        var b = cljs.core.first(arglist__19929);
        arglist__19929 = cljs.core.next(arglist__19929);
        var c = cljs.core.first(arglist__19929);
        var ds = cljs.core.rest(arglist__19929);
        return G__19927__delegate(a, b, c, ds);
      };
      G__19927.cljs$core$IFn$_invoke$arity$variadic = G__19927__delegate;
      return G__19927;
    }();
    G__19926 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__19926__2.call(this, a, b);
        case 3:
          return G__19926__3.call(this, a, b, c);
        default:
          var G__19930 = null;
          if (arguments.length > 3) {
            var G__19931__i = 0, G__19931__a = new Array(arguments.length - 3);
            while (G__19931__i < G__19931__a.length) {
              G__19931__a[G__19931__i] = arguments[G__19931__i + 3];
              ++G__19931__i;
            }
            G__19930 = new cljs.core.IndexedSeq(G__19931__a, 0);
          }
          return G__19926__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__19930);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19926.cljs$lang$maxFixedArity = 3;
    G__19926.cljs$lang$applyTo = G__19926__4.cljs$lang$applyTo;
    G__19926.cljs$core$IFn$_invoke$arity$2 = G__19926__2;
    G__19926.cljs$core$IFn$_invoke$arity$3 = G__19926__3;
    G__19926.cljs$core$IFn$_invoke$arity$variadic = G__19926__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19926;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var args19932 = [];
  var len__15370__auto___19965 = arguments.length;
  var i__15371__auto___19966 = 0;
  while (true) {
    if (i__15371__auto___19966 < len__15370__auto___19965) {
      args19932.push(arguments[i__15371__auto___19966]);
      var G__19967 = i__15371__auto___19966 + 1;
      i__15371__auto___19966 = G__19967;
      continue;
    } else {
    }
    break;
  }
  var G__19934 = args19932.length;
  switch(G__19934) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19932.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__19969 = null;
        var G__19969__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19969__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__19969__2 = function(result, input) {
          var G__19937 = result;
          var G__19938 = function() {
            var G__19939 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__19940 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19939, G__19940) : f.call(null, G__19939, G__19940);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19937, G__19938) : rf.call(null, G__19937, G__19938);
        };
        G__19969 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19969__0.call(this);
            case 1:
              return G__19969__1.call(this, result);
            case 2:
              return G__19969__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19969.cljs$core$IFn$_invoke$arity$0 = G__19969__0;
        G__19969.cljs$core$IFn$_invoke$arity$1 = G__19969__1;
        G__19969.cljs$core$IFn$_invoke$arity$2 = G__19969__2;
        return G__19969;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__15215__auto___19970 = size;
          var i_19971 = 0;
          while (true) {
            if (i_19971 < n__15215__auto___19970) {
              cljs.core.chunk_append(b, function() {
                var G__19961 = idx + i_19971;
                var G__19962 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19971);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19961, G__19962) : f.call(null, G__19961, G__19962);
              }());
              var G__19972 = i_19971 + 1;
              i_19971 = G__19972;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__19963 = idx;
            var G__19964 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19963, G__19964) : f.call(null, G__19963, G__19964);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var args19973 = [];
  var len__15370__auto___19978 = arguments.length;
  var i__15371__auto___19979 = 0;
  while (true) {
    if (i__15371__auto___19979 < len__15370__auto___19978) {
      args19973.push(arguments[i__15371__auto___19979]);
      var G__19980 = i__15371__auto___19979 + 1;
      i__15371__auto___19979 = G__19980;
      continue;
    } else {
    }
    break;
  }
  var G__19975 = args19973.length;
  switch(G__19975) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19973.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__19982 = null;
      var G__19982__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__19982__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__19982__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__19982 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__19982__0.call(this);
          case 1:
            return G__19982__1.call(this, result);
          case 2:
            return G__19982__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19982.cljs$core$IFn$_invoke$arity$0 = G__19982__0;
      G__19982.cljs$core$IFn$_invoke$arity$1 = G__19982__1;
      G__19982.cljs$core$IFn$_invoke$arity$2 = G__19982__2;
      return G__19982;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__15215__auto___19983 = size;
        var i_19984 = 0;
        while (true) {
          if (i_19984 < n__15215__auto___19983) {
            var x_19985 = function() {
              var G__19976 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_19984);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19976) : f.call(null, G__19976);
            }();
            if (x_19985 == null) {
            } else {
              cljs.core.chunk_append(b, x_19985);
            }
            var G__19986 = i_19984 + 1;
            i_19984 = G__19986;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__19977 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19977) : f.call(null, G__19977);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__19987 = cljs.core.seq(self__.watches);
  var chunk__19988 = null;
  var count__19989 = 0;
  var i__19990 = 0;
  while (true) {
    if (i__19990 < count__19989) {
      var vec__19991 = chunk__19988.cljs$core$IIndexed$_nth$arity$2(null, i__19990);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19991, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19991, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__19993 = seq__19987;
      var G__19994 = chunk__19988;
      var G__19995 = count__19989;
      var G__19996 = i__19990 + 1;
      seq__19987 = G__19993;
      chunk__19988 = G__19994;
      count__19989 = G__19995;
      i__19990 = G__19996;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__19987);
      if (temp__4425__auto__) {
        var seq__19987__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19987__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__19987__$1);
          var G__19997 = cljs.core.chunk_rest(seq__19987__$1);
          var G__19998 = c__15115__auto__;
          var G__19999 = cljs.core.count(c__15115__auto__);
          var G__20000 = 0;
          seq__19987 = G__19997;
          chunk__19988 = G__19998;
          count__19989 = G__19999;
          i__19990 = G__20000;
          continue;
        } else {
          var vec__19992 = cljs.core.first(seq__19987__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19992, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19992, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__20001 = cljs.core.next(seq__19987__$1);
          var G__20002 = null;
          var G__20003 = 0;
          var G__20004 = 0;
          seq__19987 = G__20001;
          chunk__19988 = G__20002;
          count__19989 = G__20003;
          i__19990 = G__20004;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var args20005 = [];
  var len__15370__auto___20013 = arguments.length;
  var i__15371__auto___20014 = 0;
  while (true) {
    if (i__15371__auto___20014 < len__15370__auto___20013) {
      args20005.push(arguments[i__15371__auto___20014]);
      var G__20015 = i__15371__auto___20014 + 1;
      i__15371__auto___20014 = G__20015;
      continue;
    } else {
    }
    break;
  }
  var G__20009 = args20005.length;
  switch(G__20009) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20005.slice(1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15389__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__20010) {
  var map__20011 = p__20010;
  var map__20011__$1 = (!(map__20011 == null) ? map__20011.cljs$lang$protocol_mask$partition0$ & 64 || map__20011.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__20011) : map__20011;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20011__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20011__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq20006) {
  var G__20007 = cljs.core.first(seq20006);
  var seq20006__$1 = cljs.core.next(seq20006);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__20007, seq20006__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__20018 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__20018) : cljs.core.pr_str.call(null, G__20018);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var args20019 = [];
  var len__15370__auto___20033 = arguments.length;
  var i__15371__auto___20034 = 0;
  while (true) {
    if (i__15371__auto___20034 < len__15370__auto___20033) {
      args20019.push(arguments[i__15371__auto___20034]);
      var G__20035 = i__15371__auto___20034 + 1;
      i__15371__auto___20034 = G__20035;
      continue;
    } else {
    }
    break;
  }
  var G__20026 = args20019.length;
  switch(G__20026) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20019.slice(4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__15389__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__20027 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20027) : f.call(null, G__20027);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__20028 = a.state;
      var G__20029 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20028, G__20029) : f.call(null, G__20028, G__20029);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__20030 = a.state;
      var G__20031 = x;
      var G__20032 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20030, G__20031, G__20032) : f.call(null, G__20030, G__20031, G__20032);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq20020) {
  var G__20021 = cljs.core.first(seq20020);
  var seq20020__$1 = cljs.core.next(seq20020);
  var G__20022 = cljs.core.first(seq20020__$1);
  var seq20020__$2 = cljs.core.next(seq20020__$1);
  var G__20023 = cljs.core.first(seq20020__$2);
  var seq20020__$3 = cljs.core.next(seq20020__$2);
  var G__20024 = cljs.core.first(seq20020__$3);
  var seq20020__$4 = cljs.core.next(seq20020__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__20021, G__20022, G__20023, G__20024, seq20020__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var args20037 = [];
  var len__15370__auto___20068 = arguments.length;
  var i__15371__auto___20069 = 0;
  while (true) {
    if (i__15371__auto___20069 < len__15370__auto___20068) {
      args20037.push(arguments[i__15371__auto___20069]);
      var G__20070 = i__15371__auto___20069 + 1;
      i__15371__auto___20069 = G__20070;
      continue;
    } else {
    }
    break;
  }
  var G__20039 = args20037.length;
  switch(G__20039) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20037.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__20072 = null;
        var G__20072__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20072__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__20072__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__20072 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20072__0.call(this);
            case 1:
              return G__20072__1.call(this, result);
            case 2:
              return G__20072__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20072.cljs$core$IFn$_invoke$arity$0 = G__20072__0;
        G__20072.cljs$core$IFn$_invoke$arity$1 = G__20072__1;
        G__20072.cljs$core$IFn$_invoke$arity$2 = G__20072__2;
        return G__20072;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__15215__auto___20073 = size;
          var i_20074 = 0;
          while (true) {
            if (i_20074 < n__15215__auto___20073) {
              var x_20075 = function() {
                var G__20064 = idx + i_20074;
                var G__20065 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20074);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20064, G__20065) : f.call(null, G__20064, G__20065);
              }();
              if (x_20075 == null) {
              } else {
                cljs.core.chunk_append(b, x_20075);
              }
              var G__20076 = i_20074 + 1;
              i_20074 = G__20076;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__20066 = idx;
            var G__20067 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20066, G__20067) : f.call(null, G__20066, G__20067);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var args20083 = [];
  var len__15370__auto___20090 = arguments.length;
  var i__15371__auto___20091 = 0;
  while (true) {
    if (i__15371__auto___20091 < len__15370__auto___20090) {
      args20083.push(arguments[i__15371__auto___20091]);
      var G__20092 = i__15371__auto___20091 + 1;
      i__15371__auto___20091 = G__20092;
      continue;
    } else {
    }
    break;
  }
  var G__20089 = args20083.length;
  switch(G__20089) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20083.slice(3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          var and__14319__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__14319__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__14319__auto____$1;
          }
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__20094__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__14319__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__14319__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__14319__auto__;
          }
        }());
      };
      var G__20094 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20095__i = 0, G__20095__a = new Array(arguments.length - 3);
          while (G__20095__i < G__20095__a.length) {
            G__20095__a[G__20095__i] = arguments[G__20095__i + 3];
            ++G__20095__i;
          }
          args = new cljs.core.IndexedSeq(G__20095__a, 0);
        }
        return G__20094__delegate.call(this, x, y, z, args);
      };
      G__20094.cljs$lang$maxFixedArity = 3;
      G__20094.cljs$lang$applyTo = function(arglist__20096) {
        var x = cljs.core.first(arglist__20096);
        arglist__20096 = cljs.core.next(arglist__20096);
        var y = cljs.core.first(arglist__20096);
        arglist__20096 = cljs.core.next(arglist__20096);
        var z = cljs.core.first(arglist__20096);
        var args = cljs.core.rest(arglist__20096);
        return G__20094__delegate(x, y, z, args);
      };
      G__20094.cljs$core$IFn$_invoke$arity$variadic = G__20094__delegate;
      return G__20094;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__20097 = null;
          if (arguments.length > 3) {
            var G__20098__i = 0, G__20098__a = new Array(arguments.length - 3);
            while (G__20098__i < G__20098__a.length) {
              G__20098__a[G__20098__i] = arguments[G__20098__i + 3];
              ++G__20098__i;
            }
            G__20097 = new cljs.core.IndexedSeq(G__20098__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20097);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          var and__14319__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__14319__auto____$1)) {
            var and__14319__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__14319__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__14319__auto____$2;
            }
          } else {
            return and__14319__auto____$1;
          }
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          var and__14319__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__14319__auto____$1)) {
            var and__14319__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__14319__auto____$2)) {
              var and__14319__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__14319__auto____$3)) {
                var and__14319__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__14319__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__14319__auto____$4;
                }
              } else {
                return and__14319__auto____$3;
              }
            } else {
              return and__14319__auto____$2;
            }
          } else {
            return and__14319__auto____$1;
          }
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__20099__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__14319__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__14319__auto__)) {
            return cljs.core.every_QMARK_(function(and__14319__auto__) {
              return function(p1__20077_SHARP_) {
                var and__14319__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__20077_SHARP_) : p1.call(null, p1__20077_SHARP_);
                if (cljs.core.truth_(and__14319__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__20077_SHARP_) : p2.call(null, p1__20077_SHARP_);
                } else {
                  return and__14319__auto____$1;
                }
              };
            }(and__14319__auto__), args);
          } else {
            return and__14319__auto__;
          }
        }());
      };
      var G__20099 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20100__i = 0, G__20100__a = new Array(arguments.length - 3);
          while (G__20100__i < G__20100__a.length) {
            G__20100__a[G__20100__i] = arguments[G__20100__i + 3];
            ++G__20100__i;
          }
          args = new cljs.core.IndexedSeq(G__20100__a, 0);
        }
        return G__20099__delegate.call(this, x, y, z, args);
      };
      G__20099.cljs$lang$maxFixedArity = 3;
      G__20099.cljs$lang$applyTo = function(arglist__20101) {
        var x = cljs.core.first(arglist__20101);
        arglist__20101 = cljs.core.next(arglist__20101);
        var y = cljs.core.first(arglist__20101);
        arglist__20101 = cljs.core.next(arglist__20101);
        var z = cljs.core.first(arglist__20101);
        var args = cljs.core.rest(arglist__20101);
        return G__20099__delegate(x, y, z, args);
      };
      G__20099.cljs$core$IFn$_invoke$arity$variadic = G__20099__delegate;
      return G__20099;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__20102 = null;
          if (arguments.length > 3) {
            var G__20103__i = 0, G__20103__a = new Array(arguments.length - 3);
            while (G__20103__i < G__20103__a.length) {
              G__20103__a[G__20103__i] = arguments[G__20103__i + 3];
              ++G__20103__i;
            }
            G__20102 = new cljs.core.IndexedSeq(G__20103__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20102);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          var and__14319__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__14319__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__14319__auto____$1;
          }
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          var and__14319__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__14319__auto____$1)) {
            var and__14319__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__14319__auto____$2)) {
              var and__14319__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__14319__auto____$3)) {
                var and__14319__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__14319__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__14319__auto____$4;
                }
              } else {
                return and__14319__auto____$3;
              }
            } else {
              return and__14319__auto____$2;
            }
          } else {
            return and__14319__auto____$1;
          }
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__14319__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__14319__auto__)) {
          var and__14319__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__14319__auto____$1)) {
            var and__14319__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__14319__auto____$2)) {
              var and__14319__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__14319__auto____$3)) {
                var and__14319__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__14319__auto____$4)) {
                  var and__14319__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__14319__auto____$5)) {
                    var and__14319__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__14319__auto____$6)) {
                      var and__14319__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__14319__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__14319__auto____$7;
                      }
                    } else {
                      return and__14319__auto____$6;
                    }
                  } else {
                    return and__14319__auto____$5;
                  }
                } else {
                  return and__14319__auto____$4;
                }
              } else {
                return and__14319__auto____$3;
              }
            } else {
              return and__14319__auto____$2;
            }
          } else {
            return and__14319__auto____$1;
          }
        } else {
          return and__14319__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__20104__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__14319__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__14319__auto__)) {
            return cljs.core.every_QMARK_(function(and__14319__auto__) {
              return function(p1__20078_SHARP_) {
                var and__14319__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__20078_SHARP_) : p1.call(null, p1__20078_SHARP_);
                if (cljs.core.truth_(and__14319__auto____$1)) {
                  var and__14319__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__20078_SHARP_) : p2.call(null, p1__20078_SHARP_);
                  if (cljs.core.truth_(and__14319__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__20078_SHARP_) : p3.call(null, p1__20078_SHARP_);
                  } else {
                    return and__14319__auto____$2;
                  }
                } else {
                  return and__14319__auto____$1;
                }
              };
            }(and__14319__auto__), args);
          } else {
            return and__14319__auto__;
          }
        }());
      };
      var G__20104 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20105__i = 0, G__20105__a = new Array(arguments.length - 3);
          while (G__20105__i < G__20105__a.length) {
            G__20105__a[G__20105__i] = arguments[G__20105__i + 3];
            ++G__20105__i;
          }
          args = new cljs.core.IndexedSeq(G__20105__a, 0);
        }
        return G__20104__delegate.call(this, x, y, z, args);
      };
      G__20104.cljs$lang$maxFixedArity = 3;
      G__20104.cljs$lang$applyTo = function(arglist__20106) {
        var x = cljs.core.first(arglist__20106);
        arglist__20106 = cljs.core.next(arglist__20106);
        var y = cljs.core.first(arglist__20106);
        arglist__20106 = cljs.core.next(arglist__20106);
        var z = cljs.core.first(arglist__20106);
        var args = cljs.core.rest(arglist__20106);
        return G__20104__delegate(x, y, z, args);
      };
      G__20104.cljs$core$IFn$_invoke$arity$variadic = G__20104__delegate;
      return G__20104;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__20107 = null;
          if (arguments.length > 3) {
            var G__20108__i = 0, G__20108__a = new Array(arguments.length - 3);
            while (G__20108__i < G__20108__a.length) {
              G__20108__a[G__20108__i] = arguments[G__20108__i + 3];
              ++G__20108__i;
            }
            G__20107 = new cljs.core.IndexedSeq(G__20108__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20107);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__20079_SHARP_) {
            return p1__20079_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20079_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__20079_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__20080_SHARP_) {
            var and__14319__auto__ = p1__20080_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20080_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__20080_SHARP_.call(null, x);
            if (cljs.core.truth_(and__14319__auto__)) {
              return p1__20080_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20080_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__20080_SHARP_.call(null, y);
            } else {
              return and__14319__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__20081_SHARP_) {
            var and__14319__auto__ = p1__20081_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20081_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__20081_SHARP_.call(null, x);
            if (cljs.core.truth_(and__14319__auto__)) {
              var and__14319__auto____$1 = p1__20081_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20081_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__20081_SHARP_.call(null, y);
              if (cljs.core.truth_(and__14319__auto____$1)) {
                return p1__20081_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20081_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__20081_SHARP_.call(null, z);
              } else {
                return and__14319__auto____$1;
              }
            } else {
              return and__14319__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__20109__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__14319__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__14319__auto__)) {
              return cljs.core.every_QMARK_(function(and__14319__auto__, ps__$1) {
                return function(p1__20082_SHARP_) {
                  return cljs.core.every_QMARK_(p1__20082_SHARP_, args);
                };
              }(and__14319__auto__, ps__$1), ps__$1);
            } else {
              return and__14319__auto__;
            }
          }());
        };
        var G__20109 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20110__i = 0, G__20110__a = new Array(arguments.length - 3);
            while (G__20110__i < G__20110__a.length) {
              G__20110__a[G__20110__i] = arguments[G__20110__i + 3];
              ++G__20110__i;
            }
            args = new cljs.core.IndexedSeq(G__20110__a, 0);
          }
          return G__20109__delegate.call(this, x, y, z, args);
        };
        G__20109.cljs$lang$maxFixedArity = 3;
        G__20109.cljs$lang$applyTo = function(arglist__20111) {
          var x = cljs.core.first(arglist__20111);
          arglist__20111 = cljs.core.next(arglist__20111);
          var y = cljs.core.first(arglist__20111);
          arglist__20111 = cljs.core.next(arglist__20111);
          var z = cljs.core.first(arglist__20111);
          var args = cljs.core.rest(arglist__20111);
          return G__20109__delegate(x, y, z, args);
        };
        G__20109.cljs$core$IFn$_invoke$arity$variadic = G__20109__delegate;
        return G__20109;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__20112 = null;
            if (arguments.length > 3) {
              var G__20113__i = 0, G__20113__a = new Array(arguments.length - 3);
              while (G__20113__i < G__20113__a.length) {
                G__20113__a[G__20113__i] = arguments[G__20113__i + 3];
                ++G__20113__i;
              }
              G__20112 = new cljs.core.IndexedSeq(G__20113__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20112);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq20084) {
  var G__20085 = cljs.core.first(seq20084);
  var seq20084__$1 = cljs.core.next(seq20084);
  var G__20086 = cljs.core.first(seq20084__$1);
  var seq20084__$2 = cljs.core.next(seq20084__$1);
  var G__20087 = cljs.core.first(seq20084__$2);
  var seq20084__$3 = cljs.core.next(seq20084__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__20085, G__20086, G__20087, seq20084__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var args20120 = [];
  var len__15370__auto___20127 = arguments.length;
  var i__15371__auto___20128 = 0;
  while (true) {
    if (i__15371__auto___20128 < len__15370__auto___20127) {
      args20120.push(arguments[i__15371__auto___20128]);
      var G__20129 = i__15371__auto___20128 + 1;
      i__15371__auto___20128 = G__20129;
      continue;
    } else {
    }
    break;
  }
  var G__20126 = args20120.length;
  switch(G__20126) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20120.slice(3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__14331__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__14331__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__14331__auto____$1)) {
          return or__14331__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__20131__delegate = function(x, y, z, args) {
        var or__14331__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__14331__auto__)) {
          return or__14331__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__20131 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20132__i = 0, G__20132__a = new Array(arguments.length - 3);
          while (G__20132__i < G__20132__a.length) {
            G__20132__a[G__20132__i] = arguments[G__20132__i + 3];
            ++G__20132__i;
          }
          args = new cljs.core.IndexedSeq(G__20132__a, 0);
        }
        return G__20131__delegate.call(this, x, y, z, args);
      };
      G__20131.cljs$lang$maxFixedArity = 3;
      G__20131.cljs$lang$applyTo = function(arglist__20133) {
        var x = cljs.core.first(arglist__20133);
        arglist__20133 = cljs.core.next(arglist__20133);
        var y = cljs.core.first(arglist__20133);
        arglist__20133 = cljs.core.next(arglist__20133);
        var z = cljs.core.first(arglist__20133);
        var args = cljs.core.rest(arglist__20133);
        return G__20131__delegate(x, y, z, args);
      };
      G__20131.cljs$core$IFn$_invoke$arity$variadic = G__20131__delegate;
      return G__20131;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__20134 = null;
          if (arguments.length > 3) {
            var G__20135__i = 0, G__20135__a = new Array(arguments.length - 3);
            while (G__20135__i < G__20135__a.length) {
              G__20135__a[G__20135__i] = arguments[G__20135__i + 3];
              ++G__20135__i;
            }
            G__20134 = new cljs.core.IndexedSeq(G__20135__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20134);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__14331__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__14331__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__14331__auto____$1)) {
          return or__14331__auto____$1;
        } else {
          var or__14331__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__14331__auto____$2)) {
            return or__14331__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__14331__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__14331__auto____$1)) {
          return or__14331__auto____$1;
        } else {
          var or__14331__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__14331__auto____$2)) {
            return or__14331__auto____$2;
          } else {
            var or__14331__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__14331__auto____$3)) {
              return or__14331__auto____$3;
            } else {
              var or__14331__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__14331__auto____$4)) {
                return or__14331__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__20136__delegate = function(x, y, z, args) {
        var or__14331__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__14331__auto__)) {
          return or__14331__auto__;
        } else {
          return cljs.core.some(function(or__14331__auto__) {
            return function(p1__20114_SHARP_) {
              var or__14331__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__20114_SHARP_) : p1.call(null, p1__20114_SHARP_);
              if (cljs.core.truth_(or__14331__auto____$1)) {
                return or__14331__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__20114_SHARP_) : p2.call(null, p1__20114_SHARP_);
              }
            };
          }(or__14331__auto__), args);
        }
      };
      var G__20136 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20137__i = 0, G__20137__a = new Array(arguments.length - 3);
          while (G__20137__i < G__20137__a.length) {
            G__20137__a[G__20137__i] = arguments[G__20137__i + 3];
            ++G__20137__i;
          }
          args = new cljs.core.IndexedSeq(G__20137__a, 0);
        }
        return G__20136__delegate.call(this, x, y, z, args);
      };
      G__20136.cljs$lang$maxFixedArity = 3;
      G__20136.cljs$lang$applyTo = function(arglist__20138) {
        var x = cljs.core.first(arglist__20138);
        arglist__20138 = cljs.core.next(arglist__20138);
        var y = cljs.core.first(arglist__20138);
        arglist__20138 = cljs.core.next(arglist__20138);
        var z = cljs.core.first(arglist__20138);
        var args = cljs.core.rest(arglist__20138);
        return G__20136__delegate(x, y, z, args);
      };
      G__20136.cljs$core$IFn$_invoke$arity$variadic = G__20136__delegate;
      return G__20136;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__20139 = null;
          if (arguments.length > 3) {
            var G__20140__i = 0, G__20140__a = new Array(arguments.length - 3);
            while (G__20140__i < G__20140__a.length) {
              G__20140__a[G__20140__i] = arguments[G__20140__i + 3];
              ++G__20140__i;
            }
            G__20139 = new cljs.core.IndexedSeq(G__20140__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20139);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__14331__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__14331__auto____$1)) {
          return or__14331__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__14331__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__14331__auto____$1)) {
          return or__14331__auto____$1;
        } else {
          var or__14331__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__14331__auto____$2)) {
            return or__14331__auto____$2;
          } else {
            var or__14331__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__14331__auto____$3)) {
              return or__14331__auto____$3;
            } else {
              var or__14331__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__14331__auto____$4)) {
                return or__14331__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__14331__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__14331__auto____$1)) {
          return or__14331__auto____$1;
        } else {
          var or__14331__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__14331__auto____$2)) {
            return or__14331__auto____$2;
          } else {
            var or__14331__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__14331__auto____$3)) {
              return or__14331__auto____$3;
            } else {
              var or__14331__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__14331__auto____$4)) {
                return or__14331__auto____$4;
              } else {
                var or__14331__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__14331__auto____$5)) {
                  return or__14331__auto____$5;
                } else {
                  var or__14331__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__14331__auto____$6)) {
                    return or__14331__auto____$6;
                  } else {
                    var or__14331__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__14331__auto____$7)) {
                      return or__14331__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__20141__delegate = function(x, y, z, args) {
        var or__14331__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__14331__auto__)) {
          return or__14331__auto__;
        } else {
          return cljs.core.some(function(or__14331__auto__) {
            return function(p1__20115_SHARP_) {
              var or__14331__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__20115_SHARP_) : p1.call(null, p1__20115_SHARP_);
              if (cljs.core.truth_(or__14331__auto____$1)) {
                return or__14331__auto____$1;
              } else {
                var or__14331__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__20115_SHARP_) : p2.call(null, p1__20115_SHARP_);
                if (cljs.core.truth_(or__14331__auto____$2)) {
                  return or__14331__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__20115_SHARP_) : p3.call(null, p1__20115_SHARP_);
                }
              }
            };
          }(or__14331__auto__), args);
        }
      };
      var G__20141 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__20142__i = 0, G__20142__a = new Array(arguments.length - 3);
          while (G__20142__i < G__20142__a.length) {
            G__20142__a[G__20142__i] = arguments[G__20142__i + 3];
            ++G__20142__i;
          }
          args = new cljs.core.IndexedSeq(G__20142__a, 0);
        }
        return G__20141__delegate.call(this, x, y, z, args);
      };
      G__20141.cljs$lang$maxFixedArity = 3;
      G__20141.cljs$lang$applyTo = function(arglist__20143) {
        var x = cljs.core.first(arglist__20143);
        arglist__20143 = cljs.core.next(arglist__20143);
        var y = cljs.core.first(arglist__20143);
        arglist__20143 = cljs.core.next(arglist__20143);
        var z = cljs.core.first(arglist__20143);
        var args = cljs.core.rest(arglist__20143);
        return G__20141__delegate(x, y, z, args);
      };
      G__20141.cljs$core$IFn$_invoke$arity$variadic = G__20141__delegate;
      return G__20141;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__20144 = null;
          if (arguments.length > 3) {
            var G__20145__i = 0, G__20145__a = new Array(arguments.length - 3);
            while (G__20145__i < G__20145__a.length) {
              G__20145__a[G__20145__i] = arguments[G__20145__i + 3];
              ++G__20145__i;
            }
            G__20144 = new cljs.core.IndexedSeq(G__20145__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20144);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__20116_SHARP_) {
            return p1__20116_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20116_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__20116_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__20117_SHARP_) {
            var or__14331__auto__ = p1__20117_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20117_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__20117_SHARP_.call(null, x);
            if (cljs.core.truth_(or__14331__auto__)) {
              return or__14331__auto__;
            } else {
              return p1__20117_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20117_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__20117_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__20118_SHARP_) {
            var or__14331__auto__ = p1__20118_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20118_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__20118_SHARP_.call(null, x);
            if (cljs.core.truth_(or__14331__auto__)) {
              return or__14331__auto__;
            } else {
              var or__14331__auto____$1 = p1__20118_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20118_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__20118_SHARP_.call(null, y);
              if (cljs.core.truth_(or__14331__auto____$1)) {
                return or__14331__auto____$1;
              } else {
                return p1__20118_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__20118_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__20118_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__20146__delegate = function(x, y, z, args) {
          var or__14331__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__14331__auto__)) {
            return or__14331__auto__;
          } else {
            return cljs.core.some(function(or__14331__auto__, ps__$1) {
              return function(p1__20119_SHARP_) {
                return cljs.core.some(p1__20119_SHARP_, args);
              };
            }(or__14331__auto__, ps__$1), ps__$1);
          }
        };
        var G__20146 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__20147__i = 0, G__20147__a = new Array(arguments.length - 3);
            while (G__20147__i < G__20147__a.length) {
              G__20147__a[G__20147__i] = arguments[G__20147__i + 3];
              ++G__20147__i;
            }
            args = new cljs.core.IndexedSeq(G__20147__a, 0);
          }
          return G__20146__delegate.call(this, x, y, z, args);
        };
        G__20146.cljs$lang$maxFixedArity = 3;
        G__20146.cljs$lang$applyTo = function(arglist__20148) {
          var x = cljs.core.first(arglist__20148);
          arglist__20148 = cljs.core.next(arglist__20148);
          var y = cljs.core.first(arglist__20148);
          arglist__20148 = cljs.core.next(arglist__20148);
          var z = cljs.core.first(arglist__20148);
          var args = cljs.core.rest(arglist__20148);
          return G__20146__delegate(x, y, z, args);
        };
        G__20146.cljs$core$IFn$_invoke$arity$variadic = G__20146__delegate;
        return G__20146;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__20149 = null;
            if (arguments.length > 3) {
              var G__20150__i = 0, G__20150__a = new Array(arguments.length - 3);
              while (G__20150__i < G__20150__a.length) {
                G__20150__a[G__20150__i] = arguments[G__20150__i + 3];
                ++G__20150__i;
              }
              G__20149 = new cljs.core.IndexedSeq(G__20150__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__20149);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq20121) {
  var G__20122 = cljs.core.first(seq20121);
  var seq20121__$1 = cljs.core.next(seq20121);
  var G__20123 = cljs.core.first(seq20121__$1);
  var seq20121__$2 = cljs.core.next(seq20121__$1);
  var G__20124 = cljs.core.first(seq20121__$2);
  var seq20121__$3 = cljs.core.next(seq20121__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__20122, G__20123, G__20124, seq20121__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var args20152 = [];
  var len__15370__auto___20172 = arguments.length;
  var i__15371__auto___20173 = 0;
  while (true) {
    if (i__15371__auto___20173 < len__15370__auto___20172) {
      args20152.push(arguments[i__15371__auto___20173]);
      var G__20174 = i__15371__auto___20173 + 1;
      i__15371__auto___20173 = G__20174;
      continue;
    } else {
    }
    break;
  }
  var G__20159 = args20152.length;
  switch(G__20159) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20152.slice(4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__15389__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__20176 = null;
      var G__20176__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__20176__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__20176__2 = function(result, input) {
        var G__20160 = result;
        var G__20161 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20160, G__20161) : rf.call(null, G__20160, G__20161);
      };
      var G__20176__3 = function() {
        var G__20177__delegate = function(result, input, inputs) {
          var G__20162 = result;
          var G__20163 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__20162, G__20163) : rf.call(null, G__20162, G__20163);
        };
        var G__20177 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__20178__i = 0, G__20178__a = new Array(arguments.length - 2);
            while (G__20178__i < G__20178__a.length) {
              G__20178__a[G__20178__i] = arguments[G__20178__i + 2];
              ++G__20178__i;
            }
            inputs = new cljs.core.IndexedSeq(G__20178__a, 0);
          }
          return G__20177__delegate.call(this, result, input, inputs);
        };
        G__20177.cljs$lang$maxFixedArity = 2;
        G__20177.cljs$lang$applyTo = function(arglist__20179) {
          var result = cljs.core.first(arglist__20179);
          arglist__20179 = cljs.core.next(arglist__20179);
          var input = cljs.core.first(arglist__20179);
          var inputs = cljs.core.rest(arglist__20179);
          return G__20177__delegate(result, input, inputs);
        };
        G__20177.cljs$core$IFn$_invoke$arity$variadic = G__20177__delegate;
        return G__20177;
      }();
      G__20176 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__20176__0.call(this);
          case 1:
            return G__20176__1.call(this, result);
          case 2:
            return G__20176__2.call(this, result, input);
          default:
            var G__20180 = null;
            if (arguments.length > 2) {
              var G__20181__i = 0, G__20181__a = new Array(arguments.length - 2);
              while (G__20181__i < G__20181__a.length) {
                G__20181__a[G__20181__i] = arguments[G__20181__i + 2];
                ++G__20181__i;
              }
              G__20180 = new cljs.core.IndexedSeq(G__20181__a, 0);
            }
            return G__20176__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__20180);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20176.cljs$lang$maxFixedArity = 2;
      G__20176.cljs$lang$applyTo = G__20176__3.cljs$lang$applyTo;
      G__20176.cljs$core$IFn$_invoke$arity$0 = G__20176__0;
      G__20176.cljs$core$IFn$_invoke$arity$1 = G__20176__1;
      G__20176.cljs$core$IFn$_invoke$arity$2 = G__20176__2;
      G__20176.cljs$core$IFn$_invoke$arity$variadic = G__20176__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__20176;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__15215__auto___20182 = size;
        var i_20183 = 0;
        while (true) {
          if (i_20183 < n__15215__auto___20182) {
            cljs.core.chunk_append(b, function() {
              var G__20164 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20183);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20164) : f.call(null, G__20164);
            }());
            var G__20184 = i_20183 + 1;
            i_20183 = G__20184;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__20165 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20165) : f.call(null, G__20165);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__20166 = cljs.core.first(s1);
        var G__20167 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20166, G__20167) : f.call(null, G__20166, G__20167);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__20168 = cljs.core.first(s1);
        var G__20169 = cljs.core.first(s2);
        var G__20170 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20168, G__20169, G__20170) : f.call(null, G__20168, G__20169, G__20170);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__20151_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__20151_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq20153) {
  var G__20154 = cljs.core.first(seq20153);
  var seq20153__$1 = cljs.core.next(seq20153);
  var G__20155 = cljs.core.first(seq20153__$1);
  var seq20153__$2 = cljs.core.next(seq20153__$1);
  var G__20156 = cljs.core.first(seq20153__$2);
  var seq20153__$3 = cljs.core.next(seq20153__$2);
  var G__20157 = cljs.core.first(seq20153__$3);
  var seq20153__$4 = cljs.core.next(seq20153__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__20154, G__20155, G__20156, G__20157, seq20153__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var args20185 = [];
  var len__15370__auto___20190 = arguments.length;
  var i__15371__auto___20191 = 0;
  while (true) {
    if (i__15371__auto___20191 < len__15370__auto___20190) {
      args20185.push(arguments[i__15371__auto___20191]);
      var G__20192 = i__15371__auto___20191 + 1;
      i__15371__auto___20191 = G__20192;
      continue;
    } else {
    }
    break;
  }
  var G__20187 = args20185.length;
  switch(G__20187) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20185.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__20188 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__20188) : cljs.core.pr_str.call(null, G__20188);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__20194 = null;
        var G__20194__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20194__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__20194__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__20194 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20194__0.call(this);
            case 1:
              return G__20194__1.call(this, result);
            case 2:
              return G__20194__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20194.cljs$core$IFn$_invoke$arity$0 = G__20194__0;
        G__20194.cljs$core$IFn$_invoke$arity$1 = G__20194__1;
        G__20194.cljs$core$IFn$_invoke$arity$2 = G__20194__2;
        return G__20194;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__20189 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__20189) : cljs.core.pr_str.call(null, G__20189);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4425__auto__ = cljs.core.seq(coll);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var args20195 = [];
  var len__15370__auto___20200 = arguments.length;
  var i__15371__auto___20201 = 0;
  while (true) {
    if (i__15371__auto___20201 < len__15370__auto___20200) {
      args20195.push(arguments[i__15371__auto___20201]);
      var G__20202 = i__15371__auto___20201 + 1;
      i__15371__auto___20201 = G__20202;
      continue;
    } else {
    }
    break;
  }
  var G__20197 = args20195.length;
  switch(G__20197) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20195.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__20198 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__20198) : cljs.core.pr_str.call(null, G__20198);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__20204 = null;
        var G__20204__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20204__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__20204__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__20204 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20204__0.call(this);
            case 1:
              return G__20204__1.call(this, result);
            case 2:
              return G__20204__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20204.cljs$core$IFn$_invoke$arity$0 = G__20204__0;
        G__20204.cljs$core$IFn$_invoke$arity$1 = G__20204__1;
        G__20204.cljs$core$IFn$_invoke$arity$2 = G__20204__2;
        return G__20204;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__20199 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__20199) : cljs.core.pr_str.call(null, G__20199);
    }())].join(""));
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__20205 = n__$1 - 1;
        var G__20206 = cljs.core.rest(s);
        n__$1 = G__20205;
        coll__$1 = G__20206;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var args20207 = [];
  var len__15370__auto___20210 = arguments.length;
  var i__15371__auto___20211 = 0;
  while (true) {
    if (i__15371__auto___20211 < len__15370__auto___20210) {
      args20207.push(arguments[i__15371__auto___20211]);
      var G__20212 = i__15371__auto___20211 + 1;
      i__15371__auto___20211 = G__20212;
      continue;
    } else {
    }
    break;
  }
  var G__20209 = args20207.length;
  switch(G__20209) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20207.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__20214 = cljs.core.next(s);
      var G__20215 = cljs.core.next(lead);
      s = G__20214;
      lead = G__20215;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var args20216 = [];
  var len__15370__auto___20221 = arguments.length;
  var i__15371__auto___20222 = 0;
  while (true) {
    if (i__15371__auto___20222 < len__15370__auto___20221) {
      args20216.push(arguments[i__15371__auto___20222]);
      var G__20223 = i__15371__auto___20222 + 1;
      i__15371__auto___20222 = G__20223;
      continue;
    } else {
    }
    break;
  }
  var G__20218 = args20216.length;
  switch(G__20218) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20216.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__20225 = null;
        var G__20225__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20225__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__20225__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__14319__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__14319__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__14319__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__20225 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20225__0.call(this);
            case 1:
              return G__20225__1.call(this, result);
            case 2:
              return G__20225__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20225.cljs$core$IFn$_invoke$arity$0 = G__20225__0;
        G__20225.cljs$core$IFn$_invoke$arity$1 = G__20225__1;
        G__20225.cljs$core$IFn$_invoke$arity$2 = G__20225__2;
        return G__20225;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__14319__auto__ = s;
        if (and__14319__auto__) {
          var G__20220 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__20220) : pred__$1.call(null, G__20220);
        } else {
          return and__14319__auto__;
        }
      }())) {
        var G__20226 = pred__$1;
        var G__20227 = cljs.core.rest(s);
        pred__$1 = G__20226;
        coll__$1 = G__20227;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var args20228 = [];
  var len__15370__auto___20231 = arguments.length;
  var i__15371__auto___20232 = 0;
  while (true) {
    if (i__15371__auto___20232 < len__15370__auto___20231) {
      args20228.push(arguments[i__15371__auto___20232]);
      var G__20233 = i__15371__auto___20232 + 1;
      i__15371__auto___20232 = G__20233;
      continue;
    } else {
    }
    break;
  }
  var G__20230 = args20228.length;
  switch(G__20230) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20228.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var args20235 = [];
  var len__15370__auto___20238 = arguments.length;
  var i__15371__auto___20239 = 0;
  while (true) {
    if (i__15371__auto___20239 < len__15370__auto___20238) {
      args20235.push(arguments[i__15371__auto___20239]);
      var G__20240 = i__15371__auto___20239 + 1;
      i__15371__auto___20239 = G__20240;
      continue;
    } else {
    }
    break;
  }
  var G__20237 = args20235.length;
  switch(G__20237) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20235.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var args20244 = [];
  var len__15370__auto___20250 = arguments.length;
  var i__15371__auto___20251 = 0;
  while (true) {
    if (i__15371__auto___20251 < len__15370__auto___20250) {
      args20244.push(arguments[i__15371__auto___20251]);
      var G__20252 = i__15371__auto___20251 + 1;
      i__15371__auto___20251 = G__20252;
      continue;
    } else {
    }
    break;
  }
  var G__20249 = args20244.length;
  switch(G__20249) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20244.slice(2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15389__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq20245) {
  var G__20246 = cljs.core.first(seq20245);
  var seq20245__$1 = cljs.core.next(seq20245);
  var G__20247 = cljs.core.first(seq20245__$1);
  var seq20245__$2 = cljs.core.next(seq20245__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__20246, G__20247, seq20245__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var args20254 = [];
  var len__15370__auto___20257 = arguments.length;
  var i__15371__auto___20258 = 0;
  while (true) {
    if (i__15371__auto___20258 < len__15370__auto___20257) {
      args20254.push(arguments[i__15371__auto___20258]);
      var G__20259 = i__15371__auto___20258 + 1;
      i__15371__auto___20258 = G__20259;
      continue;
    } else {
    }
    break;
  }
  var G__20256 = args20254.length;
  switch(G__20256) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20254.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__20261 = null;
        var G__20261__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20261__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__20261__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__20261 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20261__0.call(this);
            case 1:
              return G__20261__1.call(this, result);
            case 2:
              return G__20261__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20261.cljs$core$IFn$_invoke$arity$0 = G__20261__0;
        G__20261.cljs$core$IFn$_invoke$arity$1 = G__20261__1;
        G__20261.cljs$core$IFn$_invoke$arity$2 = G__20261__2;
        return G__20261;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var coll__$1 = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var args20270 = [];
  var len__15370__auto___20275 = arguments.length;
  var i__15371__auto___20276 = 0;
  while (true) {
    if (i__15371__auto___20276 < len__15370__auto___20275) {
      args20270.push(arguments[i__15371__auto___20276]);
      var G__20277 = i__15371__auto___20276 + 1;
      i__15371__auto___20276 = G__20277;
      continue;
    } else {
    }
    break;
  }
  var G__20274 = args20270.length;
  switch(G__20274) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20270.slice(1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15389__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq20271) {
  var G__20272 = cljs.core.first(seq20271);
  var seq20271__$1 = cljs.core.next(seq20271);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__20272, seq20271__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var args20279 = [];
  var len__15370__auto___20283 = arguments.length;
  var i__15371__auto___20284 = 0;
  while (true) {
    if (i__15371__auto___20284 < len__15370__auto___20283) {
      args20279.push(arguments[i__15371__auto___20284]);
      var G__20285 = i__15371__auto___20284 + 1;
      i__15371__auto___20284 = G__20285;
      continue;
    } else {
    }
    break;
  }
  var G__20281 = args20279.length;
  switch(G__20281) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20279.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__20287 = null;
      var G__20287__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__20287__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__20287__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__20287 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__20287__0.call(this);
          case 1:
            return G__20287__1.call(this, result);
          case 2:
            return G__20287__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__20287.cljs$core$IFn$_invoke$arity$0 = G__20287__0;
      G__20287.cljs$core$IFn$_invoke$arity$1 = G__20287__1;
      G__20287.cljs$core$IFn$_invoke$arity$2 = G__20287__2;
      return G__20287;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__15215__auto___20288 = size;
        var i_20289 = 0;
        while (true) {
          if (i_20289 < n__15215__auto___20288) {
            if (cljs.core.truth_(function() {
              var G__20282 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20289);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__20282) : pred.call(null, G__20282);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_20289));
            } else {
            }
            var G__20290 = i_20289 + 1;
            i_20289 = G__20290;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var args20291 = [];
  var len__15370__auto___20294 = arguments.length;
  var i__15371__auto___20295 = 0;
  while (true) {
    if (i__15371__auto___20295 < len__15370__auto___20294) {
      args20291.push(arguments[i__15371__auto___20295]);
      var G__20296 = i__15371__auto___20295 + 1;
      i__15371__auto___20295 = G__20296;
      continue;
    } else {
    }
    break;
  }
  var G__20293 = args20291.length;
  switch(G__20293) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20291.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__20298_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__20298_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var args20299 = [];
  var len__15370__auto___20304 = arguments.length;
  var i__15371__auto___20305 = 0;
  while (true) {
    if (i__15371__auto___20305 < len__15370__auto___20304) {
      args20299.push(arguments[i__15371__auto___20305]);
      var G__20306 = i__15371__auto___20305 + 1;
      i__15371__auto___20305 = G__20306;
      continue;
    } else {
    }
    break;
  }
  var G__20301 = args20299.length;
  switch(G__20301) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20299.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var args20308 = [];
  var len__15370__auto___20316 = arguments.length;
  var i__15371__auto___20317 = 0;
  while (true) {
    if (i__15371__auto___20317 < len__15370__auto___20316) {
      args20308.push(arguments[i__15371__auto___20317]);
      var G__20318 = i__15371__auto___20317 + 1;
      i__15371__auto___20317 = G__20318;
      continue;
    } else {
    }
    break;
  }
  var G__20315 = args20308.length;
  switch(G__20315) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20308.slice(4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__15389__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq20309) {
  var G__20310 = cljs.core.first(seq20309);
  var seq20309__$1 = cljs.core.next(seq20309);
  var G__20311 = cljs.core.first(seq20309__$1);
  var seq20309__$2 = cljs.core.next(seq20309__$1);
  var G__20312 = cljs.core.first(seq20309__$2);
  var seq20309__$3 = cljs.core.next(seq20309__$2);
  var G__20313 = cljs.core.first(seq20309__$3);
  var seq20309__$4 = cljs.core.next(seq20309__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__20310, G__20311, G__20312, G__20313, seq20309__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var args20320 = [];
  var len__15370__auto___20323 = arguments.length;
  var i__15371__auto___20324 = 0;
  while (true) {
    if (i__15371__auto___20324 < len__15370__auto___20323) {
      args20320.push(arguments[i__15371__auto___20324]);
      var G__20325 = i__15371__auto___20324 + 1;
      i__15371__auto___20324 = G__20325;
      continue;
    } else {
    }
    break;
  }
  var G__20322 = args20320.length;
  switch(G__20322) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20320.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var args20327 = [];
  var len__15370__auto___20331 = arguments.length;
  var i__15371__auto___20332 = 0;
  while (true) {
    if (i__15371__auto___20332 < len__15370__auto___20331) {
      args20327.push(arguments[i__15371__auto___20332]);
      var G__20333 = i__15371__auto___20332 + 1;
      i__15371__auto___20332 = G__20333;
      continue;
    } else {
    }
    break;
  }
  var G__20329 = args20327.length;
  switch(G__20329) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20327.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__20335 = sentinel;
          var G__20336 = m__$2;
          var G__20337 = cljs.core.next(ks__$1);
          sentinel = G__20335;
          m__$1 = G__20336;
          ks__$1 = G__20337;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__20338, v) {
  var vec__20343 = p__20338;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20343, 0, null);
  var ks = cljs.core.nthnext(vec__20343, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var args20344 = [];
  var len__15370__auto___20374 = arguments.length;
  var i__15371__auto___20375 = 0;
  while (true) {
    if (i__15371__auto___20375 < len__15370__auto___20374) {
      args20344.push(arguments[i__15371__auto___20375]);
      var G__20376 = i__15371__auto___20375 + 1;
      i__15371__auto___20375 = G__20376;
      continue;
    } else {
    }
    break;
  }
  var G__20353 = args20344.length;
  switch(G__20353) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20344.slice(6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__15389__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__20354, f) {
  var vec__20355 = p__20354;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20355, 0, null);
  var ks = cljs.core.nthnext(vec__20355, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20356 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20356) : f.call(null, G__20356);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__20357, f, a) {
  var vec__20358 = p__20357;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20358, 0, null);
  var ks = cljs.core.nthnext(vec__20358, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20359 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__20360 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20359, G__20360) : f.call(null, G__20359, G__20360);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__20361, f, a, b) {
  var vec__20362 = p__20361;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20362, 0, null);
  var ks = cljs.core.nthnext(vec__20362, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20363 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__20364 = a;
      var G__20365 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20363, G__20364, G__20365) : f.call(null, G__20363, G__20364, G__20365);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__20366, f, a, b, c) {
  var vec__20367 = p__20366;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20367, 0, null);
  var ks = cljs.core.nthnext(vec__20367, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__20368 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__20369 = a;
      var G__20370 = b;
      var G__20371 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20368, G__20369, G__20370, G__20371) : f.call(null, G__20368, G__20369, G__20370, G__20371);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__20372, f, a, b, c, args) {
  var vec__20373 = p__20372;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20373, 0, null);
  var ks = cljs.core.nthnext(vec__20373, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq20345) {
  var G__20346 = cljs.core.first(seq20345);
  var seq20345__$1 = cljs.core.next(seq20345);
  var G__20347 = cljs.core.first(seq20345__$1);
  var seq20345__$2 = cljs.core.next(seq20345__$1);
  var G__20348 = cljs.core.first(seq20345__$2);
  var seq20345__$3 = cljs.core.next(seq20345__$2);
  var G__20349 = cljs.core.first(seq20345__$3);
  var seq20345__$4 = cljs.core.next(seq20345__$3);
  var G__20350 = cljs.core.first(seq20345__$4);
  var seq20345__$5 = cljs.core.next(seq20345__$4);
  var G__20351 = cljs.core.first(seq20345__$5);
  var seq20345__$6 = cljs.core.next(seq20345__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, seq20345__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var args20378 = [];
  var len__15370__auto___20398 = arguments.length;
  var i__15371__auto___20399 = 0;
  while (true) {
    if (i__15371__auto___20399 < len__15370__auto___20398) {
      args20378.push(arguments[i__15371__auto___20399]);
      var G__20400 = i__15371__auto___20399 + 1;
      i__15371__auto___20399 = G__20400;
      continue;
    } else {
    }
    break;
  }
  var G__20387 = args20378.length;
  switch(G__20387) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20378.slice(6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__15389__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__20388 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__20388) : f.call(null, G__20388);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__20389 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__20390 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20389, G__20390) : f.call(null, G__20389, G__20390);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__20391 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__20392 = x;
    var G__20393 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20391, G__20392, G__20393) : f.call(null, G__20391, G__20392, G__20393);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__20394 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__20395 = x;
    var G__20396 = y;
    var G__20397 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__20394, G__20395, G__20396, G__20397) : f.call(null, G__20394, G__20395, G__20396, G__20397);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq20379) {
  var G__20380 = cljs.core.first(seq20379);
  var seq20379__$1 = cljs.core.next(seq20379);
  var G__20381 = cljs.core.first(seq20379__$1);
  var seq20379__$2 = cljs.core.next(seq20379__$1);
  var G__20382 = cljs.core.first(seq20379__$2);
  var seq20379__$3 = cljs.core.next(seq20379__$2);
  var G__20383 = cljs.core.first(seq20379__$3);
  var seq20379__$4 = cljs.core.next(seq20379__$3);
  var G__20384 = cljs.core.first(seq20379__$4);
  var seq20379__$5 = cljs.core.next(seq20379__$4);
  var G__20385 = cljs.core.first(seq20379__$5);
  var seq20379__$6 = cljs.core.next(seq20379__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__20380, G__20381, G__20382, G__20383, G__20384, G__20385, seq20379__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__20402 = ll - 5;
      var G__20403 = r;
      ll = G__20402;
      ret = G__20403;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__20408 = cljs.core.pv_aget(node, 0);
      var G__20409 = level - 5;
      node = G__20408;
      level = G__20409;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__20410 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__20411 = level - 5;
        node = G__20410;
        level = G__20411;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__20421 = init__$2;
              var G__20422 = j + i;
              var G__20423 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20421, G__20422, G__20423) : f.call(null, G__20421, G__20422, G__20423);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__20430 = j + 1;
              var G__20431 = init__$3;
              j = G__20430;
              init__$2 = G__20431;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__20432 = i + len;
        var G__20433 = init__$2;
        i = G__20432;
        init__$1 = G__20433;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__20424 = init__$2;
              var G__20425 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20424, G__20425) : f.call(null, G__20424, G__20425);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__20434 = j + 1;
              var G__20435 = init__$3;
              j = G__20434;
              init__$2 = G__20435;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__20436 = i + len;
        var G__20437 = init__$2;
        i = G__20436;
        init__$1 = G__20437;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__20426 = coll__$1;
      var G__20427 = cljs.core.first_array_for_longvec(coll__$1);
      var G__20428 = 0;
      var G__20429 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20426, G__20427, G__20428, G__20429) : cljs.core.chunked_seq.call(null, G__20426, G__20427, G__20428, G__20429);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__15215__auto___20438 = len;
    var i_20439 = 0;
    while (true) {
      if (i_20439 < n__15215__auto___20438) {
        new_tail[i_20439] = self__.tail[i_20439];
        var G__20440 = i_20439 + 1;
        i_20439 = G__20440;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__20441 = null;
  var G__20441__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__20441__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__20441 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20441__2.call(this, self__, k);
      case 3:
        return G__20441__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20441.cljs$core$IFn$_invoke$arity$2 = G__20441__2;
  G__20441.cljs$core$IFn$_invoke$arity$3 = G__20441__3;
  return G__20441;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args20420) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20420)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__20442 = i + 1;
        var G__20443 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__20442;
        out = G__20443;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var args__15377__auto__ = [];
  var len__15370__auto___20445 = arguments.length;
  var i__15371__auto___20446 = 0;
  while (true) {
    if (i__15371__auto___20446 < len__15370__auto___20445) {
      args__15377__auto__.push(arguments[i__15371__auto___20446]);
      var G__20447 = i__15371__auto___20446 + 1;
      i__15371__auto___20446 = G__20447;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq20444) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20444));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__20448 = self__.vec;
      var G__20449 = self__.node;
      var G__20450 = self__.i;
      var G__20451 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20448, G__20449, G__20450, G__20451) : cljs.core.chunked_seq.call(null, G__20448, G__20449, G__20450, G__20451);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20452 = self__.vec;
    var G__20453 = self__.i + self__.off;
    var G__20454 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__20452, G__20453, G__20454) : cljs.core.subvec.call(null, G__20452, G__20453, G__20454);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__20455 = self__.vec;
    var G__20456 = self__.i + self__.off;
    var G__20457 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__20455, G__20456, G__20457) : cljs.core.subvec.call(null, G__20455, G__20456, G__20457);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__20458 = self__.vec;
      var G__20459 = self__.node;
      var G__20460 = self__.i;
      var G__20461 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20458, G__20459, G__20460, G__20461) : cljs.core.chunked_seq.call(null, G__20458, G__20459, G__20460, G__20461);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__20462 = self__.vec;
    var G__20463 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__20464 = end;
    var G__20465 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20462, G__20463, G__20464, G__20465) : cljs.core.chunked_seq.call(null, G__20462, G__20463, G__20464, G__20465);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__20466 = self__.vec;
    var G__20467 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__20468 = end;
    var G__20469 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__20466, G__20467, G__20468, G__20469) : cljs.core.chunked_seq.call(null, G__20466, G__20467, G__20468, G__20469);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var args20470 = [];
  var len__15370__auto___20473 = arguments.length;
  var i__15371__auto___20474 = 0;
  while (true) {
    if (i__15371__auto___20474 < len__15370__auto___20473) {
      args20470.push(arguments[i__15371__auto___20474]);
      var G__20475 = i__15371__auto___20474 + 1;
      i__15371__auto___20474 = G__20475;
      continue;
    } else {
    }
    break;
  }
  var G__20472 = args20470.length;
  switch(G__20472) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20470.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__20478 = init__$1;
        var G__20479 = j;
        var G__20480 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20478, G__20479, G__20480) : f.call(null, G__20478, G__20479, G__20480);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__20497 = i + 1;
        var G__20498 = j + 1;
        var G__20499 = init__$2;
        i = G__20497;
        j = G__20498;
        init__$1 = G__20499;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__20481 = self__.meta;
  var G__20482 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__20483 = self__.start;
  var G__20484 = function() {
    var x__14643__auto__ = self__.end;
    var y__14644__auto__ = v_pos + 1;
    return x__14643__auto__ > y__14644__auto__ ? x__14643__auto__ : y__14644__auto__;
  }();
  var G__20485 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20481, G__20482, G__20483, G__20484, G__20485) : cljs.core.build_subvec.call(null, G__20481, G__20482, G__20483, G__20484, G__20485);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__20486 = self__.meta;
    var G__20487 = self__.v;
    var G__20488 = self__.start;
    var G__20489 = self__.end - 1;
    var G__20490 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20486, G__20487, G__20488, G__20489, G__20490) : cljs.core.build_subvec.call(null, G__20486, G__20487, G__20488, G__20489, G__20490);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__20492 = self__.meta;
  var G__20493 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__20494 = self__.start;
  var G__20495 = self__.end + 1;
  var G__20496 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__20492, G__20493, G__20494, G__20495, G__20496) : cljs.core.build_subvec.call(null, G__20492, G__20493, G__20494, G__20495, G__20496);
};
cljs.core.Subvec.prototype.call = function() {
  var G__20500 = null;
  var G__20500__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__20500__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__20500 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20500__2.call(this, self__, k);
      case 3:
        return G__20500__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20500.cljs$core$IFn$_invoke$arity$2 = G__20500__2;
  G__20500.cljs$core$IFn$_invoke$arity$3 = G__20500__3;
  return G__20500;
}();
cljs.core.Subvec.prototype.apply = function(self__, args20477) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20477)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__20501 = meta;
      var G__20502 = v.v;
      var G__20503 = v.start + start;
      var G__20504 = v.start + end;
      var G__20505 = __hash;
      meta = G__20501;
      v = G__20502;
      start = G__20503;
      end = G__20504;
      __hash = G__20505;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var args20506 = [];
  var len__15370__auto___20509 = arguments.length;
  var i__15371__auto___20510 = 0;
  while (true) {
    if (i__15371__auto___20510 < len__15370__auto___20509) {
      args20506.push(arguments[i__15371__auto___20510]);
      var G__20511 = i__15371__auto___20510 + 1;
      i__15371__auto___20510 = G__20511;
      continue;
    } else {
    }
    break;
  }
  var G__20508 = args20506.length;
  switch(G__20508) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20506.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__20524 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__20525 = level - 5;
        node = G__20524;
        level = G__20525;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__20529 = null;
  var G__20529__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20529__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20529 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20529__2.call(this, self__, k);
      case 3:
        return G__20529__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20529.cljs$core$IFn$_invoke$arity$2 = G__20529__2;
  G__20529.cljs$core$IFn$_invoke$arity$3 = G__20529__3;
  return G__20529;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args20526) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20526)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__14331__auto__ = cljs.core.some_QMARK_(self__.fseq) && cljs.core.seq(self__.fseq);
  if (or__14331__auto__) {
    return or__14331__auto__;
  } else {
    var and__14319__auto__ = cljs.core.some_QMARK_(self__.riter);
    if (and__14319__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__14319__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (cljs.core.some_QMARK_(self__.fseq)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.riter) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4423__auto__ = cljs.core.next(self__.front);
  if (temp__4423__auto__) {
    var f1 = temp__4423__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4423__auto__ = cljs.core.next(self__.front);
    if (temp__4423__auto__) {
      var f1 = temp__4423__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__14331__auto__ = self__.front;
    if (cljs.core.truth_(or__14331__auto__)) {
      return or__14331__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__14331__auto__ = self__.rear;
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__20530 = i + incr;
        i = G__20530;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__20531 = i + 1;
      var G__20532 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__20531;
      out = G__20532;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_20537 = 0;
  while (true) {
    if (i_20537 < l) {
      var k_20538 = ks[i_20537];
      new_obj[k_20538] = obj[k_20538];
      var G__20539 = i_20537 + 1;
      i_20537 = G__20539;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__20542 = init__$1;
        var G__20543 = k;
        var G__20544 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20542, G__20543, G__20544) : f.call(null, G__20542, G__20543, G__20544);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__20545 = cljs.core.rest(keys__$1);
        var G__20546 = init__$2;
        keys__$1 = G__20545;
        init__$1 = G__20546;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__20540_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__20540_SHARP_, self__.strobj[p1__20540_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__20547 = null;
  var G__20547__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20547__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20547 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20547__2.call(this, self__, k);
      case 3:
        return G__20547__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20547.cljs$core$IFn$_invoke$arity$2 = G__20547__2;
  G__20547.cljs$core$IFn$_invoke$arity$3 = G__20547__3;
  return G__20547;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args20541) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20541)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__14331__auto__ = self__.i < self__.base_count;
  if (or__14331__auto__) {
    return or__14331__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__20550 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20550, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20550, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__20551 = i + 2;
        i = G__20551;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__20552 = i + 2;
        i = G__20552;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__20553 = i + 2;
        i = G__20553;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__20554 = i + 2;
        i = G__20554;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__20555 = i + 2;
        i = G__20555;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_20556 = 0;
  while (true) {
    if (i_20556 < l) {
      narr[i_20556] = arr[i_20556];
      var G__20557 = i_20556 + 1;
      i_20556 = G__20557;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20559 = cljs.core.seq(coll);
  var chunk__20560 = null;
  var count__20561 = 0;
  var i__20562 = 0;
  while (true) {
    if (i__20562 < count__20561) {
      var vec__20563 = chunk__20560.cljs$core$IIndexed$_nth$arity$2(null, i__20562);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20563, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20563, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__20572 = seq__20559;
      var G__20573 = chunk__20560;
      var G__20574 = count__20561;
      var G__20575 = i__20562 + 1;
      seq__20559 = G__20572;
      chunk__20560 = G__20573;
      count__20561 = G__20574;
      i__20562 = G__20575;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__20559);
      if (temp__4425__auto__) {
        var seq__20559__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20559__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__20559__$1);
          var G__20576 = cljs.core.chunk_rest(seq__20559__$1);
          var G__20577 = c__15115__auto__;
          var G__20578 = cljs.core.count(c__15115__auto__);
          var G__20579 = 0;
          seq__20559 = G__20576;
          chunk__20560 = G__20577;
          count__20561 = G__20578;
          i__20562 = G__20579;
          continue;
        } else {
          var vec__20564 = cljs.core.first(seq__20559__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20564, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20564, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__20580 = cljs.core.next(seq__20559__$1);
          var G__20581 = null;
          var G__20582 = 0;
          var G__20583 = 0;
          seq__20559 = G__20580;
          chunk__20560 = G__20581;
          count__20561 = G__20582;
          i__20562 = G__20583;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__20565 = init__$1;
        var G__20566 = self__.arr[i];
        var G__20567 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20565, G__20566, G__20567) : f.call(null, G__20565, G__20566, G__20567);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__20584 = i + 2;
        var G__20585 = init__$2;
        i = G__20584;
        init__$1 = G__20585;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__20586 = i + 2;
              i = G__20586;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__20587 = s + 2;
            var G__20588 = d;
            s = G__20587;
            d = G__20588;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__20589 = s + 2;
            var G__20590 = d + 2;
            s = G__20589;
            d = G__20590;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__20571 = cljs.core.aclone(self__.arr);
        G__20571[idx + 1] = v;
        return G__20571;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20591 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20592 = cljs.core.next(es);
          ret = G__20591;
          es = G__20592;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__20593 = null;
  var G__20593__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20593__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20593 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20593__2.call(this, self__, k);
      case 3:
        return G__20593__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20593.cljs$core$IFn$_invoke$arity$2 = G__20593__2;
  G__20593.cljs$core$IFn$_invoke$arity$3 = G__20593__3;
  return G__20593;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args20558) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20558)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_20594 = 0;
    while (true) {
      if (i_20594 < arr__$1.length) {
        var k_20595 = arr__$1[i_20594];
        var v_20596 = arr__$1[i_20594 + 1];
        var idx_20597 = cljs.core.array_index_of(ret, k_20595);
        if (idx_20597 === -1) {
          ret.push(k_20595);
          ret.push(v_20596);
        } else {
        }
        var G__20598 = i_20594 + 2;
        i_20594 = G__20598;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__20601 = cljs.core.next(es);
          var G__20602 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__20601;
          tcoll__$2 = G__20602;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__20600_20603 = self__.arr;
      G__20600_20603.pop();
      G__20600_20603.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__20604 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__20605 = i + 2;
      out = G__20604;
      i = G__20605;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var args20606 = [];
  var len__15370__auto___20611 = arguments.length;
  var i__15371__auto___20612 = 0;
  while (true) {
    if (i__15371__auto___20612 < len__15370__auto___20611) {
      args20606.push(arguments[i__15371__auto___20612]);
      var G__20613 = i__15371__auto___20612 + 1;
      i__15371__auto___20612 = G__20613;
      continue;
    } else {
    }
    break;
  }
  var G__20608 = args20606.length;
  switch(G__20608) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20606.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__20609 = cljs.core.aclone(arr);
  G__20609[i] = a;
  return G__20609;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__20610 = cljs.core.aclone(arr);
  G__20610[i] = a;
  G__20610[j] = b;
  return G__20610;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var args20615 = [];
  var len__15370__auto___20618 = arguments.length;
  var i__15371__auto___20619 = 0;
  while (true) {
    if (i__15371__auto___20619 < len__15370__auto___20618) {
      args20615.push(arguments[i__15371__auto___20619]);
      var G__20620 = i__15371__auto___20619 + 1;
      i__15371__auto___20619 = G__20620;
      continue;
    } else {
    }
    break;
  }
  var G__20617 = args20615.length;
  switch(G__20617) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20615.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__20625 = init__$1;
          var G__20626 = k;
          var G__20627 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20625, G__20626, G__20627) : f.call(null, G__20625, G__20626, G__20627);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__20628 = i + 2;
        var G__20629 = init__$2;
        i = G__20628;
        init__$1 = G__20629;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = cljs.core.some_QMARK_(key) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : cljs.core.some_QMARK_(node_or_val) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__14331__auto__ = cljs.core.some_QMARK_(self__.next_entry);
  if (or__14331__auto__) {
    return or__14331__auto__;
  } else {
    var or__14331__auto____$1 = cljs.core.some_QMARK_(self__.next_iter);
    if (or__14331__auto____$1) {
      return or__14331__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.some_QMARK_(self__.next_entry)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.next_iter)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_20643 = 0;
        var j_20644 = 0;
        while (true) {
          if (i_20643 < 32) {
            if ((self__.bitmap >>> i_20643 & 1) === 0) {
              var G__20645 = i_20643 + 1;
              var G__20646 = j_20644;
              i_20643 = G__20645;
              j_20644 = G__20646;
              continue;
            } else {
              nodes[i_20643] = !(self__.arr[j_20644] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_20644]), self__.arr[j_20644], self__.arr[j_20644 + 1], added_leaf_QMARK_) : self__.arr[j_20644 + 1];
              var G__20647 = i_20643 + 1;
              var G__20648 = j_20644 + 2;
              i_20643 = G__20647;
              j_20644 = G__20648;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__20630 = edit__$1;
          var G__20631 = shift + 5;
          var G__20632 = key_or_nil;
          var G__20633 = val_or_node;
          var G__20634 = hash;
          var G__20635 = key;
          var G__20636 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__20630, G__20631, G__20632, G__20633, G__20634, G__20635, G__20636) : cljs.core.create_node.call(null, G__20630, G__20631, G__20632, G__20633, G__20634, G__20635, G__20636);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_20649 = 0;
      var j_20650 = 0;
      while (true) {
        if (i_20649 < 32) {
          if ((self__.bitmap >>> i_20649 & 1) === 0) {
            var G__20651 = i_20649 + 1;
            var G__20652 = j_20650;
            i_20649 = G__20651;
            j_20650 = G__20652;
            continue;
          } else {
            nodes[i_20649] = !(self__.arr[j_20650] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_20650]), self__.arr[j_20650], self__.arr[j_20650 + 1], added_leaf_QMARK_) : self__.arr[j_20650 + 1];
            var G__20653 = i_20649 + 1;
            var G__20654 = j_20650 + 2;
            i_20649 = G__20653;
            j_20650 = G__20654;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__20637 = shift + 5;
          var G__20638 = key_or_nil;
          var G__20639 = val_or_node;
          var G__20640 = hash;
          var G__20641 = key;
          var G__20642 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__20637, G__20638, G__20639, G__20640, G__20641, G__20642) : cljs.core.create_node.call(null, G__20637, G__20638, G__20639, G__20640, G__20641, G__20642);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = true;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__20655 = i + 1;
        var G__20656 = j + 2;
        var G__20657 = bitmap | 1 << i;
        i = G__20655;
        j = G__20656;
        bitmap = G__20657;
        continue;
      } else {
        var G__20658 = i + 1;
        var G__20659 = j;
        var G__20660 = bitmap;
        i = G__20658;
        j = G__20659;
        bitmap = G__20660;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(cljs.core.some_QMARK_(self__.next_iter) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (cljs.core.some_QMARK_(node)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__20661 = i + 1;
          var G__20662 = init__$2;
          i = G__20661;
          init__$1 = G__20662;
          continue;
        }
      } else {
        var G__20663 = i + 1;
        var G__20664 = init__$1;
        i = G__20663;
        init__$1 = G__20664;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = true;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__20665 = i + 2;
        i = G__20665;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = true;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var args20666 = [];
  var len__15370__auto___20669 = arguments.length;
  var i__15371__auto___20670 = 0;
  while (true) {
    if (i__15371__auto___20670 < len__15370__auto___20669) {
      args20666.push(arguments[i__15371__auto___20670]);
      var G__20671 = i__15371__auto___20670 + 1;
      i__15371__auto___20670 = G__20671;
      continue;
    } else {
    }
    break;
  }
  var G__20668 = args20666.length;
  switch(G__20668) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20666.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__20673 = self__.nodes;
    var G__20674 = self__.i + 2;
    var G__20675 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__20673, G__20674, G__20675) : cljs.core.create_inode_seq.call(null, G__20673, G__20674, G__20675);
  } else {
    var G__20676 = self__.nodes;
    var G__20677 = self__.i;
    var G__20678 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__20676, G__20677, G__20678) : cljs.core.create_inode_seq.call(null, G__20676, G__20677, G__20678);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var args20679 = [];
  var len__15370__auto___20682 = arguments.length;
  var i__15371__auto___20683 = 0;
  while (true) {
    if (i__15371__auto___20683 < len__15370__auto___20682) {
      args20679.push(arguments[i__15371__auto___20683]);
      var G__20684 = i__15371__auto___20683 + 1;
      i__15371__auto___20683 = G__20684;
      continue;
    } else {
    }
    break;
  }
  var G__20681 = args20679.length;
  switch(G__20681) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20679.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4423__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var node = temp__4423__auto__;
            var temp__4423__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4423__auto____$1)) {
              var node_seq = temp__4423__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__20686 = j + 2;
              j = G__20686;
              continue;
            }
          } else {
            var G__20687 = j + 2;
            j = G__20687;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__20688 = null;
  var G__20689 = self__.nodes;
  var G__20690 = self__.i;
  var G__20691 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__20688, G__20689, G__20690, G__20691) : cljs.core.create_array_node_seq.call(null, G__20688, G__20689, G__20690, G__20691);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var args20692 = [];
  var len__15370__auto___20695 = arguments.length;
  var i__15371__auto___20696 = 0;
  while (true) {
    if (i__15371__auto___20696 < len__15370__auto___20695) {
      args20692.push(arguments[i__15371__auto___20696]);
      var G__20697 = i__15371__auto___20696 + 1;
      i__15371__auto___20696 = G__20697;
      continue;
    } else {
    }
    break;
  }
  var G__20694 = args20692.length;
  switch(G__20694) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20692.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4423__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4423__auto__)) {
          var nj = temp__4423__auto__;
          var temp__4423__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var ns = temp__4423__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__20699 = j + 1;
            j = G__20699;
            continue;
          }
        } else {
          var G__20700 = j + 1;
          j = G__20700;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.seen && self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return self__.nil_val;
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20702 = cljs.core.seq(coll);
  var chunk__20703 = null;
  var count__20704 = 0;
  var i__20705 = 0;
  while (true) {
    if (i__20705 < count__20704) {
      var vec__20706 = chunk__20703.cljs$core$IIndexed$_nth$arity$2(null, i__20705);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20706, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20706, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__20710 = seq__20702;
      var G__20711 = chunk__20703;
      var G__20712 = count__20704;
      var G__20713 = i__20705 + 1;
      seq__20702 = G__20710;
      chunk__20703 = G__20711;
      count__20704 = G__20712;
      i__20705 = G__20713;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__20702);
      if (temp__4425__auto__) {
        var seq__20702__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20702__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__20702__$1);
          var G__20714 = cljs.core.chunk_rest(seq__20702__$1);
          var G__20715 = c__15115__auto__;
          var G__20716 = cljs.core.count(c__15115__auto__);
          var G__20717 = 0;
          seq__20702 = G__20714;
          chunk__20703 = G__20715;
          count__20704 = G__20716;
          i__20705 = G__20717;
          continue;
        } else {
          var vec__20707 = cljs.core.first(seq__20702__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20707, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20707, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__20718 = cljs.core.next(seq__20702__$1);
          var G__20719 = null;
          var G__20720 = 0;
          var G__20721 = 0;
          seq__20702 = G__20718;
          chunk__20703 = G__20719;
          count__20704 = G__20720;
          i__20705 = G__20721;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20722 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20723 = cljs.core.next(es);
          ret = G__20722;
          es = G__20723;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__20724 = null;
  var G__20724__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20724__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20724 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20724__2.call(this, self__, k);
      case 3:
        return G__20724__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20724.cljs$core$IFn$_invoke$arity$2 = G__20724__2;
  G__20724.cljs$core$IFn$_invoke$arity$3 = G__20724__3;
  return G__20724;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args20701) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20701)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20725 = i + 2;
      var G__20726 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__20725;
      ret = G__20726;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__20727 = i + 1;
      var G__20728 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__20727;
      out = G__20728;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__20730 = cljs.core.next(es);
          var G__20731 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__20730;
          tcoll__$1 = G__20731;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__20732 = ascending_QMARK_ ? t.left : t.right;
      var G__20733 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__20732;
      stack__$1 = G__20733;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__20743 = init__$1;
      var G__20744 = node.key;
      var G__20745 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__20743, G__20744, G__20745) : f.call(null, G__20743, G__20744, G__20745);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__20747 = null;
  var G__20747__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20747__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20747 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20747__2.call(this, self__, k);
      case 3:
        return G__20747__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20747.cljs$core$IFn$_invoke$arity$2 = G__20747__2;
  G__20747.cljs$core$IFn$_invoke$arity$3 = G__20747__3;
  return G__20747;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args20746) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20746)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__20749 = null;
  var G__20749__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20749__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20749 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20749__2.call(this, self__, k);
      case 3:
        return G__20749__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20749.cljs$core$IFn$_invoke$arity$2 = G__20749__2;
  G__20749.cljs$core$IFn$_invoke$arity$3 = G__20749__3;
  return G__20749;
}();
cljs.core.RedNode.prototype.apply = function(self__, args20748) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20748)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__20762 = k;
      var G__20763 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20762, G__20763) : comp.call(null, G__20762, G__20763);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__20782 = k;
      var G__20783 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__20782, G__20783) : comp.call(null, G__20782, G__20783);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20793 = cljs.core.seq(coll);
  var chunk__20794 = null;
  var count__20795 = 0;
  var i__20796 = 0;
  while (true) {
    if (i__20796 < count__20795) {
      var vec__20797 = chunk__20794.cljs$core$IIndexed$_nth$arity$2(null, i__20796);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20797, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20797, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__20803 = seq__20793;
      var G__20804 = chunk__20794;
      var G__20805 = count__20795;
      var G__20806 = i__20796 + 1;
      seq__20793 = G__20803;
      chunk__20794 = G__20804;
      count__20795 = G__20805;
      i__20796 = G__20806;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__20793);
      if (temp__4425__auto__) {
        var seq__20793__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20793__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__20793__$1);
          var G__20807 = cljs.core.chunk_rest(seq__20793__$1);
          var G__20808 = c__15115__auto__;
          var G__20809 = cljs.core.count(c__15115__auto__);
          var G__20810 = 0;
          seq__20793 = G__20807;
          chunk__20794 = G__20808;
          count__20795 = G__20809;
          i__20796 = G__20810;
          continue;
        } else {
          var vec__20798 = cljs.core.first(seq__20793__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20798, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20798, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__20811 = cljs.core.next(seq__20793__$1);
          var G__20812 = null;
          var G__20813 = 0;
          var G__20814 = 0;
          seq__20793 = G__20811;
          chunk__20794 = G__20812;
          count__20795 = G__20813;
          i__20796 = G__20814;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__20799 = k;
        var G__20800 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__20799, G__20800) : self__.comp.call(null, G__20799, G__20800);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__20815 = t.left;
          t = G__20815;
          continue;
        } else {
          var G__20816 = t.right;
          t = G__20816;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__20817 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__20818 = cljs.core.next(es);
          ret = G__20817;
          es = G__20818;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__20819 = null;
  var G__20819__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20819__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20819 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20819__2.call(this, self__, k);
      case 3:
        return G__20819__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20819.cljs$core$IFn$_invoke$arity$2 = G__20819__2;
  G__20819.cljs$core$IFn$_invoke$arity$3 = G__20819__3;
  return G__20819;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args20792) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20792)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__20801 = k;
          var G__20802 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__20801, G__20802) : self__.comp.call(null, G__20801, G__20802);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__20820 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__20821 = t.left;
              stack = G__20820;
              t = G__20821;
              continue;
            } else {
              var G__20822 = stack;
              var G__20823 = t.right;
              stack = G__20822;
              t = G__20823;
              continue;
            }
          } else {
            if (c > 0) {
              var G__20824 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__20825 = t.right;
              stack = G__20824;
              t = G__20825;
              continue;
            } else {
              var G__20826 = stack;
              var G__20827 = t.left;
              stack = G__20826;
              t = G__20827;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var args__15377__auto__ = [];
  var len__15370__auto___20829 = arguments.length;
  var i__15371__auto___20830 = 0;
  while (true) {
    if (i__15371__auto___20830 < len__15370__auto___20829) {
      args__15377__auto__.push(arguments[i__15371__auto___20830]);
      var G__20831 = i__15371__auto___20830 + 1;
      i__15371__auto___20830 = G__20831;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__20832 = cljs.core.nnext(in$);
      var G__20833 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__20832;
      out = G__20833;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq20828) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20828));
};
cljs.core.array_map = function cljs$core$array_map() {
  var args__15377__auto__ = [];
  var len__15370__auto___20835 = arguments.length;
  var i__15371__auto___20836 = 0;
  while (true) {
    if (i__15371__auto___20836 < len__15370__auto___20835) {
      args__15377__auto__.push(arguments[i__15371__auto___20836]);
      var G__20837 = i__15371__auto___20836 + 1;
      i__15371__auto___20836 = G__20837;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq20834) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20834));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var args__15377__auto__ = [];
  var len__15370__auto___20841 = arguments.length;
  var i__15371__auto___20842 = 0;
  while (true) {
    if (i__15371__auto___20842 < len__15370__auto___20841) {
      args__15377__auto__.push(arguments[i__15371__auto___20842]);
      var G__20843 = i__15371__auto___20842 + 1;
      i__15371__auto___20842 = G__20843;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__20844 = cljs.core.nnext(kvs);
      kvs = G__20844;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq20838) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20838));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var args__15377__auto__ = [];
  var len__15370__auto___20846 = arguments.length;
  var i__15371__auto___20847 = 0;
  while (true) {
    if (i__15371__auto___20847 < len__15370__auto___20846) {
      args__15377__auto__.push(arguments[i__15371__auto___20847]);
      var G__20848 = i__15371__auto___20847 + 1;
      i__15371__auto___20847 = G__20848;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__20849 = cljs.core.nnext(in$);
      var G__20850 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__20849;
      out = G__20850;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq20845) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20845));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var args__15377__auto__ = [];
  var len__15370__auto___20853 = arguments.length;
  var i__15371__auto___20854 = 0;
  while (true) {
    if (i__15371__auto___20854 < len__15370__auto___20853) {
      args__15377__auto__.push(arguments[i__15371__auto___20854]);
      var G__20855 = i__15371__auto___20854 + 1;
      i__15371__auto___20854 = G__20855;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__20856 = cljs.core.nnext(in$);
      var G__20857 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__20856;
      out = G__20857;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq20851) {
  var G__20852 = cljs.core.first(seq20851);
  var seq20851__$1 = cljs.core.next(seq20851);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__20852, seq20851__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var args__15377__auto__ = [];
  var len__15370__auto___20865 = arguments.length;
  var i__15371__auto___20866 = 0;
  while (true) {
    if (i__15371__auto___20866 < len__15370__auto___20865) {
      args__15377__auto__.push(arguments[i__15371__auto___20866]);
      var G__20867 = i__15371__auto___20866 + 1;
      i__15371__auto___20866 = G__20867;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__20862_SHARP_, p2__20863_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__14331__auto__ = p1__20862_SHARP_;
        if (cljs.core.truth_(or__14331__auto__)) {
          return or__14331__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__20863_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq20864) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20864));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var args__15377__auto__ = [];
  var len__15370__auto___20872 = arguments.length;
  var i__15371__auto___20873 = 0;
  while (true) {
    if (i__15371__auto___20873 < len__15370__auto___20872) {
      args__15377__auto__.push(arguments[i__15371__auto___20873]);
      var G__20874 = i__15371__auto___20873 + 1;
      i__15371__auto___20873 = G__20874;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__20870 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__20871 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__20870, G__20871) : f.call(null, G__20870, G__20871);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__14331__auto__ = m1;
          if (cljs.core.truth_(or__14331__auto__)) {
            return or__14331__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq20868) {
  var G__20869 = cljs.core.first(seq20868);
  var seq20868__$1 = cljs.core.next(seq20868);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__20869, seq20868__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__20875 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__20876 = cljs.core.next(keys);
      ret = G__20875;
      keys = G__20876;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20879 = cljs.core.seq(coll);
  var chunk__20880 = null;
  var count__20881 = 0;
  var i__20882 = 0;
  while (true) {
    if (i__20882 < count__20881) {
      var vec__20883 = chunk__20880.cljs$core$IIndexed$_nth$arity$2(null, i__20882);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20883, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20883, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__20885 = seq__20879;
      var G__20886 = chunk__20880;
      var G__20887 = count__20881;
      var G__20888 = i__20882 + 1;
      seq__20879 = G__20885;
      chunk__20880 = G__20886;
      count__20881 = G__20887;
      i__20882 = G__20888;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__20879);
      if (temp__4425__auto__) {
        var seq__20879__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20879__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__20879__$1);
          var G__20889 = cljs.core.chunk_rest(seq__20879__$1);
          var G__20890 = c__15115__auto__;
          var G__20891 = cljs.core.count(c__15115__auto__);
          var G__20892 = 0;
          seq__20879 = G__20889;
          chunk__20880 = G__20890;
          count__20881 = G__20891;
          i__20882 = G__20892;
          continue;
        } else {
          var vec__20884 = cljs.core.first(seq__20879__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20884, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20884, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__20893 = cljs.core.next(seq__20879__$1);
          var G__20894 = null;
          var G__20895 = 0;
          var G__20896 = 0;
          seq__20879 = G__20893;
          chunk__20880 = G__20894;
          count__20881 = G__20895;
          i__20882 = G__20896;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__20877_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__20877_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__20897 = null;
  var G__20897__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20897__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20897 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20897__2.call(this, self__, k);
      case 3:
        return G__20897__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20897.cljs$core$IFn$_invoke$arity$2 = G__20897__2;
  G__20897.cljs$core$IFn$_invoke$arity$3 = G__20897__3;
  return G__20897;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args20878) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20878)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__20898 = i + 1;
        var G__20899 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__20898;
        out = G__20899;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__20900 = i + 1;
        var G__20901 = cljs.core._conj_BANG_(out, items[i]);
        i = G__20900;
        out = G__20901;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__20903 = null;
  var G__20903__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__20903__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__20903 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20903__2.call(this, self__, k);
      case 3:
        return G__20903__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20903.cljs$core$IFn$_invoke$arity$2 = G__20903__2;
  G__20903.cljs$core$IFn$_invoke$arity$3 = G__20903__3;
  return G__20903;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args20902) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20902)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__20906 = cljs.core.seq(coll);
  var chunk__20907 = null;
  var count__20908 = 0;
  var i__20909 = 0;
  while (true) {
    if (i__20909 < count__20908) {
      var vec__20910 = chunk__20907.cljs$core$IIndexed$_nth$arity$2(null, i__20909);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20910, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20910, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__20912 = seq__20906;
      var G__20913 = chunk__20907;
      var G__20914 = count__20908;
      var G__20915 = i__20909 + 1;
      seq__20906 = G__20912;
      chunk__20907 = G__20913;
      count__20908 = G__20914;
      i__20909 = G__20915;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__20906);
      if (temp__4425__auto__) {
        var seq__20906__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__20906__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__20906__$1);
          var G__20916 = cljs.core.chunk_rest(seq__20906__$1);
          var G__20917 = c__15115__auto__;
          var G__20918 = cljs.core.count(c__15115__auto__);
          var G__20919 = 0;
          seq__20906 = G__20916;
          chunk__20907 = G__20917;
          count__20908 = G__20918;
          i__20909 = G__20919;
          continue;
        } else {
          var vec__20911 = cljs.core.first(seq__20906__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20911, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20911, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__20920 = cljs.core.next(seq__20906__$1);
          var G__20921 = null;
          var G__20922 = 0;
          var G__20923 = 0;
          seq__20906 = G__20920;
          chunk__20907 = G__20921;
          count__20908 = G__20922;
          i__20909 = G__20923;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__20904_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__20904_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__20924 = null;
  var G__20924__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__20924__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__20924 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__20924__2.call(this, self__, k);
      case 3:
        return G__20924__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20924.cljs$core$IFn$_invoke$arity$2 = G__20924__2;
  G__20924.cljs$core$IFn$_invoke$arity$3 = G__20924__3;
  return G__20924;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args20905) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args20905)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__15209__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__15209__auto__.length) {
        var G__20925 = i + 1;
        var G__20926 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__20925;
        res = G__20926;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__20927 = cljs.core.next(in$__$1);
          var G__20928 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__20927;
          out = G__20928;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var args20929 = [];
  var len__15370__auto___20933 = arguments.length;
  var i__15371__auto___20934 = 0;
  while (true) {
    if (i__15371__auto___20934 < len__15370__auto___20933) {
      args20929.push(arguments[i__15371__auto___20934]);
      var G__20935 = i__15371__auto___20934 + 1;
      i__15371__auto___20934 = G__20935;
      continue;
    } else {
    }
    break;
  }
  var G__20932 = args20929.length;
  switch(G__20932) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20929.slice(0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__15389__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq20930) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20930));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var args__15377__auto__ = [];
  var len__15370__auto___20938 = arguments.length;
  var i__15371__auto___20939 = 0;
  while (true) {
    if (i__15371__auto___20939 < len__15370__auto___20938) {
      args__15377__auto__.push(arguments[i__15371__auto___20939]);
      var G__20940 = i__15371__auto___20939 + 1;
      i__15371__auto___20939 = G__20940;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq20937) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20937));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var args__15377__auto__ = [];
  var len__15370__auto___20943 = arguments.length;
  var i__15371__auto___20944 = 0;
  while (true) {
    if (i__15371__auto___20944 < len__15370__auto___20943) {
      args__15377__auto__.push(arguments[i__15371__auto___20944]);
      var G__20945 = i__15371__auto___20944 + 1;
      i__15371__auto___20944 = G__20945;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq20941) {
  var G__20942 = cljs.core.first(seq20941);
  var seq20941__$1 = cljs.core.next(seq20941);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__20942, seq20941__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var args20948 = [];
  var len__15370__auto___20951 = arguments.length;
  var i__15371__auto___20952 = 0;
  while (true) {
    if (i__15371__auto___20952 < len__15370__auto___20951) {
      args20948.push(arguments[i__15371__auto___20952]);
      var G__20953 = i__15371__auto___20952 + 1;
      i__15371__auto___20952 = G__20953;
      continue;
    } else {
    }
    break;
  }
  var G__20950 = args20948.length;
  switch(G__20950) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20948.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__20946_SHARP_) {
    var temp__4423__auto__ = cljs.core.find(smap, p1__20946_SHARP_);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var e = temp__4423__auto__;
      return cljs.core.val(e);
    } else {
      return p1__20946_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4423__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__20947_SHARP_) {
      var temp__4423__auto__ = cljs.core.find(smap, p1__20947_SHARP_);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var e = temp__4423__auto__;
        return cljs.core.second(e);
      } else {
        return p1__20947_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var args20955 = [];
  var len__15370__auto___20964 = arguments.length;
  var i__15371__auto___20965 = 0;
  while (true) {
    if (i__15371__auto___20965 < len__15370__auto___20964) {
      args20955.push(arguments[i__15371__auto___20965]);
      var G__20966 = i__15371__auto___20965 + 1;
      i__15371__auto___20965 = G__20966;
      continue;
    } else {
    }
    break;
  }
  var G__20957 = args20955.length;
  switch(G__20957) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args20955.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__20968 = null;
        var G__20968__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__20968__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__20968__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__20968 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__20968__0.call(this);
            case 1:
              return G__20968__1.call(this, result);
            case 2:
              return G__20968__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__20968.cljs$core$IFn$_invoke$arity$0 = G__20968__0;
        G__20968.cljs$core$IFn$_invoke$arity$1 = G__20968__1;
        G__20968.cljs$core$IFn$_invoke$arity$2 = G__20968__2;
        return G__20968;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__20962, seen__$1) {
        while (true) {
          var vec__20963 = p__20962;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__20963, 0, null);
          var xs__$1 = vec__20963;
          var temp__4425__auto__ = cljs.core.seq(xs__$1);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__20969 = cljs.core.rest(s);
              var G__20970 = seen__$1;
              p__20962 = G__20969;
              seen__$1 = G__20970;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__20971 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__20972 = cljs.core.next(s__$1);
      ret = G__20971;
      s__$1 = G__20972;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__20975 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__20976 = cljs.core.next(ks);
      var G__20977 = cljs.core.next(vs);
      map = G__20975;
      ks = G__20976;
      vs = G__20977;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var args20980 = [];
  var len__15370__auto___20987 = arguments.length;
  var i__15371__auto___20988 = 0;
  while (true) {
    if (i__15371__auto___20988 < len__15370__auto___20987) {
      args20980.push(arguments[i__15371__auto___20988]);
      var G__20989 = i__15371__auto___20988 + 1;
      i__15371__auto___20988 = G__20989;
      continue;
    } else {
    }
    break;
  }
  var G__20986 = args20980.length;
  switch(G__20986) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20980.slice(3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__20978_SHARP_, p2__20979_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__20978_SHARP_, p2__20979_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq20981) {
  var G__20982 = cljs.core.first(seq20981);
  var seq20981__$1 = cljs.core.next(seq20981);
  var G__20983 = cljs.core.first(seq20981__$1);
  var seq20981__$2 = cljs.core.next(seq20981__$1);
  var G__20984 = cljs.core.first(seq20981__$2);
  var seq20981__$3 = cljs.core.next(seq20981__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__20982, G__20983, G__20984, seq20981__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var args20993 = [];
  var len__15370__auto___21000 = arguments.length;
  var i__15371__auto___21001 = 0;
  while (true) {
    if (i__15371__auto___21001 < len__15370__auto___21000) {
      args20993.push(arguments[i__15371__auto___21001]);
      var G__21002 = i__15371__auto___21001 + 1;
      i__15371__auto___21001 = G__21002;
      continue;
    } else {
    }
    break;
  }
  var G__20999 = args20993.length;
  switch(G__20999) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args20993.slice(3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__20991_SHARP_, p2__20992_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__20991_SHARP_, p2__20992_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq20994) {
  var G__20995 = cljs.core.first(seq20994);
  var seq20994__$1 = cljs.core.next(seq20994);
  var G__20996 = cljs.core.first(seq20994__$1);
  var seq20994__$2 = cljs.core.next(seq20994__$1);
  var G__20997 = cljs.core.first(seq20994__$2);
  var seq20994__$3 = cljs.core.next(seq20994__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__20995, G__20996, G__20997, seq20994__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var args21004 = [];
  var len__15370__auto___21007 = arguments.length;
  var i__15371__auto___21008 = 0;
  while (true) {
    if (i__15371__auto___21008 < len__15370__auto___21007) {
      args21004.push(arguments[i__15371__auto___21008]);
      var G__21009 = i__15371__auto___21008 + 1;
      i__15371__auto___21008 = G__21009;
      continue;
    } else {
    }
    break;
  }
  var G__21006 = args21004.length;
  switch(G__21006) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21004.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__21011 = null;
        var G__21011__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21011__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__21011__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__21011 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21011__0.call(this);
            case 1:
              return G__21011__1.call(this, result);
            case 2:
              return G__21011__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21011.cljs$core$IFn$_invoke$arity$0 = G__21011__0;
        G__21011.cljs$core$IFn$_invoke$arity$1 = G__21011__1;
        G__21011.cljs$core$IFn$_invoke$arity$2 = G__21011__2;
        return G__21011;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var args21012 = [];
  var len__15370__auto___21016 = arguments.length;
  var i__15371__auto___21017 = 0;
  while (true) {
    if (i__15371__auto___21017 < len__15370__auto___21016) {
      args21012.push(arguments[i__15371__auto___21017]);
      var G__21018 = i__15371__auto___21017 + 1;
      i__15371__auto___21017 = G__21018;
      continue;
    } else {
    }
    break;
  }
  var G__21014 = args21012.length;
  switch(G__21014) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21012.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__21020 = null;
      var G__21020__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__21020__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__21020__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__21020 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__21020__0.call(this);
          case 1:
            return G__21020__1.call(this, result);
          case 2:
            return G__21020__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21020.cljs$core$IFn$_invoke$arity$0 = G__21020__0;
      G__21020.cljs$core$IFn$_invoke$arity$1 = G__21020__1;
      G__21020.cljs$core$IFn$_invoke$arity$2 = G__21020__2;
      return G__21020;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.truth_(function() {
        var G__21015 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__21015) : pred.call(null, G__21015);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__21029 = function() {
      var G__21031 = cljs.core._entry_key(sc, e);
      var G__21032 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__21031, G__21032) : comp.call(null, G__21031, G__21032);
    }();
    var G__21030 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__21029, G__21030) : test.call(null, G__21029, G__21030);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var args21033 = [];
  var len__15370__auto___21038 = arguments.length;
  var i__15371__auto___21039 = 0;
  while (true) {
    if (i__15371__auto___21039 < len__15370__auto___21038) {
      args21033.push(arguments[i__15371__auto___21039]);
      var G__21040 = i__15371__auto___21039 + 1;
      i__15371__auto___21039 = G__21040;
      continue;
    } else {
    }
    break;
  }
  var G__21035 = args21033.length;
  switch(G__21035) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21033.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__21036 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21036, 0, null);
      var s = vec__21036;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__21037 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21037, 0, null);
    var s = vec__21037;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var args21042 = [];
  var len__15370__auto___21047 = arguments.length;
  var i__15371__auto___21048 = 0;
  while (true) {
    if (i__15371__auto___21048 < len__15370__auto___21047) {
      args21042.push(arguments[i__15371__auto___21048]);
      var G__21049 = i__15371__auto___21048 + 1;
      i__15371__auto___21048 = G__21049;
      continue;
    } else {
    }
    break;
  }
  var G__21044 = args21042.length;
  switch(G__21044) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21042.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__21045 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21045, 0, null);
      var s = vec__21045;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__21046 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21046, 0, null);
    var s = vec__21046;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__21051 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__21051);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__21052 = i + self__.step;
        var G__21053 = ret__$1;
        i = G__21052;
        ret = G__21053;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.range = function cljs$core$range() {
  var args21054 = [];
  var len__15370__auto___21057 = arguments.length;
  var i__15371__auto___21058 = 0;
  while (true) {
    if (i__15371__auto___21058 < len__15370__auto___21057) {
      args21054.push(arguments[i__15371__auto___21058]);
      var G__21059 = i__15371__auto___21058 + 1;
      i__15371__auto___21058 = G__21059;
      continue;
    } else {
    }
    break;
  }
  var G__21056 = args21054.length;
  switch(G__21056) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21054.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var args21061 = [];
  var len__15370__auto___21066 = arguments.length;
  var i__15371__auto___21067 = 0;
  while (true) {
    if (i__15371__auto___21067 < len__15370__auto___21066) {
      args21061.push(arguments[i__15371__auto___21067]);
      var G__21068 = i__15371__auto___21067 + 1;
      i__15371__auto___21067 = G__21068;
      continue;
    } else {
    }
    break;
  }
  var G__21063 = args21061.length;
  switch(G__21063) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21061.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__21064 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__21064) : cljs.core.pr_str.call(null, G__21064);
    }())].join(""));
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__21070 = null;
        var G__21070__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21070__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__21070__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__21070 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21070__0.call(this);
            case 1:
              return G__21070__1.call(this, result);
            case 2:
              return G__21070__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21070.cljs$core$IFn$_invoke$arity$0 = G__21070__0;
        G__21070.cljs$core$IFn$_invoke$arity$1 = G__21070__1;
        G__21070.cljs$core$IFn$_invoke$arity$2 = G__21070__2;
        return G__21070;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__21065 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__21065) : cljs.core.pr_str.call(null, G__21065);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var args21072 = [];
  var len__15370__auto___21075 = arguments.length;
  var i__15371__auto___21076 = 0;
  while (true) {
    if (i__15371__auto___21076 < len__15370__auto___21075) {
      args21072.push(arguments[i__15371__auto___21076]);
      var G__21077 = i__15371__auto___21076 + 1;
      i__15371__auto___21076 = G__21077;
      continue;
    } else {
    }
    break;
  }
  var G__21074 = args21072.length;
  switch(G__21074) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21072.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__21079 = null;
        var G__21079__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21079__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__21079__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__21079 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21079__0.call(this);
            case 1:
              return G__21079__1.call(this, result);
            case 2:
              return G__21079__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21079.cljs$core$IFn$_invoke$arity$0 = G__21079__0;
        G__21079.cljs$core$IFn$_invoke$arity$1 = G__21079__1;
        G__21079.cljs$core$IFn$_invoke$arity$2 = G__21079__2;
        return G__21079;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4425__auto__) {
        return function(p1__21071_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__21071_SHARP_) : f.call(null, p1__21071_SHARP_));
        };
      }(fst, fv, s, temp__4425__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var args21080 = [];
  var len__15370__auto___21085 = arguments.length;
  var i__15371__auto___21086 = 0;
  while (true) {
    if (i__15371__auto___21086 < len__15370__auto___21085) {
      args21080.push(arguments[i__15371__auto___21086]);
      var G__21087 = i__15371__auto___21086 + 1;
      i__15371__auto___21086 = G__21087;
      continue;
    } else {
    }
    break;
  }
  var G__21082 = args21080.length;
  switch(G__21082) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21080.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__21083 = init;
        var G__21084 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__21083, G__21084) : f.call(null, G__21083, G__21084);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var args21099 = [];
  var len__15370__auto___21106 = arguments.length;
  var i__15371__auto___21107 = 0;
  while (true) {
    if (i__15371__auto___21107 < len__15370__auto___21106) {
      args21099.push(arguments[i__15371__auto___21107]);
      var G__21108 = i__15371__auto___21107 + 1;
      i__15371__auto___21107 = G__21108;
      continue;
    } else {
    }
    break;
  }
  var G__21105 = args21099.length;
  switch(G__21105) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args21099.slice(3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__15389__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__21110 = null;
    var G__21110__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__21110__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__21110__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__21110__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__21110__4 = function() {
      var G__21111__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__21111 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__21112__i = 0, G__21112__a = new Array(arguments.length - 3);
          while (G__21112__i < G__21112__a.length) {
            G__21112__a[G__21112__i] = arguments[G__21112__i + 3];
            ++G__21112__i;
          }
          args = new cljs.core.IndexedSeq(G__21112__a, 0);
        }
        return G__21111__delegate.call(this, x, y, z, args);
      };
      G__21111.cljs$lang$maxFixedArity = 3;
      G__21111.cljs$lang$applyTo = function(arglist__21113) {
        var x = cljs.core.first(arglist__21113);
        arglist__21113 = cljs.core.next(arglist__21113);
        var y = cljs.core.first(arglist__21113);
        arglist__21113 = cljs.core.next(arglist__21113);
        var z = cljs.core.first(arglist__21113);
        var args = cljs.core.rest(arglist__21113);
        return G__21111__delegate(x, y, z, args);
      };
      G__21111.cljs$core$IFn$_invoke$arity$variadic = G__21111__delegate;
      return G__21111;
    }();
    G__21110 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__21110__0.call(this);
        case 1:
          return G__21110__1.call(this, x);
        case 2:
          return G__21110__2.call(this, x, y);
        case 3:
          return G__21110__3.call(this, x, y, z);
        default:
          var G__21114 = null;
          if (arguments.length > 3) {
            var G__21115__i = 0, G__21115__a = new Array(arguments.length - 3);
            while (G__21115__i < G__21115__a.length) {
              G__21115__a[G__21115__i] = arguments[G__21115__i + 3];
              ++G__21115__i;
            }
            G__21114 = new cljs.core.IndexedSeq(G__21115__a, 0);
          }
          return G__21110__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21114);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__21110.cljs$lang$maxFixedArity = 3;
    G__21110.cljs$lang$applyTo = G__21110__4.cljs$lang$applyTo;
    G__21110.cljs$core$IFn$_invoke$arity$0 = G__21110__0;
    G__21110.cljs$core$IFn$_invoke$arity$1 = G__21110__1;
    G__21110.cljs$core$IFn$_invoke$arity$2 = G__21110__2;
    G__21110.cljs$core$IFn$_invoke$arity$3 = G__21110__3;
    G__21110.cljs$core$IFn$_invoke$arity$variadic = G__21110__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__21110;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__21116 = null;
    var G__21116__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__21116__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__21116__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__21116__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__21116__4 = function() {
      var G__21117__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__21117 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__21118__i = 0, G__21118__a = new Array(arguments.length - 3);
          while (G__21118__i < G__21118__a.length) {
            G__21118__a[G__21118__i] = arguments[G__21118__i + 3];
            ++G__21118__i;
          }
          args = new cljs.core.IndexedSeq(G__21118__a, 0);
        }
        return G__21117__delegate.call(this, x, y, z, args);
      };
      G__21117.cljs$lang$maxFixedArity = 3;
      G__21117.cljs$lang$applyTo = function(arglist__21119) {
        var x = cljs.core.first(arglist__21119);
        arglist__21119 = cljs.core.next(arglist__21119);
        var y = cljs.core.first(arglist__21119);
        arglist__21119 = cljs.core.next(arglist__21119);
        var z = cljs.core.first(arglist__21119);
        var args = cljs.core.rest(arglist__21119);
        return G__21117__delegate(x, y, z, args);
      };
      G__21117.cljs$core$IFn$_invoke$arity$variadic = G__21117__delegate;
      return G__21117;
    }();
    G__21116 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__21116__0.call(this);
        case 1:
          return G__21116__1.call(this, x);
        case 2:
          return G__21116__2.call(this, x, y);
        case 3:
          return G__21116__3.call(this, x, y, z);
        default:
          var G__21120 = null;
          if (arguments.length > 3) {
            var G__21121__i = 0, G__21121__a = new Array(arguments.length - 3);
            while (G__21121__i < G__21121__a.length) {
              G__21121__a[G__21121__i] = arguments[G__21121__i + 3];
              ++G__21121__i;
            }
            G__21120 = new cljs.core.IndexedSeq(G__21121__a, 0);
          }
          return G__21116__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21120);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__21116.cljs$lang$maxFixedArity = 3;
    G__21116.cljs$lang$applyTo = G__21116__4.cljs$lang$applyTo;
    G__21116.cljs$core$IFn$_invoke$arity$0 = G__21116__0;
    G__21116.cljs$core$IFn$_invoke$arity$1 = G__21116__1;
    G__21116.cljs$core$IFn$_invoke$arity$2 = G__21116__2;
    G__21116.cljs$core$IFn$_invoke$arity$3 = G__21116__3;
    G__21116.cljs$core$IFn$_invoke$arity$variadic = G__21116__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__21116;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__21122 = null;
    var G__21122__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__21122__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__21122__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__21122__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__21122__4 = function() {
      var G__21123__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__21123 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__21124__i = 0, G__21124__a = new Array(arguments.length - 3);
          while (G__21124__i < G__21124__a.length) {
            G__21124__a[G__21124__i] = arguments[G__21124__i + 3];
            ++G__21124__i;
          }
          args = new cljs.core.IndexedSeq(G__21124__a, 0);
        }
        return G__21123__delegate.call(this, x, y, z, args);
      };
      G__21123.cljs$lang$maxFixedArity = 3;
      G__21123.cljs$lang$applyTo = function(arglist__21125) {
        var x = cljs.core.first(arglist__21125);
        arglist__21125 = cljs.core.next(arglist__21125);
        var y = cljs.core.first(arglist__21125);
        arglist__21125 = cljs.core.next(arglist__21125);
        var z = cljs.core.first(arglist__21125);
        var args = cljs.core.rest(arglist__21125);
        return G__21123__delegate(x, y, z, args);
      };
      G__21123.cljs$core$IFn$_invoke$arity$variadic = G__21123__delegate;
      return G__21123;
    }();
    G__21122 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__21122__0.call(this);
        case 1:
          return G__21122__1.call(this, x);
        case 2:
          return G__21122__2.call(this, x, y);
        case 3:
          return G__21122__3.call(this, x, y, z);
        default:
          var G__21126 = null;
          if (arguments.length > 3) {
            var G__21127__i = 0, G__21127__a = new Array(arguments.length - 3);
            while (G__21127__i < G__21127__a.length) {
              G__21127__a[G__21127__i] = arguments[G__21127__i + 3];
              ++G__21127__i;
            }
            G__21126 = new cljs.core.IndexedSeq(G__21127__a, 0);
          }
          return G__21122__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21126);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__21122.cljs$lang$maxFixedArity = 3;
    G__21122.cljs$lang$applyTo = G__21122__4.cljs$lang$applyTo;
    G__21122.cljs$core$IFn$_invoke$arity$0 = G__21122__0;
    G__21122.cljs$core$IFn$_invoke$arity$1 = G__21122__1;
    G__21122.cljs$core$IFn$_invoke$arity$2 = G__21122__2;
    G__21122.cljs$core$IFn$_invoke$arity$3 = G__21122__3;
    G__21122.cljs$core$IFn$_invoke$arity$variadic = G__21122__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__21122;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__21128 = null;
      var G__21128__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__21089_SHARP_, p2__21090_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21089_SHARP_, p2__21090_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__21090_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__21090_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__21128__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__21091_SHARP_, p2__21092_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21091_SHARP_, p2__21092_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__21092_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__21092_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__21128__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__21093_SHARP_, p2__21094_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21093_SHARP_, p2__21094_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__21094_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__21094_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__21128__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__21095_SHARP_, p2__21096_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21095_SHARP_, p2__21096_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__21096_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__21096_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__21128__4 = function() {
        var G__21129__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__21097_SHARP_, p2__21098_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__21097_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__21098_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__21129 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__21130__i = 0, G__21130__a = new Array(arguments.length - 3);
            while (G__21130__i < G__21130__a.length) {
              G__21130__a[G__21130__i] = arguments[G__21130__i + 3];
              ++G__21130__i;
            }
            args = new cljs.core.IndexedSeq(G__21130__a, 0);
          }
          return G__21129__delegate.call(this, x, y, z, args);
        };
        G__21129.cljs$lang$maxFixedArity = 3;
        G__21129.cljs$lang$applyTo = function(arglist__21131) {
          var x = cljs.core.first(arglist__21131);
          arglist__21131 = cljs.core.next(arglist__21131);
          var y = cljs.core.first(arglist__21131);
          arglist__21131 = cljs.core.next(arglist__21131);
          var z = cljs.core.first(arglist__21131);
          var args = cljs.core.rest(arglist__21131);
          return G__21129__delegate(x, y, z, args);
        };
        G__21129.cljs$core$IFn$_invoke$arity$variadic = G__21129__delegate;
        return G__21129;
      }();
      G__21128 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__21128__0.call(this);
          case 1:
            return G__21128__1.call(this, x);
          case 2:
            return G__21128__2.call(this, x, y);
          case 3:
            return G__21128__3.call(this, x, y, z);
          default:
            var G__21132 = null;
            if (arguments.length > 3) {
              var G__21133__i = 0, G__21133__a = new Array(arguments.length - 3);
              while (G__21133__i < G__21133__a.length) {
                G__21133__a[G__21133__i] = arguments[G__21133__i + 3];
                ++G__21133__i;
              }
              G__21132 = new cljs.core.IndexedSeq(G__21133__a, 0);
            }
            return G__21128__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__21132);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21128.cljs$lang$maxFixedArity = 3;
      G__21128.cljs$lang$applyTo = G__21128__4.cljs$lang$applyTo;
      G__21128.cljs$core$IFn$_invoke$arity$0 = G__21128__0;
      G__21128.cljs$core$IFn$_invoke$arity$1 = G__21128__1;
      G__21128.cljs$core$IFn$_invoke$arity$2 = G__21128__2;
      G__21128.cljs$core$IFn$_invoke$arity$3 = G__21128__3;
      G__21128.cljs$core$IFn$_invoke$arity$variadic = G__21128__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__21128;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq21100) {
  var G__21101 = cljs.core.first(seq21100);
  var seq21100__$1 = cljs.core.next(seq21100);
  var G__21102 = cljs.core.first(seq21100__$1);
  var seq21100__$2 = cljs.core.next(seq21100__$1);
  var G__21103 = cljs.core.first(seq21100__$2);
  var seq21100__$3 = cljs.core.next(seq21100__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__21101, G__21102, G__21103, seq21100__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var args21134 = [];
  var len__15370__auto___21137 = arguments.length;
  var i__15371__auto___21138 = 0;
  while (true) {
    if (i__15371__auto___21138 < len__15370__auto___21137) {
      args21134.push(arguments[i__15371__auto___21138]);
      var G__21139 = i__15371__auto___21138 + 1;
      i__15371__auto___21138 = G__21139;
      continue;
    } else {
    }
    break;
  }
  var G__21136 = args21134.length;
  switch(G__21136) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21134.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__21141 = cljs.core.next(coll);
      coll = G__21141;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__21142 = n - 1;
      var G__21143 = cljs.core.next(coll);
      n = G__21142;
      coll = G__21143;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var args21144 = [];
  var len__15370__auto___21147 = arguments.length;
  var i__15371__auto___21148 = 0;
  while (true) {
    if (i__15371__auto___21148 < len__15370__auto___21147) {
      args21144.push(arguments[i__15371__auto___21148]);
      var G__21149 = i__15371__auto___21148 + 1;
      i__15371__auto___21148 = G__21149;
      continue;
    } else {
    }
    break;
  }
  var G__21146 = args21144.length;
  switch(G__21146) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21144.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__21152 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21152, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21152, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__14331__auto__ = flags;
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_21160 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__14331__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__14331__auto__)) {
              return or__14331__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__21161_21167 = cljs.core.first(coll);
          var G__21162_21168 = writer;
          var G__21163_21169 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21161_21167, G__21162_21168, G__21163_21169) : print_one.call(null, G__21161_21167, G__21162_21168, G__21163_21169);
        } else {
        }
        var coll_21170__$1 = cljs.core.next(coll);
        var n_21171 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_21170__$1 && (n_21171 == null || !(n_21171 === 0))) {
            cljs.core._write(writer, sep);
            var G__21164_21172 = cljs.core.first(coll_21170__$1);
            var G__21165_21173 = writer;
            var G__21166_21174 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21164_21172, G__21165_21173, G__21166_21174) : print_one.call(null, G__21164_21172, G__21165_21173, G__21166_21174);
            var G__21175 = cljs.core.next(coll_21170__$1);
            var G__21176 = n_21171 - 1;
            coll_21170__$1 = G__21175;
            n_21171 = G__21176;
            continue;
          } else {
            if (cljs.core.seq(coll_21170__$1) && n_21171 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__14331__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__14331__auto__)) {
                  return or__14331__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_21160;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var args__15377__auto__ = [];
  var len__15370__auto___21183 = arguments.length;
  var i__15371__auto___21184 = 0;
  while (true) {
    if (i__15371__auto___21184 < len__15370__auto___21183) {
      args__15377__auto__.push(arguments[i__15371__auto___21184]);
      var G__21185 = i__15371__auto___21184 + 1;
      i__15371__auto___21184 = G__21185;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__21179 = cljs.core.seq(ss);
  var chunk__21180 = null;
  var count__21181 = 0;
  var i__21182 = 0;
  while (true) {
    if (i__21182 < count__21181) {
      var s = chunk__21180.cljs$core$IIndexed$_nth$arity$2(null, i__21182);
      cljs.core._write(writer, s);
      var G__21186 = seq__21179;
      var G__21187 = chunk__21180;
      var G__21188 = count__21181;
      var G__21189 = i__21182 + 1;
      seq__21179 = G__21186;
      chunk__21180 = G__21187;
      count__21181 = G__21188;
      i__21182 = G__21189;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__21179);
      if (temp__4425__auto__) {
        var seq__21179__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21179__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__21179__$1);
          var G__21190 = cljs.core.chunk_rest(seq__21179__$1);
          var G__21191 = c__15115__auto__;
          var G__21192 = cljs.core.count(c__15115__auto__);
          var G__21193 = 0;
          seq__21179 = G__21190;
          chunk__21180 = G__21191;
          count__21181 = G__21192;
          i__21182 = G__21193;
          continue;
        } else {
          var s = cljs.core.first(seq__21179__$1);
          cljs.core._write(writer, s);
          var G__21194 = cljs.core.next(seq__21179__$1);
          var G__21195 = null;
          var G__21196 = 0;
          var G__21197 = 0;
          seq__21179 = G__21194;
          chunk__21180 = G__21195;
          count__21181 = G__21196;
          i__21182 = G__21197;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq21177) {
  var G__21178 = cljs.core.first(seq21177);
  var seq21177__$1 = cljs.core.next(seq21177);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__21178, seq21177__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj21199 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj21199;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__14319__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__14319__auto__) {
    var and__14319__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__14319__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__14319__auto____$1;
    }
  } else {
    return and__14319__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__21215_21224 = cljs.core.meta(obj);
      var G__21216_21225 = writer;
      var G__21217_21226 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__21215_21224, G__21216_21225, G__21217_21226) : cljs.core.pr_writer.call(null, G__21215_21224, G__21216_21225, G__21217_21226);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__21219 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__21220 = cljs.core.pr_writer;
            var G__21221 = writer;
            var G__21222 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__21219, G__21220, G__21221, G__21222) : cljs.core.print_map.call(null, G__21219, G__21220, G__21221, G__21222);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__14331__auto__ = name == null;
                    if (or__14331__auto__) {
                      return or__14331__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__21227 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                          ns = G__21227;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
                        return cljs.core._pr_writer(obj, writer, opts);
                      } else {
                        if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                        } else {
                          var name = obj.constructor.name;
                          var name__$1 = cljs.core.truth_(function() {
                            var or__14331__auto__ = name == null;
                            if (or__14331__auto__) {
                              return or__14331__auto__;
                            } else {
                              return goog.string.isEmpty(name);
                            }
                          }()) ? "Object" : name;
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str(obj)].join(""), "]"], 0));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var alt_impl = temp__4423__auto__;
    var G__21231 = obj;
    var G__21232 = writer;
    var G__21233 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__21231, G__21232, G__21233) : alt_impl.call(null, G__21231, G__21232, G__21233);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__21238 = cljs.core.seq(cljs.core.next(objs));
  var chunk__21239 = null;
  var count__21240 = 0;
  var i__21241 = 0;
  while (true) {
    if (i__21241 < count__21240) {
      var obj = chunk__21239.cljs$core$IIndexed$_nth$arity$2(null, i__21241);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__21242 = seq__21238;
      var G__21243 = chunk__21239;
      var G__21244 = count__21240;
      var G__21245 = i__21241 + 1;
      seq__21238 = G__21242;
      chunk__21239 = G__21243;
      count__21240 = G__21244;
      i__21241 = G__21245;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__21238);
      if (temp__4425__auto__) {
        var seq__21238__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__21238__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first(seq__21238__$1);
          var G__21246 = cljs.core.chunk_rest(seq__21238__$1);
          var G__21247 = c__15115__auto__;
          var G__21248 = cljs.core.count(c__15115__auto__);
          var G__21249 = 0;
          seq__21238 = G__21246;
          chunk__21239 = G__21247;
          count__21240 = G__21248;
          i__21241 = G__21249;
          continue;
        } else {
          var obj = cljs.core.first(seq__21238__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__21250 = cljs.core.next(seq__21238__$1);
          var G__21251 = null;
          var G__21252 = 0;
          var G__21253 = 0;
          seq__21238 = G__21250;
          chunk__21239 = G__21251;
          count__21240 = G__21252;
          i__21241 = G__21253;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline() {
  var args21254 = [];
  var len__15370__auto___21257 = arguments.length;
  var i__15371__auto___21258 = 0;
  while (true) {
    if (i__15371__auto___21258 < len__15370__auto___21257) {
      args21254.push(arguments[i__15371__auto___21258]);
      var G__21259 = i__15371__auto___21258 + 1;
      i__15371__auto___21258 = G__21259;
      continue;
    } else {
    }
    break;
  }
  var G__21256 = args21254.length;
  switch(G__21256) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21254.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str() {
  var args__15377__auto__ = [];
  var len__15370__auto___21262 = arguments.length;
  var i__15371__auto___21263 = 0;
  while (true) {
    if (i__15371__auto___21263 < len__15370__auto___21262) {
      args__15377__auto__.push(arguments[i__15371__auto___21263]);
      var G__21264 = i__15371__auto___21263 + 1;
      i__15371__auto___21263 = G__21264;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq21261) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21261));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var args__15377__auto__ = [];
  var len__15370__auto___21266 = arguments.length;
  var i__15371__auto___21267 = 0;
  while (true) {
    if (i__15371__auto___21267 < len__15370__auto___21266) {
      args__15377__auto__.push(arguments[i__15371__auto___21267]);
      var G__21268 = i__15371__auto___21267 + 1;
      i__15371__auto___21267 = G__21268;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq21265) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21265));
};
cljs.core.pr = function cljs$core$pr() {
  var args__15377__auto__ = [];
  var len__15370__auto___21270 = arguments.length;
  var i__15371__auto___21271 = 0;
  while (true) {
    if (i__15371__auto___21271 < len__15370__auto___21270) {
      args__15377__auto__.push(arguments[i__15371__auto___21271]);
      var G__21272 = i__15371__auto___21271 + 1;
      i__15371__auto___21271 = G__21272;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq21269) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21269));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__21273__i = 0, G__21273__a = new Array(arguments.length - 0);
      while (G__21273__i < G__21273__a.length) {
        G__21273__a[G__21273__i] = arguments[G__21273__i + 0];
        ++G__21273__i;
      }
      objs = new cljs.core.IndexedSeq(G__21273__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__21274) {
    var objs = cljs.core.seq(arglist__21274);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var args__15377__auto__ = [];
  var len__15370__auto___21276 = arguments.length;
  var i__15371__auto___21277 = 0;
  while (true) {
    if (i__15371__auto___21277 < len__15370__auto___21276) {
      args__15377__auto__.push(arguments[i__15371__auto___21277]);
      var G__21278 = i__15371__auto___21277 + 1;
      i__15371__auto___21277 = G__21278;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq21275) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21275));
};
cljs.core.println = function cljs$core$println() {
  var args__15377__auto__ = [];
  var len__15370__auto___21280 = arguments.length;
  var i__15371__auto___21281 = 0;
  while (true) {
    if (i__15371__auto___21281 < len__15370__auto___21280) {
      args__15377__auto__.push(arguments[i__15371__auto___21281]);
      var G__21282 = i__15371__auto___21281 + 1;
      i__15371__auto___21281 = G__21282;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq21279) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21279));
};
cljs.core.println_str = function cljs$core$println_str() {
  var args__15377__auto__ = [];
  var len__15370__auto___21284 = arguments.length;
  var i__15371__auto___21285 = 0;
  while (true) {
    if (i__15371__auto___21285 < len__15370__auto___21284) {
      args__15377__auto__.push(arguments[i__15371__auto___21285]);
      var G__21286 = i__15371__auto___21285 + 1;
      i__15371__auto___21285 = G__21286;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq21283) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21283));
};
cljs.core.prn = function cljs$core$prn() {
  var args__15377__auto__ = [];
  var len__15370__auto___21288 = arguments.length;
  var i__15371__auto___21289 = 0;
  while (true) {
    if (i__15371__auto___21289 < len__15370__auto___21288) {
      args__15377__auto__.push(arguments[i__15371__auto___21289]);
      var G__21290 = i__15371__auto___21289 + 1;
      i__15371__auto___21289 = G__21290;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq21287) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21287));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__21297_21303 = cljs.core.key(e);
    var G__21298_21304 = w;
    var G__21299_21305 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21297_21303, G__21298_21304, G__21299_21305) : print_one.call(null, G__21297_21303, G__21298_21304, G__21299_21305);
    cljs.core._write(w, " ");
    var G__21300 = cljs.core.val(e);
    var G__21301 = w;
    var G__21302 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__21300, G__21301, G__21302) : print_one.call(null, G__21300, G__21301, G__21302);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var args__15377__auto__ = [];
  var len__15370__auto___21309 = arguments.length;
  var i__15371__auto___21310 = 0;
  while (true) {
    if (i__15371__auto___21310 < len__15370__auto___21309) {
      args__15377__auto__.push(arguments[i__15371__auto___21310]);
      var G__21311 = i__15371__auto___21310 + 1;
      i__15371__auto___21310 = G__21311;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 2 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15378__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq21306) {
  var G__21307 = cljs.core.first(seq21306);
  var seq21306__$1 = cljs.core.next(seq21306);
  var G__21308 = cljs.core.first(seq21306__$1);
  var seq21306__$2 = cljs.core.next(seq21306__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__21307, G__21308, seq21306__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var args21312 = [];
  var len__15370__auto___21315 = arguments.length;
  var i__15371__auto___21316 = 0;
  while (true) {
    if (i__15371__auto___21316 < len__15370__auto___21315) {
      args21312.push(arguments[i__15371__auto___21316]);
      var G__21317 = i__15371__auto___21316 + 1;
      i__15371__auto___21316 = G__21317;
      continue;
    } else {
    }
    break;
  }
  var G__21314 = args21312.length;
  switch(G__21314) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21312.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__21319_SHARP_, p2__21320_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__21319_SHARP_, p2__21320_SHARP_) : rf.call(null, p1__21319_SHARP_, p2__21320_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__21321 = null;
      var G__21321__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__21321__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__21321__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__21321 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__21321__0.call(this);
          case 1:
            return G__21321__1.call(this, result);
          case 2:
            return G__21321__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__21321.cljs$core$IFn$_invoke$arity$0 = G__21321__0;
      G__21321.cljs$core$IFn$_invoke$arity$1 = G__21321__1;
      G__21321.cljs$core$IFn$_invoke$arity$2 = G__21321__2;
      return G__21321;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var args21322 = [];
  var len__15370__auto___21325 = arguments.length;
  var i__15371__auto___21326 = 0;
  while (true) {
    if (i__15371__auto___21326 < len__15370__auto___21325) {
      args21322.push(arguments[i__15371__auto___21326]);
      var G__21327 = i__15371__auto___21326 + 1;
      i__15371__auto___21326 = G__21327;
      continue;
    } else {
    }
    break;
  }
  var G__21324 = args21322.length;
  switch(G__21324) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21322.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__21329 = null;
        var G__21329__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__21329__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__21329__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__21329 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__21329__0.call(this);
            case 1:
              return G__21329__1.call(this, result);
            case 2:
              return G__21329__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__21329.cljs$core$IFn$_invoke$arity$0 = G__21329__0;
        G__21329.cljs$core$IFn$_invoke$arity$1 = G__21329__1;
        G__21329.cljs$core$IFn$_invoke$arity$2 = G__21329__2;
        return G__21329;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var args21330 = [];
  var len__15370__auto___21333 = arguments.length;
  var i__15371__auto___21334 = 0;
  while (true) {
    if (i__15371__auto___21334 < len__15370__auto___21333) {
      args21330.push(arguments[i__15371__auto___21334]);
      var G__21335 = i__15371__auto___21334 + 1;
      i__15371__auto___21334 = G__21335;
      continue;
    } else {
    }
    break;
  }
  var G__21332 = args21330.length;
  switch(G__21332) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21330.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__15306__auto__ = this;
  return cljs.core.es6_iterator(this__15306__auto__);
};
cljs.core.eduction = function cljs$core$eduction() {
  var args__15377__auto__ = [];
  var len__15370__auto___21338 = arguments.length;
  var i__15371__auto___21339 = 0;
  while (true) {
    if (i__15371__auto___21339 < len__15370__auto___21338) {
      args__15377__auto__.push(arguments[i__15371__auto___21339]);
      var G__21340 = i__15371__auto___21339 + 1;
      i__15371__auto___21339 = G__21340;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq21337) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21337));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21342_SHARP_, p2__21341_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__21341_SHARP_) : proc.call(null, p2__21341_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = {};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__14967__auto__ = x == null ? null : x;
    var m__14968__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto__.call(null, x);
    } else {
      var m__14968__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__14967__auto__ = x == null ? null : x;
    var m__14968__auto__ = cljs.core._key__GT_js[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto__.call(null, x);
    } else {
      var m__14968__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__14968__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__21363_21373 = cljs.core.seq(x);
            var chunk__21364_21374 = null;
            var count__21365_21375 = 0;
            var i__21366_21376 = 0;
            while (true) {
              if (i__21366_21376 < count__21365_21375) {
                var vec__21367_21377 = chunk__21364_21374.cljs$core$IIndexed$_nth$arity$2(null, i__21366_21376);
                var k_21378 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21367_21377, 0, null);
                var v_21379 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21367_21377, 1, null);
                m[cljs.core.key__GT_js(k_21378)] = cljs$core$clj__GT_js(v_21379);
                var G__21380 = seq__21363_21373;
                var G__21381 = chunk__21364_21374;
                var G__21382 = count__21365_21375;
                var G__21383 = i__21366_21376 + 1;
                seq__21363_21373 = G__21380;
                chunk__21364_21374 = G__21381;
                count__21365_21375 = G__21382;
                i__21366_21376 = G__21383;
                continue;
              } else {
                var temp__4425__auto___21384 = cljs.core.seq(seq__21363_21373);
                if (temp__4425__auto___21384) {
                  var seq__21363_21385__$1 = temp__4425__auto___21384;
                  if (cljs.core.chunked_seq_QMARK_(seq__21363_21385__$1)) {
                    var c__15115__auto___21386 = cljs.core.chunk_first(seq__21363_21385__$1);
                    var G__21387 = cljs.core.chunk_rest(seq__21363_21385__$1);
                    var G__21388 = c__15115__auto___21386;
                    var G__21389 = cljs.core.count(c__15115__auto___21386);
                    var G__21390 = 0;
                    seq__21363_21373 = G__21387;
                    chunk__21364_21374 = G__21388;
                    count__21365_21375 = G__21389;
                    i__21366_21376 = G__21390;
                    continue;
                  } else {
                    var vec__21368_21391 = cljs.core.first(seq__21363_21385__$1);
                    var k_21392 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21368_21391, 0, null);
                    var v_21393 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21368_21391, 1, null);
                    m[cljs.core.key__GT_js(k_21392)] = cljs$core$clj__GT_js(v_21393);
                    var G__21394 = cljs.core.next(seq__21363_21385__$1);
                    var G__21395 = null;
                    var G__21396 = 0;
                    var G__21397 = 0;
                    seq__21363_21373 = G__21394;
                    chunk__21364_21374 = G__21395;
                    count__21365_21375 = G__21396;
                    i__21366_21376 = G__21397;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__21369_21398 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__21370_21399 = null;
              var count__21371_21400 = 0;
              var i__21372_21401 = 0;
              while (true) {
                if (i__21372_21401 < count__21371_21400) {
                  var x_21402__$1 = chunk__21370_21399.cljs$core$IIndexed$_nth$arity$2(null, i__21372_21401);
                  arr.push(x_21402__$1);
                  var G__21403 = seq__21369_21398;
                  var G__21404 = chunk__21370_21399;
                  var G__21405 = count__21371_21400;
                  var G__21406 = i__21372_21401 + 1;
                  seq__21369_21398 = G__21403;
                  chunk__21370_21399 = G__21404;
                  count__21371_21400 = G__21405;
                  i__21372_21401 = G__21406;
                  continue;
                } else {
                  var temp__4425__auto___21407 = cljs.core.seq(seq__21369_21398);
                  if (temp__4425__auto___21407) {
                    var seq__21369_21408__$1 = temp__4425__auto___21407;
                    if (cljs.core.chunked_seq_QMARK_(seq__21369_21408__$1)) {
                      var c__15115__auto___21409 = cljs.core.chunk_first(seq__21369_21408__$1);
                      var G__21410 = cljs.core.chunk_rest(seq__21369_21408__$1);
                      var G__21411 = c__15115__auto___21409;
                      var G__21412 = cljs.core.count(c__15115__auto___21409);
                      var G__21413 = 0;
                      seq__21369_21398 = G__21410;
                      chunk__21370_21399 = G__21411;
                      count__21371_21400 = G__21412;
                      i__21372_21401 = G__21413;
                      continue;
                    } else {
                      var x_21414__$1 = cljs.core.first(seq__21369_21408__$1);
                      arr.push(x_21414__$1);
                      var G__21415 = cljs.core.next(seq__21369_21408__$1);
                      var G__21416 = null;
                      var G__21417 = 0;
                      var G__21418 = 0;
                      seq__21369_21398 = G__21415;
                      chunk__21370_21399 = G__21416;
                      count__21371_21400 = G__21417;
                      i__21372_21401 = G__21418;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = {};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__14967__auto__ = x == null ? null : x;
    var m__14968__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__14968__auto__.call(null, x, options);
    } else {
      var m__14968__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__14968__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var args21421 = [];
  var len__15370__auto___21446 = arguments.length;
  var i__15371__auto___21447 = 0;
  while (true) {
    if (i__15371__auto___21447 < len__15370__auto___21446) {
      args21421.push(arguments[i__15371__auto___21447]);
      var G__21448 = i__15371__auto___21447 + 1;
      i__15371__auto___21447 = G__21448;
      continue;
    } else {
    }
    break;
  }
  var G__21425 = args21421.length;
  switch(G__21425) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args21421.slice(1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15389__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__21426 = opts;
  var map__21426__$1 = (!(map__21426 == null) ? map__21426.cljs$lang$protocol_mask$partition0$ & 64 || map__21426.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__21426) : map__21426;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21426__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__21426, map__21426__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__15084__auto__ = function(map__21426, map__21426__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__21440(s__21441) {
                      return new cljs.core.LazySeq(null, function(map__21426, map__21426__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__21441__$1 = s__21441;
                          while (true) {
                            var temp__4425__auto__ = cljs.core.seq(s__21441__$1);
                            if (temp__4425__auto__) {
                              var s__21441__$2 = temp__4425__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__21441__$2)) {
                                var c__15082__auto__ = cljs.core.chunk_first(s__21441__$2);
                                var size__15083__auto__ = cljs.core.count(c__15082__auto__);
                                var b__21443 = cljs.core.chunk_buffer(size__15083__auto__);
                                if (function() {
                                  var i__21442 = 0;
                                  while (true) {
                                    if (i__21442 < size__15083__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__15082__auto__, i__21442);
                                      cljs.core.chunk_append(b__21443, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__21450 = i__21442 + 1;
                                      i__21442 = G__21450;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__21443), cljs$core$thisfn_$_iter__21440(cljs.core.chunk_rest(s__21441__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__21443), null);
                                }
                              } else {
                                var k = cljs.core.first(s__21441__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__21440(cljs.core.rest(s__21441__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__21426, map__21426__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__21426, map__21426__$1, keywordize_keys, keyfn);
                  return iter__15084__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__21426, map__21426__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq21422) {
  var G__21423 = cljs.core.first(seq21422);
  var seq21422__$1 = cljs.core.next(seq21422);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__21423, seq21422__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__21452 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21452) : cljs.core.atom.call(null, G__21452);
  }();
  return function(mem) {
    return function() {
      var G__21453__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__21453 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__21454__i = 0, G__21454__a = new Array(arguments.length - 0);
          while (G__21454__i < G__21454__a.length) {
            G__21454__a[G__21454__i] = arguments[G__21454__i + 0];
            ++G__21454__i;
          }
          args = new cljs.core.IndexedSeq(G__21454__a, 0);
        }
        return G__21453__delegate.call(this, args);
      };
      G__21453.cljs$lang$maxFixedArity = 0;
      G__21453.cljs$lang$applyTo = function(arglist__21455) {
        var args = cljs.core.seq(arglist__21455);
        return G__21453__delegate(args);
      };
      G__21453.cljs$core$IFn$_invoke$arity$variadic = G__21453__delegate;
      return G__21453;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var args21456 = [];
  var len__15370__auto___21461 = arguments.length;
  var i__15371__auto___21462 = 0;
  while (true) {
    if (i__15371__auto___21462 < len__15370__auto___21461) {
      args21456.push(arguments[i__15371__auto___21462]);
      var G__21463 = i__15371__auto___21462 + 1;
      i__15371__auto___21462 = G__21463;
      continue;
    } else {
    }
    break;
  }
  var G__21460 = args21456.length;
  switch(G__21460) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args21456.slice(1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15389__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__21465 = ret;
      f = G__21465;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq21457) {
  var G__21458 = cljs.core.first(seq21457);
  var seq21457__$1 = cljs.core.next(seq21457);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__21458, seq21457__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var args21466 = [];
  var len__15370__auto___21469 = arguments.length;
  var i__15371__auto___21470 = 0;
  while (true) {
    if (i__15371__auto___21470 < len__15370__auto___21469) {
      args21466.push(arguments[i__15371__auto___21470]);
      var G__21471 = i__15371__auto___21470 + 1;
      i__15371__auto___21470 = G__21471;
      continue;
    } else {
    }
    break;
  }
  var G__21468 = args21466.length;
  switch(G__21468) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21466.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__21474 = Math.random() * n;
  return Math.floor(G__21474);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__21476 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21476) : cljs.core.atom.call(null, G__21476);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var args__15377__auto__ = [];
  var len__15370__auto___21479 = arguments.length;
  var i__15371__auto___21480 = 0;
  while (true) {
    if (i__15371__auto___21480 < len__15370__auto___21479) {
      args__15377__auto__.push(arguments[i__15371__auto___21480]);
      var G__21481 = i__15371__auto___21480 + 1;
      i__15371__auto___21480 = G__21481;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq21477) {
  var G__21478 = cljs.core.first(seq21477);
  var seq21477__$1 = cljs.core.next(seq21477);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__21478, seq21477__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var args21482 = [];
  var len__15370__auto___21486 = arguments.length;
  var i__15371__auto___21487 = 0;
  while (true) {
    if (i__15371__auto___21487 < len__15370__auto___21486) {
      args21482.push(arguments[i__15371__auto___21487]);
      var G__21488 = i__15371__auto___21487 + 1;
      i__15371__auto___21487 = G__21488;
      continue;
    } else {
    }
    break;
  }
  var G__21484 = args21482.length;
  switch(G__21484) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21482.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__21485 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21485) : cljs.core.deref.call(null, G__21485);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__14331__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__14331__auto__) {
    return or__14331__auto__;
  } else {
    var or__14331__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__14331__auto____$1) {
      return or__14331__auto____$1;
    } else {
      var and__14319__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__14319__auto__) {
        var and__14319__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__14319__auto____$1) {
          var and__14319__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__14319__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__21490 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__21491 = i + 1;
                ret = G__21490;
                i = G__21491;
                continue;
              }
              break;
            }
          } else {
            return and__14319__auto____$2;
          }
        } else {
          return and__14319__auto____$1;
        }
      } else {
        return and__14319__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var args21492 = [];
  var len__15370__auto___21496 = arguments.length;
  var i__15371__auto___21497 = 0;
  while (true) {
    if (i__15371__auto___21497 < len__15370__auto___21496) {
      args21492.push(arguments[i__15371__auto___21497]);
      var G__21498 = i__15371__auto___21497 + 1;
      i__15371__auto___21497 = G__21498;
      continue;
    } else {
    }
    break;
  }
  var G__21494 = args21492.length;
  switch(G__21494) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21492.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__21495 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21495) : cljs.core.deref.call(null, G__21495);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var args21500 = [];
  var len__15370__auto___21504 = arguments.length;
  var i__15371__auto___21505 = 0;
  while (true) {
    if (i__15371__auto___21505 < len__15370__auto___21504) {
      args21500.push(arguments[i__15371__auto___21505]);
      var G__21506 = i__15371__auto___21505 + 1;
      i__15371__auto___21505 = G__21506;
      continue;
    } else {
    }
    break;
  }
  var G__21502 = args21500.length;
  switch(G__21502) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21500.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__21503 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21503) : cljs.core.deref.call(null, G__21503);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var args21508 = [];
  var len__15370__auto___21512 = arguments.length;
  var i__15371__auto___21513 = 0;
  while (true) {
    if (i__15371__auto___21513 < len__15370__auto___21512) {
      args21508.push(arguments[i__15371__auto___21513]);
      var G__21514 = i__15371__auto___21513 + 1;
      i__15371__auto___21513 = G__21514;
      continue;
    } else {
    }
    break;
  }
  var G__21510 = args21508.length;
  switch(G__21510) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21508.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__21511 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__21511) : cljs.core.deref.call(null, G__21511);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var args21516 = [];
  var len__15370__auto___21519 = arguments.length;
  var i__15371__auto___21520 = 0;
  while (true) {
    if (i__15371__auto___21520 < len__15370__auto___21519) {
      args21516.push(arguments[i__15371__auto___21520]);
      var G__21521 = i__15371__auto___21520 + 1;
      i__15371__auto___21520 = G__21521;
      continue;
    } else {
    }
    break;
  }
  var G__21518 = args21516.length;
  switch(G__21518) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21516.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__14331__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__14331__auto__)) {
    return or__14331__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var args21526 = [];
  var len__15370__auto___21529 = arguments.length;
  var i__15371__auto___21530 = 0;
  while (true) {
    if (i__15371__auto___21530 < len__15370__auto___21529) {
      args21526.push(arguments[i__15371__auto___21530]);
      var G__21531 = i__15371__auto___21530 + 1;
      i__15371__auto___21530 = G__21531;
      continue;
    } else {
    }
    break;
  }
  var G__21528 = args21526.length;
  switch(G__21528) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21526.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__21523_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__21523_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__21523_SHARP_), cljs.core.second(p1__21523_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__21524_SHARP_, p2__21525_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__21524_SHARP_, p2__21525_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__14331__auto__ = cljs.core.truth_(function() {
    var and__14319__auto__ = xprefs;
    if (cljs.core.truth_(and__14319__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__14319__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__14331__auto__)) {
    return or__14331__auto__;
  } else {
    var or__14331__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__21545 = cljs.core.rest(ps);
          ps = G__21545;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__14331__auto____$1)) {
      return or__14331__auto____$1;
    } else {
      var or__14331__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__21546 = cljs.core.rest(ps);
            ps = G__21546;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__14331__auto____$2)) {
        return or__14331__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__14331__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__14331__auto__)) {
    return or__14331__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__21549) {
    var vec__21550 = p__21549;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21550, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21550, 1, null);
    var e = vec__21550;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__14331__auto__ = be == null;
        if (or__14331__auto__) {
          return or__14331__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = {};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._reset[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto__.call(null, mf);
    } else {
      var m__14968__auto____$1 = cljs.core._reset["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._add_method[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__14968__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__14968__auto____$1 = cljs.core._add_method["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__14968__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._remove_method[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__14968__auto__.call(null, mf, dispatch_val);
    } else {
      var m__14968__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__14968__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._prefer_method[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__14968__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__14968__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__14968__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._get_method[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__14968__auto__.call(null, mf, dispatch_val);
    } else {
      var m__14968__auto____$1 = cljs.core._get_method["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__14968__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._methods[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto__.call(null, mf);
    } else {
      var m__14968__auto____$1 = cljs.core._methods["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._prefers[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto__.call(null, mf);
    } else {
      var m__14968__auto____$1 = cljs.core._prefers["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto__.call(null, mf);
    } else {
      var m__14968__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__14967__auto__ = mf == null ? null : mf;
    var m__14968__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto__.call(null, mf);
    } else {
      var m__14968__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__14968__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__14968__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__21554 = null;
  var G__21554__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__21554__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__21554__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__21554__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__21554__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__21554__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__21554__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__21554__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__21554__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__21554__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__21554__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__21554__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__21554__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__21554__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__21554__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__21554__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__21554__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__21554__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__21554__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__21554__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__21554__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__21554__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__21554 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__21554__1.call(this, self__);
      case 2:
        return G__21554__2.call(this, self__, a);
      case 3:
        return G__21554__3.call(this, self__, a, b);
      case 4:
        return G__21554__4.call(this, self__, a, b, c);
      case 5:
        return G__21554__5.call(this, self__, a, b, c, d);
      case 6:
        return G__21554__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__21554__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__21554__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__21554__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__21554__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__21554__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__21554__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__21554__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__21554__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__21554__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__21554__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__21554__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__21554__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__21554__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__21554__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__21554__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__21554__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__21554.cljs$core$IFn$_invoke$arity$1 = G__21554__1;
  G__21554.cljs$core$IFn$_invoke$arity$2 = G__21554__2;
  G__21554.cljs$core$IFn$_invoke$arity$3 = G__21554__3;
  G__21554.cljs$core$IFn$_invoke$arity$4 = G__21554__4;
  G__21554.cljs$core$IFn$_invoke$arity$5 = G__21554__5;
  G__21554.cljs$core$IFn$_invoke$arity$6 = G__21554__6;
  G__21554.cljs$core$IFn$_invoke$arity$7 = G__21554__7;
  G__21554.cljs$core$IFn$_invoke$arity$8 = G__21554__8;
  G__21554.cljs$core$IFn$_invoke$arity$9 = G__21554__9;
  G__21554.cljs$core$IFn$_invoke$arity$10 = G__21554__10;
  G__21554.cljs$core$IFn$_invoke$arity$11 = G__21554__11;
  G__21554.cljs$core$IFn$_invoke$arity$12 = G__21554__12;
  G__21554.cljs$core$IFn$_invoke$arity$13 = G__21554__13;
  G__21554.cljs$core$IFn$_invoke$arity$14 = G__21554__14;
  G__21554.cljs$core$IFn$_invoke$arity$15 = G__21554__15;
  G__21554.cljs$core$IFn$_invoke$arity$16 = G__21554__16;
  G__21554.cljs$core$IFn$_invoke$arity$17 = G__21554__17;
  G__21554.cljs$core$IFn$_invoke$arity$18 = G__21554__18;
  G__21554.cljs$core$IFn$_invoke$arity$19 = G__21554__19;
  G__21554.cljs$core$IFn$_invoke$arity$20 = G__21554__20;
  G__21554.cljs$core$IFn$_invoke$arity$21 = G__21554__21;
  G__21554.cljs$core$IFn$_invoke$arity$22 = G__21554__22;
  return G__21554;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args21553) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args21553)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4423__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var target_fn = temp__4423__auto__;
    return target_fn;
  } else {
    var temp__4423__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var target_fn = temp__4423__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = goog.string.hashCode(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__21555 = self__.uuid;
  var G__21556 = other.uuid;
  return goog.array.defaultCompare(G__21555, G__21556);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(15).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(14)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var args21557 = [];
  var len__15370__auto___21560 = arguments.length;
  var i__15371__auto___21561 = 0;
  while (true) {
    if (i__15371__auto___21561 < len__15370__auto___21560) {
      args21557.push(arguments[i__15371__auto___21561]);
      var G__21562 = i__15371__auto___21561 + 1;
      i__15371__auto___21561 = G__21562;
      continue;
    } else {
    }
    break;
  }
  var G__21559 = args21557.length;
  switch(G__21559) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21557.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__21564 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__21564) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__21566_SHARP_, p2__21567_SHARP_) {
      goog.object.set(p1__21566_SHARP_, p2__21567_SHARP_, true);
      return p1__21566_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return goog.object.containsKey(cljs.core.js_reserved, x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__21570 = cljs.core.next(ks__$1);
          var G__21571 = [cljs.core.str(function() {
            var G__21569 = ret;
            var G__21569__$1 = !(ret === "") ? [cljs.core.str(G__21569), cljs.core.str("|")].join("") : G__21569;
            return G__21569__$1;
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__21570;
          ret = G__21571;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_21572 = 0;
  while (true) {
    if (i_21572 < name.length) {
      var c_21573 = name.charAt(i_21572);
      var sub_21574 = goog.object.get(cljs.core.CHAR_MAP, c_21573);
      if (!(sub_21574 == null)) {
        sb.append(sub_21574);
      } else {
        sb.append(c_21573);
      }
      var G__21575 = i_21572 + 1;
      i_21572 = G__21575;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4423__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var match = temp__4423__auto__;
      var vec__21577 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21577, 0, null);
      var G__21578 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__21579 = r.lastIndex;
      ret = G__21578;
      last_match_end = G__21579;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write(writer__14911__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__21584 = function() {
          var G__21582 = ctxt;
          var G__21583 = cljs.core.first(xs);
          return goog.object.get(G__21582, G__21583);
        }();
        var G__21585 = cljs.core.next(xs);
        ctxt = G__21584;
        xs = G__21585;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__21587 = cljs.core._STAR_target_STAR_;
  switch(G__21587) {
    case "nodejs":
      if (COMPILED) {
        return eval(munged_ns);
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(window, segs);
      break;
    default:
      throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns() {
  var args21589 = [];
  var len__15370__auto___21592 = arguments.length;
  var i__15371__auto___21593 = 0;
  while (true) {
    if (i__15371__auto___21593 < len__15370__auto___21592) {
      args21589.push(arguments[i__15371__auto___21593]);
      var G__21594 = i__15371__auto___21593 + 1;
      i__15371__auto___21593 = G__21594;
      continue;
    } else {
    }
    break;
  }
  var G__21591 = args21589.length;
  switch(G__21591) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args21589.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__21597 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21597) : cljs.core.atom.call(null, G__21597);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__21599 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__21599) : cljs.core.atom.call(null, G__21599);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "'");
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = goog.defineClass(null, {constructor:function(create, reset, limit) {
  this.limit_ = limit;
  this.create_ = create;
  this.reset_ = reset;
  this.occupants_ = 0;
  this.head_ = null;
}, get:function() {
  var item;
  if (this.occupants_ > 0) {
    this.occupants_--;
    item = this.head_;
    this.head_ = item.next;
    item.next = null;
  } else {
    item = this.create_();
  }
  return item;
}, put:function(item) {
  this.reset_(item);
  if (this.occupants_ < this.limit_) {
    this.occupants_++;
    item.next = this.head_;
    this.head_ = item;
  }
}, occupants:function() {
  return this.occupants_;
}});
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    return opt_value;
  }
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_;entry;entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  }
  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else {
    if (goog.Thenable.isImplementedBy(value)) {
      value = (value);
      value.then(onFulfilled, onRejected, context);
      return true;
    } else {
      if (goog.isObject(value)) {
        try {
          var then = value["then"];
          if (goog.isFunction(then)) {
            goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
            return true;
          }
        } catch (e) {
          onRejected.call(context, e);
          return true;
        }
      }
    }
  }
  return false;
};
goog.Promise.tryThen_ = function(thenable, then, onFulfilled, onRejected, context) {
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", 
TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", 
DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      throw Error("addEventListener and attachEvent are unavailable.");
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return (eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return (eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return (new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  if (object == null) {
    sb.push("null");
    return;
  }
  if (typeof object == "object") {
    if (goog.isArray(object)) {
      this.serializeArray(object, sb);
      return;
    } else {
      if (object instanceof String || object instanceof Number || object instanceof Boolean) {
        object = object.valueOf();
      } else {
        this.serializeObject_((object), sb);
        return;
      }
    }
  }
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "function":
      sb.push("null");
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    var rv = goog.json.Serializer.charToJsonCharCache_[c];
    if (!rv) {
      rv = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1);
      goog.json.Serializer.charToJsonCharCache_[c] = rv;
    }
    return rv;
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, PRECONDITION_REQUIRED:428, TOO_MANY_REQUESTS:429, REQUEST_HEADER_FIELDS_TOO_LARGE:431, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, NETWORK_AUTHENTICATION_REQUIRED:511, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return (this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return (uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && goog.global.self && goog.global.self.location) {
    var protocol = goog.global.self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  if (!encodedQuery) {
    return;
  }
  var pairs = encodedQuery.split("\x26");
  for (var i = 0;i < pairs.length;i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return (this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addFinally = function(f, opt_scope) {
  var self = this;
  return this.addCallbacks(f, function(err) {
    var result = f.call(self, err);
    if (!goog.isDef(result)) {
      throw err;
    }
    return result;
  }, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res) || typeof goog.global["Promise"] === "function" && res instanceof goog.global["Promise"]) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.async.Delay.base(this, "constructor");
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.base(this, "disposeInternal");
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.startIfNotActive = function(opt_interval) {
  if (!this.isActive()) {
    this.start(opt_interval);
  }
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return {callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[String(this.transportType)] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return {"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetupCb_;
goog.net.xpc.FrameElementMethodTransport.prototype.outgoing_;
goog.net.xpc.FrameElementMethodTransport.prototype.iframeElm_;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.prototype.ackReceiver_;
goog.net.xpc.IframePollingTransport.prototype.ackSender_;
goog.net.xpc.IframePollingTransport.prototype.ackIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.ackWinObj_;
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresentCb_;
goog.net.xpc.IframePollingTransport.prototype.deliveryQueue_;
goog.net.xpc.IframePollingTransport.prototype.msgIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.msgReceiver_;
goog.net.xpc.IframePollingTransport.prototype.msgSender_;
goog.net.xpc.IframePollingTransport.prototype.msgWinObj_;
goog.net.xpc.IframePollingTransport.prototype.rcvdConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetup_;
goog.net.xpc.IframePollingTransport.prototype.parts_;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return !this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return {};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement(goog.dom.TagName.IFRAME);
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  if (!/^https?:\/\//.test(url)) {
    throw Error("URL " + url + " is invalid");
  }
  this.sanitizedSendUri_ = url;
  this.sendFrame_ = (windowObj);
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sanitizedSendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement(goog.dom.TagName.DIV);
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.createIframe(null, null, {"onload":goog.string.Const.from("this.xpcOnload()"), "sandbox":null}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement(goog.dom.TagName.IFRAME);
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.prototype.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, (msgEvt.getBrowserEvent()).origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return !!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement(goog.dom.TagName.IFRAME);
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return (iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    this.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
  }
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed() || this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Channel closed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(opt_origin)) || goog.string.isEmptyOrWhitespace(goog.string.makeSafe(peerHostname)) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.reconnectTimer_ = null;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return !!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.getBufferedAmount = function() {
  return this.webSocket_.bufferedAmount;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
clojure.browser.event.IEventType = {};
clojure.browser.event.event_types = function clojure$browser$event$event_types(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$event$IEventType$event_types$arity$1 == null)) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.event.event_types[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$);
    } else {
      var m__14968__auto____$1 = clojure.browser.event.event_types["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
      }
    }
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__19450) {
      var vec__19451 = p__19450;
      var k = cljs.core.nth.call(null, vec__19451, 0, null);
      var v = cljs.core.nth.call(null, vec__19451, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__19452) {
        var vec__19453 = p__19452;
        var k = cljs.core.nth.call(null, vec__19453, 0, null);
        var v = cljs.core.nth.call(null, vec__19453, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function clojure$browser$event$listen() {
  var args19454 = [];
  var len__15370__auto___19457 = arguments.length;
  var i__15371__auto___19458 = 0;
  while (true) {
    if (i__15371__auto___19458 < len__15370__auto___19457) {
      args19454.push(arguments[i__15371__auto___19458]);
      var G__19459 = i__15371__auto___19458 + 1;
      i__15371__auto___19458 = G__19459;
      continue;
    } else {
    }
    break;
  }
  var G__19456 = args19454.length;
  switch(G__19456) {
    case 3:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19454.length)].join(""));;
  }
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen.call(null, src, type, fn, false);
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen.cljs$lang$maxFixedArity = 4;
clojure.browser.event.listen_once = function clojure$browser$event$listen_once() {
  var args19461 = [];
  var len__15370__auto___19464 = arguments.length;
  var i__15371__auto___19465 = 0;
  while (true) {
    if (i__15371__auto___19465 < len__15370__auto___19464) {
      args19461.push(arguments[i__15371__auto___19465]);
      var G__19466 = i__15371__auto___19465 + 1;
      i__15371__auto___19465 = G__19466;
      continue;
    } else {
    }
    break;
  }
  var G__19463 = args19461.length;
  switch(G__19463) {
    case 3:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19461.length)].join(""));;
  }
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen_once.call(null, src, type, fn, false);
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen_once.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten = function clojure$browser$event$unlisten() {
  var args19468 = [];
  var len__15370__auto___19471 = arguments.length;
  var i__15371__auto___19472 = 0;
  while (true) {
    if (i__15371__auto___19472 < len__15370__auto___19471) {
      args19468.push(arguments[i__15371__auto___19472]);
      var G__19473 = i__15371__auto___19472 + 1;
      i__15371__auto___19472 = G__19473;
      continue;
    } else {
    }
    break;
  }
  var G__19470 = args19468.length;
  switch(G__19470) {
    case 3:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19468.length)].join(""));;
  }
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.unlisten.call(null, src, type, fn, false);
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.unlisten.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten_by_key = function clojure$browser$event$unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function clojure$browser$event$dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function clojure$browser$event$expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function clojure$browser$event$fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function clojure$browser$event$total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function clojure$browser$event$get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function clojure$browser$event$all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function clojure$browser$event$unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function clojure$browser$event$has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function clojure$browser$event$remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.WebSocket");
goog.require("goog.net.EventType");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.XhrIo");
goog.require("clojure.browser.event");
goog.require("goog.net.xpc.CrossPageChannel");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__19541) {
  var vec__19542 = p__19541;
  var k = cljs.core.nth.call(null, vec__19542, 0, null);
  var v = cljs.core.nth.call(null, vec__19542, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = {};
clojure.browser.net.connect = function clojure$browser$net$connect() {
  var args19545 = [];
  var len__15370__auto___19551 = arguments.length;
  var i__15371__auto___19552 = 0;
  while (true) {
    if (i__15371__auto___19552 < len__15370__auto___19551) {
      args19545.push(arguments[i__15371__auto___19552]);
      var G__19553 = i__15371__auto___19552 + 1;
      i__15371__auto___19552 = G__19553;
      continue;
    } else {
    }
    break;
  }
  var G__19547 = args19545.length;
  switch(G__19547) {
    case 1:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19545.length)].join(""));;
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.connect[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2 = function(this$, opt1) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.connect[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt1);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt1);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3 = function(this$, opt1, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.connect[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt1, opt2);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt1, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4 = function(this$, opt1, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.connect[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt1, opt2, opt3);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt1, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$lang$maxFixedArity = 4;
clojure.browser.net.transmit = function clojure$browser$net$transmit() {
  var args19548 = [];
  var len__15370__auto___19555 = arguments.length;
  var i__15371__auto___19556 = 0;
  while (true) {
    if (i__15371__auto___19556 < len__15370__auto___19555) {
      args19548.push(arguments[i__15371__auto___19556]);
      var G__19557 = i__15371__auto___19556 + 1;
      i__15371__auto___19556 = G__19557;
      continue;
    } else {
    }
    break;
  }
  var G__19550 = args19548.length;
  switch(G__19550) {
    case 2:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19548.length)].join(""));;
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2 = function(this$, opt) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.transmit[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3 = function(this$, opt, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.transmit[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt, opt2);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4 = function(this$, opt, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.transmit[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt, opt2, opt3);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5 = function(this$, opt, opt2, opt3, opt4) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$5 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.transmit[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt, opt2, opt3, opt4);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt, opt2, opt3, opt4);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6 = function(this$, opt, opt2, opt3, opt4, opt5) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$6 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.transmit[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, opt, opt2, opt3, opt4, opt5);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$lang$maxFixedArity = 6;
clojure.browser.net.close = function clojure$browser$net$close(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$close$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.close[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.close["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
      }
    }
  }
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__19559) {
      var vec__19560 = p__19559;
      var k = cljs.core.nth.call(null, vec__19560, 0, null);
      var v = cljs.core.nth.call(null, vec__19560, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__19561) {
  var vec__19562 = p__19561;
  var k = cljs.core.nth.call(null, vec__19562, 0, null);
  var v = cljs.core.nth.call(null, vec__19562, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function clojure$browser$net$xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = {};
clojure.browser.net.register_service = function clojure$browser$net$register_service() {
  var args19565 = [];
  var len__15370__auto___19568 = arguments.length;
  var i__15371__auto___19569 = 0;
  while (true) {
    if (i__15371__auto___19569 < len__15370__auto___19568) {
      args19565.push(arguments[i__15371__auto___19569]);
      var G__19570 = i__15371__auto___19569 + 1;
      i__15371__auto___19569 = G__19570;
      continue;
    } else {
    }
    break;
  }
  var G__19567 = args19565.length;
  switch(G__19567) {
    case 3:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19565.length)].join(""));;
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3 = function(this$, service_name, fn) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.register_service[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, service_name, fn);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, service_name, fn);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.register_service[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, service_name, fn, encode_json_QMARK_);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, service_name, fn, encode_json_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$lang$maxFixedArity = 4;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
clojure.browser.net.xpc_connection = function clojure$browser$net$xpc_connection() {
  var args19572 = [];
  var len__15370__auto___19580 = arguments.length;
  var i__15371__auto___19581 = 0;
  while (true) {
    if (i__15371__auto___19581 < len__15370__auto___19580) {
      args19572.push(arguments[i__15371__auto___19581]);
      var G__19582 = i__15371__auto___19581 + 1;
      i__15371__auto___19581 = G__19582;
      continue;
    } else {
    }
    break;
  }
  var G__19574 = args19572.length;
  switch(G__19574) {
    case 0:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19572.length)].join(""));;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  var temp__4425__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
  if (cljs.core.truth_(temp__4425__auto__)) {
    var config = temp__4425__auto__;
    return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
  } else {
    return null;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1 = function(config) {
  return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__19575) {
    var vec__19576 = p__19575;
    var k = cljs.core.nth.call(null, vec__19576, 0, null);
    var v = cljs.core.nth.call(null, vec__19576, 1, null);
    var temp__4423__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var field = temp__4423__auto__;
      var G__19577 = sum;
      G__19577[field] = v;
      return G__19577;
    } else {
      return sum;
    }
  }, {}, config));
};
clojure.browser.net.xpc_connection.cljs$lang$maxFixedArity = 1;
clojure.browser.net.IWebSocket = {};
clojure.browser.net.open_QMARK_ = function clojure$browser$net$open_QMARK_(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 == null)) {
    return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = clojure.browser.net.open_QMARK_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$);
    } else {
      var m__14968__auto____$1 = clojure.browser.net.open_QMARK_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
      }
    }
  }
};
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = true;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__19586) {
      var vec__19587 = p__19586;
      var k = cljs.core.nth.call(null, vec__19587, 0, null);
      var v = cljs.core.nth.call(null, vec__19587, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
clojure.browser.net.websocket_connection = function clojure$browser$net$websocket_connection() {
  var args19588 = [];
  var len__15370__auto___19591 = arguments.length;
  var i__15371__auto___19592 = 0;
  while (true) {
    if (i__15371__auto___19592 < len__15370__auto___19591) {
      args19588.push(arguments[i__15371__auto___19592]);
      var G__19593 = i__15371__auto___19592 + 1;
      i__15371__auto___19592 = G__19593;
      continue;
    } else {
    }
    break;
  }
  var G__19590 = args19588.length;
  switch(G__19590) {
    case 0:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19588.length)].join(""));;
  }
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  return clojure.browser.net.websocket_connection.call(null, null, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1 = function(auto_reconnect_QMARK_) {
  return clojure.browser.net.websocket_connection.call(null, auto_reconnect_QMARK_, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
  return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
};
clojure.browser.net.websocket_connection.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.repl");
goog.require("cljs.core");
cljs.repl.print_doc = function cljs$repl$print_doc(m) {
  cljs.core.println.call(null, "-------------------------");
  cljs.core.println.call(null, [cljs.core.str(function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var ns = temp__4425__auto__;
      return [cljs.core.str(ns), cljs.core.str("/")].join("");
    } else {
      return null;
    }
  }()), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Protocol");
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m))) {
    var seq__19491_19505 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m));
    var chunk__19492_19506 = null;
    var count__19493_19507 = 0;
    var i__19494_19508 = 0;
    while (true) {
      if (i__19494_19508 < count__19493_19507) {
        var f_19509 = cljs.core._nth.call(null, chunk__19492_19506, i__19494_19508);
        cljs.core.println.call(null, "  ", f_19509);
        var G__19510 = seq__19491_19505;
        var G__19511 = chunk__19492_19506;
        var G__19512 = count__19493_19507;
        var G__19513 = i__19494_19508 + 1;
        seq__19491_19505 = G__19510;
        chunk__19492_19506 = G__19511;
        count__19493_19507 = G__19512;
        i__19494_19508 = G__19513;
        continue;
      } else {
        var temp__4425__auto___19514 = cljs.core.seq.call(null, seq__19491_19505);
        if (temp__4425__auto___19514) {
          var seq__19491_19515__$1 = temp__4425__auto___19514;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19491_19515__$1)) {
            var c__15115__auto___19516 = cljs.core.chunk_first.call(null, seq__19491_19515__$1);
            var G__19517 = cljs.core.chunk_rest.call(null, seq__19491_19515__$1);
            var G__19518 = c__15115__auto___19516;
            var G__19519 = cljs.core.count.call(null, c__15115__auto___19516);
            var G__19520 = 0;
            seq__19491_19505 = G__19517;
            chunk__19492_19506 = G__19518;
            count__19493_19507 = G__19519;
            i__19494_19508 = G__19520;
            continue;
          } else {
            var f_19521 = cljs.core.first.call(null, seq__19491_19515__$1);
            cljs.core.println.call(null, "  ", f_19521);
            var G__19522 = cljs.core.next.call(null, seq__19491_19515__$1);
            var G__19523 = null;
            var G__19524 = 0;
            var G__19525 = 0;
            seq__19491_19505 = G__19522;
            chunk__19492_19506 = G__19523;
            count__19493_19507 = G__19524;
            i__19494_19508 = G__19525;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m))) {
      var arglists_19526 = (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(function() {
        var or__14331__auto__ = (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__14331__auto__)) {
          return or__14331__auto__;
        } else {
          return (new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }())) {
        cljs.core.prn.call(null, arglists_19526);
      } else {
        cljs.core.prn.call(null, cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, arglists_19526)) ? cljs.core.second.call(null, arglists_19526) : arglists_19526);
      }
    } else {
    }
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "special-form", "special-form", -1326536374)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Special Form");
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.contains_QMARK_.call(null, m, new cljs.core.Keyword(null, "url", "url", 276297046))) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))) {
        return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
      } else {
        return null;
      }
    } else {
      return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/special_forms#"), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "Macro");
    } else {
    }
    if (cljs.core.truth_((new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "REPL Special Function");
    } else {
    }
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
      var seq__19495 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(m));
      var chunk__19496 = null;
      var count__19497 = 0;
      var i__19498 = 0;
      while (true) {
        if (i__19498 < count__19497) {
          var vec__19499 = cljs.core._nth.call(null, chunk__19496, i__19498);
          var name = cljs.core.nth.call(null, vec__19499, 0, null);
          var map__19500 = cljs.core.nth.call(null, vec__19499, 1, null);
          var map__19500__$1 = (!(map__19500 == null) ? map__19500.cljs$lang$protocol_mask$partition0$ & 64 || map__19500.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19500) : map__19500;
          var doc = cljs.core.get.call(null, map__19500__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
          var arglists = cljs.core.get.call(null, map__19500__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
          cljs.core.println.call(null);
          cljs.core.println.call(null, " ", name);
          cljs.core.println.call(null, " ", arglists);
          if (cljs.core.truth_(doc)) {
            cljs.core.println.call(null, " ", doc);
          } else {
          }
          var G__19527 = seq__19495;
          var G__19528 = chunk__19496;
          var G__19529 = count__19497;
          var G__19530 = i__19498 + 1;
          seq__19495 = G__19527;
          chunk__19496 = G__19528;
          count__19497 = G__19529;
          i__19498 = G__19530;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__19495);
          if (temp__4425__auto__) {
            var seq__19495__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19495__$1)) {
              var c__15115__auto__ = cljs.core.chunk_first.call(null, seq__19495__$1);
              var G__19531 = cljs.core.chunk_rest.call(null, seq__19495__$1);
              var G__19532 = c__15115__auto__;
              var G__19533 = cljs.core.count.call(null, c__15115__auto__);
              var G__19534 = 0;
              seq__19495 = G__19531;
              chunk__19496 = G__19532;
              count__19497 = G__19533;
              i__19498 = G__19534;
              continue;
            } else {
              var vec__19502 = cljs.core.first.call(null, seq__19495__$1);
              var name = cljs.core.nth.call(null, vec__19502, 0, null);
              var map__19503 = cljs.core.nth.call(null, vec__19502, 1, null);
              var map__19503__$1 = (!(map__19503 == null) ? map__19503.cljs$lang$protocol_mask$partition0$ & 64 || map__19503.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19503) : map__19503;
              var doc = cljs.core.get.call(null, map__19503__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
              var arglists = cljs.core.get.call(null, map__19503__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
              cljs.core.println.call(null);
              cljs.core.println.call(null, " ", name);
              cljs.core.println.call(null, " ", arglists);
              if (cljs.core.truth_(doc)) {
                cljs.core.println.call(null, " ", doc);
              } else {
              }
              var G__19535 = cljs.core.next.call(null, seq__19495__$1);
              var G__19536 = null;
              var G__19537 = 0;
              var G__19538 = 0;
              seq__19495 = G__19535;
              chunk__19496 = G__19536;
              count__19497 = G__19537;
              i__19498 = G__19538;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  }
};
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.userAgent.product");
goog.require("goog.array");
goog.require("goog.object");
goog.require("clojure.browser.net");
goog.require("clojure.browser.event");
goog.require("cljs.repl");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.print_queue = [];
clojure.browser.repl.flush_print_queue_BANG_ = function clojure$browser$repl$flush_print_queue_BANG_(conn) {
  var seq__19405_19409 = cljs.core.seq.call(null, clojure.browser.repl.print_queue);
  var chunk__19406_19410 = null;
  var count__19407_19411 = 0;
  var i__19408_19412 = 0;
  while (true) {
    if (i__19408_19412 < count__19407_19411) {
      var str_19413 = cljs.core._nth.call(null, chunk__19406_19410, i__19408_19412);
      clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_19413);
      var G__19414 = seq__19405_19409;
      var G__19415 = chunk__19406_19410;
      var G__19416 = count__19407_19411;
      var G__19417 = i__19408_19412 + 1;
      seq__19405_19409 = G__19414;
      chunk__19406_19410 = G__19415;
      count__19407_19411 = G__19416;
      i__19408_19412 = G__19417;
      continue;
    } else {
      var temp__4425__auto___19418 = cljs.core.seq.call(null, seq__19405_19409);
      if (temp__4425__auto___19418) {
        var seq__19405_19419__$1 = temp__4425__auto___19418;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19405_19419__$1)) {
          var c__15115__auto___19420 = cljs.core.chunk_first.call(null, seq__19405_19419__$1);
          var G__19421 = cljs.core.chunk_rest.call(null, seq__19405_19419__$1);
          var G__19422 = c__15115__auto___19420;
          var G__19423 = cljs.core.count.call(null, c__15115__auto___19420);
          var G__19424 = 0;
          seq__19405_19409 = G__19421;
          chunk__19406_19410 = G__19422;
          count__19407_19411 = G__19423;
          i__19408_19412 = G__19424;
          continue;
        } else {
          var str_19425 = cljs.core.first.call(null, seq__19405_19419__$1);
          clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_19425);
          var G__19426 = cljs.core.next.call(null, seq__19405_19419__$1);
          var G__19427 = null;
          var G__19428 = 0;
          var G__19429 = 0;
          seq__19405_19409 = G__19426;
          chunk__19406_19410 = G__19427;
          count__19407_19411 = G__19428;
          i__19408_19412 = G__19429;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return goog.array.clear(clojure.browser.repl.print_queue);
};
clojure.browser.repl.repl_print = function clojure$browser$repl$repl_print(data) {
  clojure.browser.repl.print_queue.push(cljs.core.pr_str.call(null, data));
  var temp__4425__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var conn = temp__4425__auto__;
    return clojure.browser.repl.flush_print_queue_BANG_.call(null, conn);
  } else {
    return null;
  }
};
cljs.core._STAR_print_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_err_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_newline_STAR_ = true;
clojure.browser.repl.get_ua_product = function clojure$browser$repl$get_ua_product() {
  if (cljs.core.truth_(goog.userAgent.product.SAFARI)) {
    return new cljs.core.Keyword(null, "safari", "safari", 497115653);
  } else {
    if (cljs.core.truth_(goog.userAgent.product.CHROME)) {
      return new cljs.core.Keyword(null, "chrome", "chrome", 1718738387);
    } else {
      if (cljs.core.truth_(goog.userAgent.product.FIREFOX)) {
        return new cljs.core.Keyword(null, "firefox", "firefox", 1283768880);
      } else {
        if (cljs.core.truth_(goog.userAgent.product.IE)) {
          return new cljs.core.Keyword(null, "ie", "ie", 2038473780);
        } else {
          return null;
        }
      }
    }
  }
};
clojure.browser.repl.evaluate_javascript = function clojure$browser$repl$evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(block))].join("")], null);
    } catch (e19431) {
      var e = e19431;
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "ua-product", "ua-product", 938384227), clojure.browser.repl.get_ua_product.call(null), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(e)].join(""), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? 
      e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function clojure$browser$repl$send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function clojure$browser$repl$send_print() {
  var args19432 = [];
  var len__15370__auto___19435 = arguments.length;
  var i__15371__auto___19436 = 0;
  while (true) {
    if (i__15371__auto___19436 < len__15370__auto___19435) {
      args19432.push(arguments[i__15371__auto___19436]);
      var G__19437 = i__15371__auto___19436 + 1;
      i__15371__auto___19436 = G__19437;
      continue;
    } else {
    }
    break;
  }
  var G__19434 = args19432.length;
  switch(G__19434) {
    case 2:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args19432.length)].join(""));;
  }
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2 = function(url, data) {
  return clojure.browser.repl.send_print.call(null, url, data, 0);
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3 = function(url, data, n) {
  var conn = clojure.browser.net.xhr_connection.call(null);
  clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
    return function(_) {
      if (n < 10) {
        return clojure.browser.repl.send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    };
  }(conn));
  return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print.cljs$lang$maxFixedArity = 3;
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function clojure$browser$repl$wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function clojure$browser$repl$start_evaluator(url) {
  var temp__4423__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var repl_connection = temp__4423__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4423__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4423__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4423__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4423__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4423__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.load_queue = null;
clojure.browser.repl.bootstrap = function clojure$browser$repl$bootstrap() {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    goog.require__ = goog.require;
    goog.isProvided_ = function(name) {
      return false;
    };
    goog.constructNamespace_("cljs.user");
    goog.writeScriptTag__ = function(src, opt_sourceText) {
      var loaded = cljs.core.atom.call(null, false);
      var onload = function(loaded) {
        return function() {
          if (cljs.core.truth_(function() {
            var and__14319__auto__ = clojure.browser.repl.load_queue;
            if (cljs.core.truth_(and__14319__auto__)) {
              return cljs.core.deref.call(null, loaded) === false;
            } else {
              return and__14319__auto__;
            }
          }())) {
            cljs.core.swap_BANG_.call(null, loaded, cljs.core.not);
            if (clojure.browser.repl.load_queue.length === 0) {
              return clojure.browser.repl.load_queue = null;
            } else {
              return goog.writeScriptTag__.apply(null, clojure.browser.repl.load_queue.shift());
            }
          } else {
            return null;
          }
        };
      }(loaded);
      return document.body.appendChild(function() {
        var script = document.createElement("script");
        var script__$1 = function() {
          var G__19442 = script;
          goog.object.set(G__19442, "type", "text/javascript");
          goog.object.set(G__19442, "onload", onload);
          goog.object.set(G__19442, "onreadystatechange", onload);
          return G__19442;
        }();
        var script__$2 = opt_sourceText == null ? function() {
          var G__19443 = script__$1;
          goog.object.set(G__19443, "src", src);
          return G__19443;
        }() : function() {
          var G__19444 = script__$1;
          goog.dom.setTextContext(G__19444, opt_sourceText);
          return G__19444;
        }();
        return script__$2;
      }());
    };
    goog.writeScriptTag_ = function(src, opt_sourceText) {
      if (cljs.core.truth_(clojure.browser.repl.load_queue)) {
        return clojure.browser.repl.load_queue.push([src, opt_sourceText]);
      } else {
        clojure.browser.repl.load_queue = [];
        return goog.writeScriptTag__(src, opt_sourceText);
      }
    };
    return goog.require = function(src, reload) {
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = true;
      } else {
      }
      var reload_QMARK_ = function() {
        var or__14331__auto__ = reload;
        if (cljs.core.truth_(or__14331__auto__)) {
          return or__14331__auto__;
        } else {
          return goog.cljsReloadAll__;
        }
      }();
      if (cljs.core.truth_(reload_QMARK_)) {
        var path_19445 = goog.dependencies_.nameToPath[src];
        goog.object.remove(goog.dependencies_.visited, path_19445);
        goog.object.remove(goog.dependencies_.written, path_19445);
        goog.object.remove(goog.dependencies_.written, [cljs.core.str(goog.basePath), cljs.core.str(path_19445)].join(""));
      } else {
      }
      var ret = goog.require__(src);
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = false;
      } else {
      }
      return ret;
    };
  }
};
clojure.browser.repl.connect = function clojure$browser$repl$connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
  clojure.browser.repl.bootstrap.call(null);
  return repl_connection;
};
goog.provide("instaparse.auto_flatten_seq");
goog.require("cljs.core");
instaparse.auto_flatten_seq.threshold = 32;
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix = function instaparse$auto_flatten_seq$hash_ordered_coll_without_mix() {
  var args17749 = [];
  var len__15370__auto___17752 = arguments.length;
  var i__15371__auto___17753 = 0;
  while (true) {
    if (i__15371__auto___17753 < len__15370__auto___17752) {
      args17749.push(arguments[i__15371__auto___17753]);
      var G__17754 = i__15371__auto___17753 + 1;
      i__15371__auto___17753 = G__17754;
      continue;
    } else {
    }
    break;
  }
  var G__17751 = args17749.length;
  switch(G__17751) {
    case 1:
      return instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17749.length)].join(""));;
  }
};
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.call(null, 1, coll);
};
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = function(existing_unmixed_hash, coll) {
  var unmixed_hash = existing_unmixed_hash;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__17756 = cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__17757 = cljs.core.next.call(null, coll__$1);
      unmixed_hash = G__17756;
      coll__$1 = G__17757;
      continue;
    } else {
      return unmixed_hash;
    }
    break;
  }
};
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$lang$maxFixedArity = 2;
instaparse.auto_flatten_seq.hash_conj = function instaparse$auto_flatten_seq$hash_conj(unmixed_hash, item) {
  return cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, item) | 0;
};
instaparse.auto_flatten_seq.expt = function instaparse$auto_flatten_seq$expt(base, pow) {
  if (pow === 0) {
    return 1;
  } else {
    var n = pow | 0;
    var y = 1 | 0;
    var z = base | 0;
    while (true) {
      var t = cljs.core.even_QMARK_.call(null, n);
      var n__$1 = cljs.core.quot.call(null, n, 2);
      if (t) {
        var G__17758 = n__$1;
        var G__17759 = y;
        var G__17760 = cljs.core.imul.call(null, z, z);
        n = G__17758;
        y = G__17759;
        z = G__17760;
        continue;
      } else {
        if (n__$1 === 0) {
          return cljs.core.imul.call(null, z, y);
        } else {
          var G__17761 = n__$1;
          var G__17762 = cljs.core.imul.call(null, z, y);
          var G__17763 = cljs.core.imul.call(null, z, z);
          n = G__17761;
          y = G__17762;
          z = G__17763;
          continue;
        }
      }
      break;
    }
  }
};
instaparse.auto_flatten_seq.hash_cat = function instaparse$auto_flatten_seq$hash_cat(v1, v2) {
  var c = cljs.core.count.call(null, v2);
  var e = instaparse.auto_flatten_seq.expt.call(null, 31, c) | 0;
  return (cljs.core.imul.call(null, e, v1.premix_hashcode) | 0) + (v2.premix_hashcode - e);
};
instaparse.auto_flatten_seq.delve = function instaparse$auto_flatten_seq$delve(v, index) {
  var v__$1 = cljs.core.get_in.call(null, v, index);
  var index__$1 = index;
  while (true) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, v__$1))) {
      var G__17764 = cljs.core.get.call(null, v__$1, 0);
      var G__17765 = cljs.core.conj.call(null, index__$1, 0);
      v__$1 = G__17764;
      index__$1 = G__17765;
      continue;
    } else {
      return index__$1;
    }
    break;
  }
};
instaparse.auto_flatten_seq.advance = function instaparse$auto_flatten_seq$advance(v, index) {
  while (true) {
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, index), 1)) {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, v) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, index) + 1], null));
      } else {
        return null;
      }
    } else {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, cljs.core.get_in.call(null, v, cljs.core.pop.call(null, index))) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, cljs.core.conj.call(null, cljs.core.pop.call(null, index), cljs.core.peek.call(null, index) + 1));
      } else {
        var G__17766 = v;
        var G__17767 = cljs.core.pop.call(null, index);
        v = G__17766;
        index = G__17767;
        continue;
      }
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_seq = function instaparse$auto_flatten_seq$flat_seq() {
  var args17768 = [];
  var len__15370__auto___17771 = arguments.length;
  var i__15371__auto___17772 = 0;
  while (true) {
    if (i__15371__auto___17772 < len__15370__auto___17771) {
      args17768.push(arguments[i__15371__auto___17772]);
      var G__17773 = i__15371__auto___17772 + 1;
      i__15371__auto___17772 = G__17773;
      continue;
    } else {
    }
    break;
  }
  var G__17770 = args17768.length;
  switch(G__17770) {
    case 1:
      return instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17768.length)].join(""));;
  }
};
instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1 = function(v) {
  if (cljs.core.count.call(null, v) > 0) {
    return instaparse.auto_flatten_seq.flat_seq.call(null, v, instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null)));
  } else {
    return null;
  }
};
instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2 = function(v, index) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons.call(null, cljs.core.get_in.call(null, v, index), function() {
      var temp__4425__auto__ = instaparse.auto_flatten_seq.advance.call(null, v, index);
      if (cljs.core.truth_(temp__4425__auto__)) {
        var next_index = temp__4425__auto__;
        return instaparse.auto_flatten_seq.flat_seq.call(null, v, next_index);
      } else {
        return null;
      }
    }());
  }, null, null);
};
instaparse.auto_flatten_seq.flat_seq.cljs$lang$maxFixedArity = 2;
instaparse.auto_flatten_seq.ConjFlat = {};
instaparse.auto_flatten_seq.conj_flat = function instaparse$auto_flatten_seq$conj_flat(self, obj) {
  if (!(self == null) && !(self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 == null)) {
    return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self, obj);
  } else {
    var x__14967__auto__ = self == null ? null : self;
    var m__14968__auto__ = instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, self, obj);
    } else {
      var m__14968__auto____$1 = instaparse.auto_flatten_seq.conj_flat["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, self, obj);
      } else {
        throw cljs.core.missing_protocol.call(null, "ConjFlat.conj-flat", self);
      }
    }
  }
};
instaparse.auto_flatten_seq.cached_QMARK_ = function instaparse$auto_flatten_seq$cached_QMARK_(self) {
  if (!(self == null) && !(self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 == null)) {
    return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);
  } else {
    var x__14967__auto__ = self == null ? null : self;
    var m__14968__auto__ = instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, self);
    } else {
      var m__14968__auto____$1 = instaparse.auto_flatten_seq.cached_QMARK_["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, self);
      } else {
        throw cljs.core.missing_protocol.call(null, "ConjFlat.cached?", self);
      }
    }
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq = function(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  this.v = v;
  this.premix_hashcode = premix_hashcode;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.dirty = dirty;
  this.cached_seq = cached_seq;
  this.cljs$lang$protocol_mask$partition0$ = 31850958;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._lookup.call(null, self__.v, key);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._lookup.call(null, self__.v, key, not_found);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.meta.call(null, self__.v);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.next.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && (cljs.core._EQ_.call(null, self__.cnt, 0) || cljs.core._EQ_.call(null, cljs.core.seq.call(null, self__$1), other));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.first.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(self__.cached_seq)) {
    return self__.cached_seq;
  } else {
    self__.cached_seq = self__.dirty ? instaparse.auto_flatten_seq.flat_seq.call(null, self__.v) : cljs.core.seq.call(null, self__.v);
    return self__.cached_seq;
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta.call(null, self__.v, metamap), self__.premix_hashcode, self__.hashcode, self__.cnt, self__.dirty, null);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(self, o) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.cons.call(null, o, self__$1);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  if (obj == null) {
    return self__$1;
  } else {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, obj))) {
      if (self__.cnt === 0) {
        return obj;
      } else {
        if (cljs.core.count.call(null, obj) <= instaparse.auto_flatten_seq.threshold) {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, function() {
            var or__14331__auto__ = self__.dirty;
            if (or__14331__auto__) {
              return or__14331__auto__;
            } else {
              return obj.dirty;
            }
          }(), null);
        } else {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, true, null);
        }
      }
    } else {
      var phc = instaparse.auto_flatten_seq.hash_conj.call(null, self__.premix_hashcode, obj);
      var new_cnt = self__.cnt + 1;
      return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, self__.dirty, null);
    }
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cached_seq;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "PersistentVector", "PersistentVector", -837570443, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "premix-hashcode", "premix-hashcode", -1918840795, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "number", "number", -1084057331, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "hashcode", "hashcode", 1350412446, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "number", "number", -1084057331, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "number", "number", -1084057331, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty", "dirty", -1924882488, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cached-seq", "cached-seq", 1369780142, null), new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "ISeq", "ISeq", 1517365813, null), new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950), true], null))], null);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/AutoFlattenSeq";
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write.call(null, writer__14911__auto__, "instaparse.auto-flatten-seq/AutoFlattenSeq");
};
instaparse.auto_flatten_seq.__GT_AutoFlattenSeq = function instaparse$auto_flatten_seq$__GT_AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq);
};
instaparse.auto_flatten_seq.auto_flatten_seq = function instaparse$auto_flatten_seq$auto_flatten_seq(v) {
  var v__$1 = cljs.core.vec.call(null, v);
  var c = cljs.core.count.call(null, v__$1);
  var unmixed_hash = instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.call(null, v__$1);
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1, unmixed_hash, cljs.core.mix_collection_hash.call(null, unmixed_hash, c), c, false, null);
};
instaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, cljs.core.PersistentVector.EMPTY);
instaparse.auto_flatten_seq.afs_QMARK_ = function instaparse$auto_flatten_seq$afs_QMARK_(s) {
  return s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq;
};
instaparse.auto_flatten_seq.true_count = function instaparse$auto_flatten_seq$true_count(v) {
  if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, v))) {
    return cljs.core.count.call(null, v.v);
  } else {
    return cljs.core.count.call(null, v);
  }
};
instaparse.auto_flatten_seq.flat_vec_helper = function instaparse$auto_flatten_seq$flat_vec_helper(acc, v) {
  while (true) {
    var temp__4423__auto__ = cljs.core.seq.call(null, v);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      var fst = cljs.core.first.call(null, v);
      if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, fst))) {
        var G__17777 = instaparse$auto_flatten_seq$flat_vec_helper.call(null, acc, fst);
        var G__17778 = cljs.core.next.call(null, v);
        acc = G__17777;
        v = G__17778;
        continue;
      } else {
        var G__17779 = cljs.core.conj_BANG_.call(null, acc, fst);
        var G__17780 = cljs.core.next.call(null, v);
        acc = G__17779;
        v = G__17780;
        continue;
      }
    } else {
      return acc;
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_vec = function instaparse$auto_flatten_seq$flat_vec(v) {
  return cljs.core.persistent_BANG_.call(null, instaparse.auto_flatten_seq.flat_vec_helper.call(null, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), v));
};
instaparse.auto_flatten_seq.GetVec = {};
instaparse.auto_flatten_seq.get_vec = function instaparse$auto_flatten_seq$get_vec(self) {
  if (!(self == null) && !(self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 == null)) {
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);
  } else {
    var x__14967__auto__ = self == null ? null : self;
    var m__14968__auto__ = instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, self);
    } else {
      var m__14968__auto____$1 = instaparse.auto_flatten_seq.get_vec["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, self);
      } else {
        throw cljs.core.missing_protocol.call(null, "GetVec.get-vec", self);
      }
    }
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector = function(v, hashcode, cnt, flat) {
  this.v = v;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.flat = flat;
  this.cljs$lang$protocol_mask$partition0$ = 150364959;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = function() {
  var self__ = this;
  var self = this;
  return cljs.core.pr_str_STAR_.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._lookup.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), key);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._lookup.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), key, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.not.call(null, cljs.core.deref.call(null, self__.flat))) {
    cljs.core.swap_BANG_.call(null, self__.flat, function(self__$1) {
      return function(_) {
        return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.flat_vec.call(null, cljs.core.deref.call(null, self__.v)), cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v)));
      };
    }(self__$1));
    cljs.core.swap_BANG_.call(null, self__.v, function(self__$1) {
      return function(_) {
        return null;
      };
    }(self__$1));
  } else {
  }
  return cljs.core.deref.call(null, self__.flat);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(self, f, init) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._kv_reduce.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), f, init);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(self, i) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._nth.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(self, i, not_found) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._nth.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._assoc_n.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.flat));
  } else {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._peek.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._pop.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.rseq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
  } else {
    return null;
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && cljs.core._EQ_.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), other);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.assoc.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(self, k) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), k);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.seq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.deref.call(null, self__.v)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.flat), metamap)));
  } else {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.v), metamap)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.deref.call(null, self__.flat)));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.conj.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), obj);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = function() {
  var G__17784 = null;
  var G__17784__2 = function(self__, arg) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return cljs.core._invoke.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self), arg);
  };
  var G__17784__3 = function(self__, arg, not_found) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return cljs.core._invoke.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self), arg, not_found);
  };
  G__17784 = function(self__, arg, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17784__2.call(this, self__, arg);
      case 3:
        return G__17784__3.call(this, self__, arg, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17784.cljs$core$IFn$_invoke$arity$2 = G__17784__2;
  G__17784.cljs$core$IFn$_invoke$arity$3 = G__17784__3;
  return G__17784;
}();
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = function(self__, args17783) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17783)));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(arg) {
  var self__ = this;
  var self = this;
  return cljs.core._invoke.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self), arg);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(arg, not_found) {
  var self__ = this;
  var self = this;
  return cljs.core._invoke.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self), arg, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(self, that) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._compare.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), that);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "v", "v", 1661996586, null), cljs.core.with_meta(new cljs.core.Symbol(null, "hashcode", "hashcode", 1350412446, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "number", "number", -1084057331, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "number", "number", -1084057331, null)], null)), new cljs.core.Symbol(null, "flat", "flat", -2076841507, null)], null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/FlattenOnDemandVector";
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write.call(null, writer__14911__auto__, "instaparse.auto-flatten-seq/FlattenOnDemandVector");
};
instaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = function instaparse$auto_flatten_seq$__GT_FlattenOnDemandVector(v, hashcode, cnt, flat) {
  return new instaparse.auto_flatten_seq.FlattenOnDemandVector(v, hashcode, cnt, flat);
};
instaparse.auto_flatten_seq.convert_afs_to_vec = function instaparse$auto_flatten_seq$convert_afs_to_vec(afs) {
  if (cljs.core.truth_(afs.dirty)) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.cached_QMARK_.call(null, afs))) {
      return cljs.core.vec.call(null, cljs.core.seq.call(null, afs));
    } else {
      return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, afs.v), afs.hashcode, afs.cnt, cljs.core.atom.call(null, null));
    }
  } else {
    return afs.v;
  }
};
goog.provide("instaparse.reduction");
goog.require("cljs.core");
goog.require("instaparse.auto_flatten_seq");
instaparse.reduction.singleton_QMARK_ = function instaparse$reduction$singleton_QMARK_(s) {
  return cljs.core.seq.call(null, s) && cljs.core.not.call(null, cljs.core.next.call(null, s));
};
instaparse.reduction.red = function instaparse$reduction$red(parser, f) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204), f);
};
instaparse.reduction.raw_non_terminal_reduction = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "raw", "raw", 1604651272)], null);
instaparse.reduction.HiccupNonTerminalReduction = function instaparse$reduction$HiccupNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.EnliveNonTerminalReduction = function instaparse$reduction$EnliveNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.reduction_types = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.reduction.HiccupNonTerminalReduction, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), instaparse.reduction.EnliveNonTerminalReduction], null);
instaparse.reduction.node_builders = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), function(tag, item) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core._conj.call(null, cljs.core.List.EMPTY, item)], null);
}, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), function(tag, item) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, item], null);
}], null);
instaparse.reduction.standard_non_terminal_reduction = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.reduction.apply_reduction = function instaparse$reduction$apply_reduction(f, result) {
  var G__18390 = (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f).fqn : null;
  switch(G__18390) {
    case "raw":
      return instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      break;
    case "hiccup":
      return instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f)], null)), result));
      break;
    case "enlive":
      var content = instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), (new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f), new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.count.call(null, content) === 0 ? null : content], null);
      break;
    default:
      return f.call(null, result);
  }
};
instaparse.reduction.apply_standard_reductions = function instaparse$reduction$apply_standard_reductions() {
  var args18392 = [];
  var len__15370__auto___18403 = arguments.length;
  var i__15371__auto___18404 = 0;
  while (true) {
    if (i__15371__auto___18404 < len__15370__auto___18403) {
      args18392.push(arguments[i__15371__auto___18404]);
      var G__18405 = i__15371__auto___18404 + 1;
      i__15371__auto___18404 = G__18405;
      continue;
    } else {
    }
    break;
  }
  var G__18394 = args18392.length;
  switch(G__18394) {
    case 1:
      return instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18392.length)].join(""));;
  }
};
instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$1 = function(grammar) {
  return instaparse.reduction.apply_standard_reductions.call(null, instaparse.reduction.standard_non_terminal_reduction, grammar);
};
instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2 = function(reduction_type, grammar) {
  var temp__4423__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var reduction = temp__4423__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__15084__auto__ = function(reduction, temp__4423__auto__) {
        return function instaparse$reduction$iter__18395(s__18396) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4423__auto__) {
            return function() {
              var s__18396__$1 = s__18396;
              while (true) {
                var temp__4425__auto__ = cljs.core.seq.call(null, s__18396__$1);
                if (temp__4425__auto__) {
                  var s__18396__$2 = temp__4425__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__18396__$2)) {
                    var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18396__$2);
                    var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
                    var b__18398 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
                    if (function() {
                      var i__18397 = 0;
                      while (true) {
                        if (i__18397 < size__15083__auto__) {
                          var vec__18401 = cljs.core._nth.call(null, c__15082__auto__, i__18397);
                          var k = cljs.core.nth.call(null, vec__18401, 0, null);
                          var v = cljs.core.nth.call(null, vec__18401, 1, null);
                          cljs.core.chunk_append.call(null, b__18398, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__18407 = i__18397 + 1;
                          i__18397 = G__18407;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18398), instaparse$reduction$iter__18395.call(null, cljs.core.chunk_rest.call(null, s__18396__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18398), null);
                    }
                  } else {
                    var vec__18402 = cljs.core.first.call(null, s__18396__$2);
                    var k = cljs.core.nth.call(null, vec__18402, 0, null);
                    var v = cljs.core.nth.call(null, vec__18402, 1, null);
                    return cljs.core.cons.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), instaparse$reduction$iter__18395.call(null, 
                    cljs.core.rest.call(null, s__18396__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4423__auto__), null, null);
        };
      }(reduction, temp__4423__auto__);
      return iter__15084__auto__.call(null, grammar);
    }());
  } else {
    throw [cljs.core.str("Invalid output format"), cljs.core.str(reduction_type), cljs.core.str(". Use :enlive or :hiccup.")].join("");
  }
};
instaparse.reduction.apply_standard_reductions.cljs$lang$maxFixedArity = 2;
goog.provide("instaparse.combinators_source");
goog.require("cljs.core");
goog.require("instaparse.reduction");
instaparse.combinators_source.Epsilon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)], null);
instaparse.combinators_source.opt = function instaparse$combinators_source$opt(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "opt", "opt", -794706369), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.plus = function instaparse$combinators_source$plus(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.star = function instaparse$combinators_source$star(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.rep = function instaparse$combinators_source$rep(m, n, parser) {
  if (m <= n) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "rep", "rep", -1226820564), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser, new cljs.core.Keyword(null, "min", "min", 444991522), m, new cljs.core.Keyword(null, "max", "max", 61366548), n], null);
  }
};
instaparse.combinators_source.alt = function instaparse$combinators_source$alt() {
  var args__15377__auto__ = [];
  var len__15370__auto___18481 = arguments.length;
  var i__15371__auto___18482 = 0;
  while (true) {
    if (i__15371__auto___18482 < len__15370__auto___18481) {
      args__15377__auto__.push(arguments[i__15371__auto___18482]);
      var G__18483 = i__15371__auto___18482 + 1;
      i__15371__auto___18482 = G__18483;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic = function(parsers) {
  if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    if (cljs.core.truth_(instaparse.reduction.singleton_QMARK_.call(null, parsers))) {
      return cljs.core.first.call(null, parsers);
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers], null);
    }
  }
};
instaparse.combinators_source.alt.cljs$lang$maxFixedArity = 0;
instaparse.combinators_source.alt.cljs$lang$applyTo = function(seq18480) {
  return instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq18480));
};
instaparse.combinators_source.ord2 = function instaparse$combinators_source$ord2(parser1, parser2) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "parser1", "parser1", -439601422), parser1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), parser2], null);
};
instaparse.combinators_source.ord = function instaparse$combinators_source$ord() {
  var args18484 = [];
  var len__15370__auto___18489 = arguments.length;
  var i__15371__auto___18490 = 0;
  while (true) {
    if (i__15371__auto___18490 < len__15370__auto___18489) {
      args18484.push(arguments[i__15371__auto___18490]);
      var G__18491 = i__15371__auto___18490 + 1;
      i__15371__auto___18490 = G__18491;
      continue;
    } else {
    }
    break;
  }
  var G__18488 = args18484.length;
  switch(G__18488) {
    case 0:
      return instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__15389__auto__ = new cljs.core.IndexedSeq(args18484.slice(1), 0);
      return instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15389__auto__);
  }
};
instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$0 = function() {
  return instaparse.combinators_source.Epsilon;
};
instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic = function(parser1, parsers) {
  var parsers__$1 = cljs.core._EQ_.call(null, parser1, instaparse.combinators_source.Epsilon) ? cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers) : parsers;
  if (cljs.core.seq.call(null, parsers__$1)) {
    return instaparse.combinators_source.ord2.call(null, parser1, cljs.core.apply.call(null, instaparse.combinators_source.ord, parsers__$1));
  } else {
    return parser1;
  }
};
instaparse.combinators_source.ord.cljs$lang$applyTo = function(seq18485) {
  var G__18486 = cljs.core.first.call(null, seq18485);
  var seq18485__$1 = cljs.core.next.call(null, seq18485);
  return instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic(G__18486, seq18485__$1);
};
instaparse.combinators_source.ord.cljs$lang$maxFixedArity = 1;
instaparse.combinators_source.cat = function instaparse$combinators_source$cat() {
  var args__15377__auto__ = [];
  var len__15370__auto___18494 = arguments.length;
  var i__15371__auto___18495 = 0;
  while (true) {
    if (i__15371__auto___18495 < len__15370__auto___18494) {
      args__15377__auto__.push(arguments[i__15371__auto___18495]);
      var G__18496 = i__15371__auto___18495 + 1;
      i__15371__auto___18495 = G__18496;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic = function(parsers) {
  if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    var parsers__$1 = cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers);
    if (cljs.core.truth_(instaparse.reduction.singleton_QMARK_.call(null, parsers__$1))) {
      return cljs.core.first.call(null, parsers__$1);
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers__$1], null);
    }
  }
};
instaparse.combinators_source.cat.cljs$lang$maxFixedArity = 0;
instaparse.combinators_source.cat.cljs$lang$applyTo = function(seq18493) {
  return instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq18493));
};
instaparse.combinators_source.string = function instaparse$combinators_source$string(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.string_ci = function instaparse$combinators_source$string_ci(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.unicode_char = function instaparse$combinators_source$unicode_char() {
  var args18497 = [];
  var len__15370__auto___18500 = arguments.length;
  var i__15371__auto___18501 = 0;
  while (true) {
    if (i__15371__auto___18501 < len__15370__auto___18500) {
      args18497.push(arguments[i__15371__auto___18501]);
      var G__18502 = i__15371__auto___18501 + 1;
      i__15371__auto___18501 = G__18502;
      continue;
    } else {
    }
    break;
  }
  var G__18499 = args18497.length;
  switch(G__18499) {
    case 1:
      return instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18497.length)].join(""));;
  }
};
instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1 = function(code_point) {
  return instaparse.combinators_source.unicode_char.call(null, code_point, code_point);
};
instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2 = function(lo, hi) {
  if (lo <= hi) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Character range minimum must be less than or equal the maximum"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "lo", "lo", 708731638, null), new cljs.core.Symbol(null, "hi", "hi", -180890587, null))))].join(""));
  }
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null);
};
instaparse.combinators_source.unicode_char.cljs$lang$maxFixedArity = 2;
instaparse.combinators_source.regexp__GT_str = function instaparse$combinators_source$regexp__GT_str(r) {
  if (cljs.core.regexp_QMARK_.call(null, r)) {
    var s = [cljs.core.str(r)].join("");
    return cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  } else {
    return r;
  }
};
instaparse.combinators_source.regexp = function instaparse$combinators_source$regexp(r) {
  var s = [cljs.core.str("^"), cljs.core.str(instaparse.combinators_source.regexp__GT_str.call(null, r))].join("");
  if (cljs.core._EQ_.call(null, s, "^")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), cljs.core.re_pattern.call(null, s)], null);
  }
};
instaparse.combinators_source.nt = function instaparse$combinators_source$nt(s) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "keyword", "keyword", 811389747), s], null);
};
instaparse.combinators_source.look = function instaparse$combinators_source$look(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.neg = function instaparse$combinators_source$neg(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.hide = function instaparse$combinators_source$hide(parser) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169), true);
};
instaparse.combinators_source.hide_tag = function instaparse$combinators_source$hide_tag(parser) {
  return instaparse.reduction.red.call(null, parser, instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.hidden_tag_QMARK_ = function instaparse$combinators_source$hidden_tag_QMARK_(parser) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.unhide_content = function instaparse$combinators_source$unhide_content(parser) {
  var parser__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169)) : parser;
  if (cljs.core.truth_((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
    return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310), instaparse$combinators_source$unhide_content.call(null, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
      return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, instaparse$combinators_source$unhide_content, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser__$1), new cljs.core.Keyword(null, "ord", "ord", 1142548323))) {
        return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), instaparse$combinators_source$unhide_content.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser__$1)), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), instaparse$combinators_source$unhide_content.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser__$1)))
        ;
      } else {
        return parser__$1;
      }
    }
  }
};
instaparse.combinators_source.unhide_all_content = function instaparse$combinators_source$unhide_all_content(grammar) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__15084__auto__ = function instaparse$combinators_source$unhide_all_content_$_iter__18512(s__18513) {
      return new cljs.core.LazySeq(null, function() {
        var s__18513__$1 = s__18513;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__18513__$1);
          if (temp__4425__auto__) {
            var s__18513__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__18513__$2)) {
              var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18513__$2);
              var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
              var b__18515 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
              if (function() {
                var i__18514 = 0;
                while (true) {
                  if (i__18514 < size__15083__auto__) {
                    var vec__18518 = cljs.core._nth.call(null, c__15082__auto__, i__18514);
                    var k = cljs.core.nth.call(null, vec__18518, 0, null);
                    var v = cljs.core.nth.call(null, vec__18518, 1, null);
                    cljs.core.chunk_append.call(null, b__18515, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null));
                    var G__18520 = i__18514 + 1;
                    i__18514 = G__18520;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18515), instaparse$combinators_source$unhide_all_content_$_iter__18512.call(null, cljs.core.chunk_rest.call(null, s__18513__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18515), null);
              }
            } else {
              var vec__18519 = cljs.core.first.call(null, s__18513__$2);
              var k = cljs.core.nth.call(null, vec__18519, 0, null);
              var v = cljs.core.nth.call(null, vec__18519, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null), instaparse$combinators_source$unhide_all_content_$_iter__18512.call(null, cljs.core.rest.call(null, s__18513__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__15084__auto__.call(null, grammar);
  }());
};
instaparse.combinators_source.unhide_tags = function instaparse$combinators_source$unhide_tags(reduction_type, grammar) {
  var temp__4423__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var reduction = temp__4423__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__15084__auto__ = function(reduction, temp__4423__auto__) {
        return function instaparse$combinators_source$unhide_tags_$_iter__18529(s__18530) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4423__auto__) {
            return function() {
              var s__18530__$1 = s__18530;
              while (true) {
                var temp__4425__auto__ = cljs.core.seq.call(null, s__18530__$1);
                if (temp__4425__auto__) {
                  var s__18530__$2 = temp__4425__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__18530__$2)) {
                    var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18530__$2);
                    var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
                    var b__18532 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
                    if (function() {
                      var i__18531 = 0;
                      while (true) {
                        if (i__18531 < size__15083__auto__) {
                          var vec__18535 = cljs.core._nth.call(null, c__15082__auto__, i__18531);
                          var k = cljs.core.nth.call(null, vec__18535, 0, null);
                          var v = cljs.core.nth.call(null, vec__18535, 1, null);
                          cljs.core.chunk_append.call(null, b__18532, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__18537 = i__18531 + 1;
                          i__18531 = G__18537;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18532), instaparse$combinators_source$unhide_tags_$_iter__18529.call(null, cljs.core.chunk_rest.call(null, s__18530__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18532), null);
                    }
                  } else {
                    var vec__18536 = cljs.core.first.call(null, s__18530__$2);
                    var k = cljs.core.nth.call(null, vec__18536, 0, null);
                    var v = cljs.core.nth.call(null, vec__18536, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), instaparse$combinators_source$unhide_tags_$_iter__18529.call(null, cljs.core.rest.call(null, s__18530__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4423__auto__), null, null);
        };
      }(reduction, temp__4423__auto__);
      return iter__15084__auto__.call(null, grammar);
    }());
  } else {
    throw [cljs.core.str("Invalid output format"), cljs.core.str(reduction_type), cljs.core.str(". Use :enlive or :hiccup.")].join("");
  }
};
instaparse.combinators_source.unhide_all = function instaparse$combinators_source$unhide_all(reduction_type, grammar) {
  var temp__4423__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var reduction = temp__4423__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__15084__auto__ = function(reduction, temp__4423__auto__) {
        return function instaparse$combinators_source$unhide_all_$_iter__18546(s__18547) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4423__auto__) {
            return function() {
              var s__18547__$1 = s__18547;
              while (true) {
                var temp__4425__auto__ = cljs.core.seq.call(null, s__18547__$1);
                if (temp__4425__auto__) {
                  var s__18547__$2 = temp__4425__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__18547__$2)) {
                    var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18547__$2);
                    var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
                    var b__18549 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
                    if (function() {
                      var i__18548 = 0;
                      while (true) {
                        if (i__18548 < size__15083__auto__) {
                          var vec__18552 = cljs.core._nth.call(null, c__15082__auto__, i__18548);
                          var k = cljs.core.nth.call(null, vec__18552, 0, null);
                          var v = cljs.core.nth.call(null, vec__18552, 1, null);
                          cljs.core.chunk_append.call(null, b__18549, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__18554 = i__18548 + 1;
                          i__18548 = G__18554;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18549), instaparse$combinators_source$unhide_all_$_iter__18546.call(null, cljs.core.chunk_rest.call(null, s__18547__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18549), null);
                    }
                  } else {
                    var vec__18553 = cljs.core.first.call(null, s__18547__$2);
                    var k = cljs.core.nth.call(null, vec__18553, 0, null);
                    var v = cljs.core.nth.call(null, vec__18553, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), instaparse$combinators_source$unhide_all_$_iter__18546.call(null, cljs.core.rest.call(null, s__18547__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4423__auto__), null, null);
        };
      }(reduction, temp__4423__auto__);
      return iter__15084__auto__.call(null, grammar);
    }());
  } else {
    throw [cljs.core.str("Invalid output format"), cljs.core.str(reduction_type), cljs.core.str(". Use :enlive or :hiccup.")].join("");
  }
};
instaparse.combinators_source.auto_whitespace_parser = function instaparse$combinators_source$auto_whitespace_parser(parser, ws_parser) {
  var G__18557 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__18557) {
    case "neg":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), instaparse$combinators_source$auto_whitespace_parser, ws_parser);
      break;
    case "cat":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__18557) {
        return function(p1__18555_SHARP_) {
          return instaparse$combinators_source$auto_whitespace_parser.call(null, p1__18555_SHARP_, ws_parser);
        };
      }(G__18557), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "ord":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), instaparse$combinators_source$auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), instaparse$combinators_source$auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser), 
      ws_parser));
      break;
    case "alt":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__18557) {
        return function(p1__18555_SHARP_) {
          return instaparse$combinators_source$auto_whitespace_parser.call(null, p1__18555_SHARP_, ws_parser);
        };
      }(G__18557), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "look":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), instaparse$combinators_source$auto_whitespace_parser, ws_parser);
      break;
    case "nt":
      return parser;
      break;
    case "rep":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), instaparse$combinators_source$auto_whitespace_parser, ws_parser);
      break;
    case "star":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), instaparse$combinators_source$auto_whitespace_parser, ws_parser);
      break;
    case "string":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "regexp":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "plus":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), instaparse$combinators_source$auto_whitespace_parser, ws_parser);
      break;
    case "epsilon":
      return parser;
      break;
    case "string-ci":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "opt":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), instaparse$combinators_source$auto_whitespace_parser, ws_parser);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser))].join(""));;
  }
};
instaparse.combinators_source.auto_whitespace = function instaparse$combinators_source$auto_whitespace(grammar, start, grammar_ws, start_ws) {
  var ws_parser = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.opt.call(null, instaparse.combinators_source.nt.call(null, start_ws)));
  var grammar_ws__$1 = cljs.core.assoc.call(null, grammar_ws, start_ws, instaparse.combinators_source.hide_tag.call(null, grammar_ws.call(null, start_ws)));
  var modified_grammar = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__15084__auto__ = function(ws_parser, grammar_ws__$1) {
      return function instaparse$combinators_source$auto_whitespace_$_iter__18567(s__18568) {
        return new cljs.core.LazySeq(null, function(ws_parser, grammar_ws__$1) {
          return function() {
            var s__18568__$1 = s__18568;
            while (true) {
              var temp__4425__auto__ = cljs.core.seq.call(null, s__18568__$1);
              if (temp__4425__auto__) {
                var s__18568__$2 = temp__4425__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__18568__$2)) {
                  var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18568__$2);
                  var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
                  var b__18570 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
                  if (function() {
                    var i__18569 = 0;
                    while (true) {
                      if (i__18569 < size__15083__auto__) {
                        var vec__18573 = cljs.core._nth.call(null, c__15082__auto__, i__18569);
                        var nt = cljs.core.nth.call(null, vec__18573, 0, null);
                        var parser = cljs.core.nth.call(null, vec__18573, 1, null);
                        cljs.core.chunk_append.call(null, b__18570, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null));
                        var G__18575 = i__18569 + 1;
                        i__18569 = G__18575;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18570), instaparse$combinators_source$auto_whitespace_$_iter__18567.call(null, cljs.core.chunk_rest.call(null, s__18568__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18570), null);
                  }
                } else {
                  var vec__18574 = cljs.core.first.call(null, s__18568__$2);
                  var nt = cljs.core.nth.call(null, vec__18574, 0, null);
                  var parser = cljs.core.nth.call(null, vec__18574, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null), instaparse$combinators_source$auto_whitespace_$_iter__18567.call(null, cljs.core.rest.call(null, s__18568__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(ws_parser, grammar_ws__$1), null, null);
      };
    }(ws_parser, grammar_ws__$1);
    return iter__15084__auto__.call(null, grammar);
  }());
  var final_grammar = cljs.core.assoc.call(null, modified_grammar, start, cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, cljs.core.dissoc.call(null, modified_grammar.call(null, start), new cljs.core.Keyword(null, "red", "red", -969428204)), ws_parser), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(modified_grammar.call(null, start))));
  return cljs.core.merge.call(null, final_grammar, grammar_ws__$1);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var args17604 = [];
  var len__15370__auto___17607 = arguments.length;
  var i__15371__auto___17608 = 0;
  while (true) {
    if (i__15371__auto___17608 < len__15370__auto___17607) {
      args17604.push(arguments[i__15371__auto___17608]);
      var G__17609 = i__15371__auto___17608 + 1;
      i__15371__auto___17608 = G__17609;
      continue;
    } else {
    }
    break;
  }
  var G__17606 = args17604.length;
  switch(G__17606) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17604.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__17611 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__17612 = cljs.core.next.call(null, coll__$1);
      sb = G__17611;
      coll__$1 = G__17612;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__17613 = sb;
      var G__17614 = coll__$2;
      sb = G__17613;
      coll__$1 = G__17614;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__17615 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__17615;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__17619 = cljs.core._EQ__EQ_;
    var expr__17620 = limit;
    if (cljs.core.truth_(pred__17619.call(null, 1, expr__17620))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__17619.call(null, 2, expr__17620))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var args17622 = [];
  var len__15370__auto___17625 = arguments.length;
  var i__15371__auto___17626 = 0;
  while (true) {
    if (i__15371__auto___17626 < len__15370__auto___17625) {
      args17622.push(arguments[i__15371__auto___17626]);
      var G__17627 = i__15371__auto___17626 + 1;
      i__15371__auto___17626 = G__17627;
      continue;
    } else {
    }
    break;
  }
  var G__17624 = args17622.length;
  switch(G__17624) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17622.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__17629 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__17630 = limit__$1 - 1;
          var G__17631 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__17629;
          limit__$1 = G__17630;
          parts = G__17631;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__17632 = index - 1;
        index = G__17632;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__17633 = index + 1;
      index = G__17633;
      continue;
    }
    break;
  }
};
goog.provide("instaparse.print");
goog.require("cljs.core");
goog.require("clojure.string");
instaparse.print.paren_for_tags = function instaparse$print$paren_for_tags(tag_set, hidden_QMARK_, parser) {
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = cljs.core.not.call(null, hidden_QMARK_);
    if (and__14319__auto__) {
      return tag_set.call(null, parser.call(null, new cljs.core.Keyword(null, "tag", "tag", -1290361223)));
    } else {
      return and__14319__auto__;
    }
  }())) {
    return [cljs.core.str("("), cljs.core.str(instaparse.print.combinators__GT_str.call(null, parser, false)), cljs.core.str(")")].join("");
  } else {
    return instaparse.print.combinators__GT_str.call(null, parser, false);
  }
};
instaparse.print.paren_for_compound = cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cat", "cat", -1457810207), null, new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null));
instaparse.print.regexp_replace = function instaparse$print$regexp_replace(s) {
  var G__18411 = s;
  switch(G__18411) {
    case "\n":
      return "\\n";
      break;
    case "\b":
      return "\\b";
      break;
    case "\f":
      return "\\f";
      break;
    case "\r":
      return "\\r";
      break;
    case "\t":
      return "\\t";
      break;
    default:
      return s;
  }
};
instaparse.print.regexp__GT_str = function instaparse$print$regexp__GT_str(r) {
  return clojure.string.replace.call(null, [cljs.core.str('#"'), cljs.core.str(cljs.core.subs.call(null, r.source, 1)), cljs.core.str('"')].join(""), /[\s]/, instaparse.print.regexp_replace);
};
instaparse.print.number__GT_hex_padded = function instaparse$print$number__GT_hex_padded(n) {
  if (n <= 4095) {
    return [cljs.core.str("0000"), cljs.core.str(n.toString(16))].join("").substr(-4);
  } else {
    return n.toString(16);
  }
};
instaparse.print.char_range__GT_str = function instaparse$print$char_range__GT_str(p__18413) {
  var map__18416 = p__18413;
  var map__18416__$1 = (!(map__18416 == null) ? map__18416.cljs$lang$protocol_mask$partition0$ & 64 || map__18416.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18416) : map__18416;
  var lo = cljs.core.get.call(null, map__18416__$1, new cljs.core.Keyword(null, "lo", "lo", -931799889));
  var hi = cljs.core.get.call(null, map__18416__$1, new cljs.core.Keyword(null, "hi", "hi", -1821422114));
  if (cljs.core._EQ_.call(null, lo, hi)) {
    return [cljs.core.str("%x"), cljs.core.str(instaparse.print.number__GT_hex_padded.call(null, lo))].join("");
  } else {
    return [cljs.core.str("%x"), cljs.core.str(instaparse.print.number__GT_hex_padded.call(null, lo)), cljs.core.str("-"), cljs.core.str(instaparse.print.number__GT_hex_padded.call(null, hi))].join("");
  }
};
instaparse.print.combinators__GT_str = function instaparse$print$combinators__GT_str() {
  var args18418 = [];
  var len__15370__auto___18429 = arguments.length;
  var i__15371__auto___18430 = 0;
  while (true) {
    if (i__15371__auto___18430 < len__15370__auto___18429) {
      args18418.push(arguments[i__15371__auto___18430]);
      var G__18431 = i__15371__auto___18430 + 1;
      i__15371__auto___18430 = G__18431;
      continue;
    } else {
    }
    break;
  }
  var G__18420 = args18418.length;
  switch(G__18420) {
    case 1:
      return instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18418.length)].join(""));;
  }
};
instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return instaparse.print.combinators__GT_str.call(null, p, false);
};
instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 = function(p__18421, hidden_QMARK_) {
  var map__18422 = p__18421;
  var map__18422__$1 = (!(map__18422 == null) ? map__18422.cljs$lang$protocol_mask$partition0$ & 64 || map__18422.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18422) : map__18422;
  var p = map__18422__$1;
  var parser = cljs.core.get.call(null, map__18422__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
  var parser1 = cljs.core.get.call(null, map__18422__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422));
  var parser2 = cljs.core.get.call(null, map__18422__$1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688));
  var parsers = cljs.core.get.call(null, map__18422__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827));
  var tag = cljs.core.get.call(null, map__18422__$1, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = cljs.core.not.call(null, hidden_QMARK_);
    if (and__14319__auto__) {
      return (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(p);
    } else {
      return and__14319__auto__;
    }
  }())) {
    return [cljs.core.str("\x3c"), cljs.core.str(instaparse.print.combinators__GT_str.call(null, p, true)), cljs.core.str("\x3e")].join("");
  } else {
    var G__18424 = tag instanceof cljs.core.Keyword ? tag.fqn : null;
    switch(G__18424) {
      case "neg":
        return [cljs.core.str("!"), cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser))].join("");
        break;
      case "cat":
        return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_), parsers));
        break;
      case "ord":
        return [cljs.core.str(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_, parser1)), cljs.core.str(" / "), cljs.core.str(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_, 
        parser2))].join("");
        break;
      case "alt":
        return clojure.string.join.call(null, " | ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null], null), null), hidden_QMARK_), parsers));
        break;
      case "look":
        return [cljs.core.str("\x26"), cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser))].join("");
        break;
      case "nt":
        return cljs.core.subs.call(null, [cljs.core.str((new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(p))].join(""), 1);
        break;
      case "rep":
        if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p))) {
          return [cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)), cljs.core.str("{"), cljs.core.str((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)), cljs.core.str(","), cljs.core.str((new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p)), cljs.core.str("}")].join("");
        } else {
          return [cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)), cljs.core.str("{"), cljs.core.str((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)), cljs.core.str("}")].join("");
        }
        break;
      case "star":
        return [cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)), cljs.core.str("*")].join("");
        break;
      case "string":
        var sb__15286__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_18425_18434 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_18426_18435 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18425_18434, _STAR_print_fn_STAR_18426_18435, sb__15286__auto__, G__18424, map__18422, map__18422__$1, p, parser, parser1, parser2, parsers, tag) {
          return function(x__15287__auto__) {
            return sb__15286__auto__.append(x__15287__auto__);
          };
        }(_STAR_print_newline_STAR_18425_18434, _STAR_print_fn_STAR_18426_18435, sb__15286__auto__, G__18424, map__18422, map__18422__$1, p, parser, parser1, parser2, parsers, tag);
        try {
          cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18426_18435;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18425_18434;
        }
        return [cljs.core.str(sb__15286__auto__)].join("");
        break;
      case "regexp":
        return instaparse.print.regexp__GT_str.call(null, (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(p));
        break;
      case "plus":
        return [cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)), cljs.core.str("+")].join("");
        break;
      case "epsilon":
        return "\u03b5";
        break;
      case "string-ci":
        var sb__15286__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_18427_18436 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_18428_18437 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18427_18436, _STAR_print_fn_STAR_18428_18437, sb__15286__auto__, G__18424, map__18422, map__18422__$1, p, parser, parser1, parser2, parsers, tag) {
          return function(x__15287__auto__) {
            return sb__15286__auto__.append(x__15287__auto__);
          };
        }(_STAR_print_newline_STAR_18427_18436, _STAR_print_fn_STAR_18428_18437, sb__15286__auto__, G__18424, map__18422, map__18422__$1, p, parser, parser1, parser2, parsers, tag);
        try {
          cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18428_18437;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18427_18436;
        }
        return [cljs.core.str(sb__15286__auto__)].join("");
        break;
      case "char":
        return instaparse.print.char_range__GT_str.call(null, p);
        break;
      case "opt":
        return [cljs.core.str(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)), cljs.core.str("?")].join("");
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(tag)].join(""));;
    }
  }
};
instaparse.print.combinators__GT_str.cljs$lang$maxFixedArity = 2;
instaparse.print.rule__GT_str = function instaparse$print$rule__GT_str(terminal, parser) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser)), new cljs.core.Keyword(null, "raw", "raw", 1604651272))) {
    return [cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, terminal)), cljs.core.str("\x3e"), cljs.core.str(" \x3d "), cljs.core.str(instaparse.print.combinators__GT_str.call(null, parser))].join("");
  } else {
    return [cljs.core.str(cljs.core.name.call(null, terminal)), cljs.core.str(" \x3d "), cljs.core.str(instaparse.print.combinators__GT_str.call(null, parser))].join("");
  }
};
instaparse.print.Parser__GT_str = function instaparse$print$Parser__GT_str(p__18438) {
  var map__18449 = p__18438;
  var map__18449__$1 = (!(map__18449 == null) ? map__18449.cljs$lang$protocol_mask$partition0$ & 64 || map__18449.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18449) : map__18449;
  var grammar = cljs.core.get.call(null, map__18449__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
  var start = cljs.core.get.call(null, map__18449__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
  return clojure.string.join.call(null, "\n", cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, start, grammar.call(null, start)), function() {
    var iter__15084__auto__ = function(map__18449, map__18449__$1, grammar, start) {
      return function instaparse$print$Parser__GT_str_$_iter__18451(s__18452) {
        return new cljs.core.LazySeq(null, function(map__18449, map__18449__$1, grammar, start) {
          return function() {
            var s__18452__$1 = s__18452;
            while (true) {
              var temp__4425__auto__ = cljs.core.seq.call(null, s__18452__$1);
              if (temp__4425__auto__) {
                var s__18452__$2 = temp__4425__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__18452__$2)) {
                  var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18452__$2);
                  var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
                  var b__18454 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
                  if (function() {
                    var i__18453 = 0;
                    while (true) {
                      if (i__18453 < size__15083__auto__) {
                        var vec__18457 = cljs.core._nth.call(null, c__15082__auto__, i__18453);
                        var terminal = cljs.core.nth.call(null, vec__18457, 0, null);
                        var parser = cljs.core.nth.call(null, vec__18457, 1, null);
                        if (cljs.core.not_EQ_.call(null, terminal, start)) {
                          cljs.core.chunk_append.call(null, b__18454, instaparse.print.rule__GT_str.call(null, terminal, parser));
                          var G__18459 = i__18453 + 1;
                          i__18453 = G__18459;
                          continue;
                        } else {
                          var G__18460 = i__18453 + 1;
                          i__18453 = G__18460;
                          continue;
                        }
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18454), instaparse$print$Parser__GT_str_$_iter__18451.call(null, cljs.core.chunk_rest.call(null, s__18452__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18454), null);
                  }
                } else {
                  var vec__18458 = cljs.core.first.call(null, s__18452__$2);
                  var terminal = cljs.core.nth.call(null, vec__18458, 0, null);
                  var parser = cljs.core.nth.call(null, vec__18458, 1, null);
                  if (cljs.core.not_EQ_.call(null, terminal, start)) {
                    return cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, terminal, parser), instaparse$print$Parser__GT_str_$_iter__18451.call(null, cljs.core.rest.call(null, s__18452__$2)));
                  } else {
                    var G__18461 = cljs.core.rest.call(null, s__18452__$2);
                    s__18452__$1 = G__18461;
                    continue;
                  }
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(map__18449, map__18449__$1, grammar, start), null, null);
      };
    }(map__18449, map__18449__$1, grammar, start);
    return iter__15084__auto__.call(null, grammar);
  }()));
};
goog.provide("goog.i18n.uChar");
goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_ = 65536;
goog.i18n.uChar.CODE_POINT_MAX_VALUE_ = 1114111;
goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ = 55296;
goog.i18n.uChar.LEAD_SURROGATE_MAX_VALUE_ = 56319;
goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_ = 56320;
goog.i18n.uChar.TRAIL_SURROGATE_MAX_VALUE_ = 57343;
goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_ = 10;
goog.i18n.uChar.toHexString = function(ch) {
  var chCode = goog.i18n.uChar.toCharCode(ch);
  var chCodeStr = "U+" + goog.i18n.uChar.padString_(chCode.toString(16).toUpperCase(), 4, "0");
  return chCodeStr;
};
goog.i18n.uChar.padString_ = function(str, length, ch) {
  while (str.length < length) {
    str = ch + str;
  }
  return str;
};
goog.i18n.uChar.toCharCode = function(ch) {
  return goog.i18n.uChar.getCodePointAround(ch, 0);
};
goog.i18n.uChar.fromCharCode = function(code) {
  if (!goog.isDefAndNotNull(code) || !(code >= 0 && code <= goog.i18n.uChar.CODE_POINT_MAX_VALUE_)) {
    return null;
  }
  if (goog.i18n.uChar.isSupplementaryCodePoint(code)) {
    var leadBits = code >> goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_;
    var trailBits = code & (1 << goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_) - 1;
    var leadCodePoint = leadBits + (goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ - (goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_ >> goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_));
    var trailCodePoint = trailBits + goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_;
    return String.fromCharCode(leadCodePoint) + String.fromCharCode(trailCodePoint);
  }
  return String.fromCharCode(code);
};
goog.i18n.uChar.getCodePointAround = function(string, index) {
  var charCode = string.charCodeAt(index);
  if (goog.i18n.uChar.isLeadSurrogateCodePoint(charCode) && index + 1 < string.length) {
    var trail = string.charCodeAt(index + 1);
    if (goog.i18n.uChar.isTrailSurrogateCodePoint(trail)) {
      return (goog.i18n.uChar.buildSupplementaryCodePoint(charCode, trail));
    }
  } else {
    if (goog.i18n.uChar.isTrailSurrogateCodePoint(charCode) && index > 0) {
      var lead = string.charCodeAt(index - 1);
      if (goog.i18n.uChar.isLeadSurrogateCodePoint(lead)) {
        return (-goog.i18n.uChar.buildSupplementaryCodePoint(lead, charCode));
      }
    }
  }
  return charCode;
};
goog.i18n.uChar.charCount = function(codePoint) {
  return goog.i18n.uChar.isSupplementaryCodePoint(codePoint) ? 2 : 1;
};
goog.i18n.uChar.isSupplementaryCodePoint = function(codePoint) {
  return codePoint >= goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_ && codePoint <= goog.i18n.uChar.CODE_POINT_MAX_VALUE_;
};
goog.i18n.uChar.isLeadSurrogateCodePoint = function(codePoint) {
  return codePoint >= goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ && codePoint <= goog.i18n.uChar.LEAD_SURROGATE_MAX_VALUE_;
};
goog.i18n.uChar.isTrailSurrogateCodePoint = function(codePoint) {
  return codePoint >= goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_ && codePoint <= goog.i18n.uChar.TRAIL_SURROGATE_MAX_VALUE_;
};
goog.i18n.uChar.buildSupplementaryCodePoint = function(lead, trail) {
  if (goog.i18n.uChar.isLeadSurrogateCodePoint(lead) && goog.i18n.uChar.isTrailSurrogateCodePoint(trail)) {
    var shiftedLeadOffset = (lead << goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_) - (goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ << goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_);
    var trailOffset = trail - goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_ + goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_;
    return shiftedLeadOffset + trailOffset;
  }
  return null;
};
goog.provide("instaparse.failure");
goog.require("cljs.core");
goog.require("instaparse.print");
instaparse.failure.index__GT_line_column = function instaparse$failure$index__GT_line_column(index, text) {
  var line = 1;
  var col = 1;
  var counter = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, index, counter)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), col], null);
    } else {
      if (cljs.core._EQ_.call(null, "\n", cljs.core.get.call(null, text, counter))) {
        var G__18052 = line + 1;
        var G__18053 = 1;
        var G__18054 = counter + 1;
        line = G__18052;
        col = G__18053;
        counter = G__18054;
        continue;
      } else {
        var G__18055 = line;
        var G__18056 = col + 1;
        var G__18057 = counter + 1;
        line = G__18055;
        col = G__18056;
        counter = G__18057;
        continue;
      }
    }
    break;
  }
};
instaparse.failure.newline_chars_QMARK_ = function instaparse$failure$newline_chars_QMARK_(c) {
  return cljs.core.boolean$.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["\n", null, "\r", null], null), null)).call(null, c));
};
instaparse.failure.line_seq = function instaparse$failure$line_seq(s) {
  if (cljs.core.empty_QMARK_.call(null, s)) {
    return null;
  } else {
    return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.mapcat.call(null, function(coll) {
      if (cljs.core.truth_(instaparse.failure.newline_chars_QMARK_.call(null, cljs.core.first.call(null, coll)))) {
        return cljs.core.map.call(null, cljs.core.constantly.call(null, cljs.core.PersistentVector.EMPTY), coll);
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, coll);
      }
    }, cljs.core.partition_by.call(null, instaparse.failure.newline_chars_QMARK_, clojure.string.replace.call(null, s, "\r\n", "\n"))));
  }
};
instaparse.failure.get_line = function instaparse$failure$get_line(n, text) {
  try {
    return cljs.core.nth.call(null, instaparse.failure.line_seq.call(null, text), n - 1);
  } catch (e18059) {
    if (e18059 instanceof Error) {
      var e = e18059;
      return "";
    } else {
      throw e18059;
    }
  }
};
instaparse.failure.marker = function instaparse$failure$marker(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    if (n <= 1) {
      return "^";
    } else {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.concat.call(null, cljs.core.repeat.call(null, n - 1, " "), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null)));
    }
  } else {
    return null;
  }
};
instaparse.failure.augment_failure = function instaparse$failure$augment_failure(failure, text) {
  var lc = instaparse.failure.index__GT_line_column.call(null, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure), text);
  return cljs.core.merge.call(null, failure, lc, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", -1790561697), instaparse.failure.get_line.call(null, (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(lc), text)], null));
};
instaparse.failure.print_reason = function instaparse$failure$print_reason(r) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r))) {
    cljs.core.print.call(null, "NOT ");
    return cljs.core.print.call(null, (new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "char-range", "char-range", 1443391389)).cljs$core$IFn$_invoke$arity$1(r))) {
      return cljs.core.print.call(null, instaparse.print.char_range__GT_str.call(null, r));
    } else {
      if (r instanceof RegExp) {
        return cljs.core.print.call(null, instaparse.print.regexp__GT_str.call(null, r));
      } else {
        return cljs.core.pr.call(null, r);
      }
    }
  }
};
instaparse.failure.pprint_failure = function instaparse$failure$pprint_failure(p__18060) {
  var map__18071 = p__18060;
  var map__18071__$1 = (!(map__18071 == null) ? map__18071.cljs$lang$protocol_mask$partition0$ & 64 || map__18071.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18071) : map__18071;
  var line = cljs.core.get.call(null, map__18071__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var column = cljs.core.get.call(null, map__18071__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  var text = cljs.core.get.call(null, map__18071__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var reason = cljs.core.get.call(null, map__18071__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759));
  cljs.core.println.call(null, "Parse error at line", line, ", column", column, ":\n");
  cljs.core.println.call(null, text);
  cljs.core.println.call(null, instaparse.failure.marker.call(null, column));
  var full_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, new cljs.core.Keyword(null, "full", "full", 436801220), reason)));
  var partial_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, cljs.core.complement.call(null, new cljs.core.Keyword(null, "full", "full", 436801220)), reason)));
  var total = cljs.core.count.call(null, full_reasons) + cljs.core.count.call(null, partial_reasons);
  if (total === 0) {
  } else {
    if (cljs.core._EQ_.call(null, 1, total)) {
      cljs.core.println.call(null, "Expected:");
    } else {
      cljs.core.println.call(null, "Expected one of:");
    }
  }
  var seq__18073_18081 = cljs.core.seq.call(null, full_reasons);
  var chunk__18074_18082 = null;
  var count__18075_18083 = 0;
  var i__18076_18084 = 0;
  while (true) {
    if (i__18076_18084 < count__18075_18083) {
      var r_18085 = cljs.core._nth.call(null, chunk__18074_18082, i__18076_18084);
      instaparse.failure.print_reason.call(null, r_18085);
      cljs.core.println.call(null, " (followed by end-of-string)");
      var G__18086 = seq__18073_18081;
      var G__18087 = chunk__18074_18082;
      var G__18088 = count__18075_18083;
      var G__18089 = i__18076_18084 + 1;
      seq__18073_18081 = G__18086;
      chunk__18074_18082 = G__18087;
      count__18075_18083 = G__18088;
      i__18076_18084 = G__18089;
      continue;
    } else {
      var temp__4425__auto___18090 = cljs.core.seq.call(null, seq__18073_18081);
      if (temp__4425__auto___18090) {
        var seq__18073_18091__$1 = temp__4425__auto___18090;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18073_18091__$1)) {
          var c__15115__auto___18092 = cljs.core.chunk_first.call(null, seq__18073_18091__$1);
          var G__18093 = cljs.core.chunk_rest.call(null, seq__18073_18091__$1);
          var G__18094 = c__15115__auto___18092;
          var G__18095 = cljs.core.count.call(null, c__15115__auto___18092);
          var G__18096 = 0;
          seq__18073_18081 = G__18093;
          chunk__18074_18082 = G__18094;
          count__18075_18083 = G__18095;
          i__18076_18084 = G__18096;
          continue;
        } else {
          var r_18097 = cljs.core.first.call(null, seq__18073_18091__$1);
          instaparse.failure.print_reason.call(null, r_18097);
          cljs.core.println.call(null, " (followed by end-of-string)");
          var G__18098 = cljs.core.next.call(null, seq__18073_18091__$1);
          var G__18099 = null;
          var G__18100 = 0;
          var G__18101 = 0;
          seq__18073_18081 = G__18098;
          chunk__18074_18082 = G__18099;
          count__18075_18083 = G__18100;
          i__18076_18084 = G__18101;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__18077 = cljs.core.seq.call(null, partial_reasons);
  var chunk__18078 = null;
  var count__18079 = 0;
  var i__18080 = 0;
  while (true) {
    if (i__18080 < count__18079) {
      var r = cljs.core._nth.call(null, chunk__18078, i__18080);
      instaparse.failure.print_reason.call(null, r);
      cljs.core.println.call(null);
      var G__18102 = seq__18077;
      var G__18103 = chunk__18078;
      var G__18104 = count__18079;
      var G__18105 = i__18080 + 1;
      seq__18077 = G__18102;
      chunk__18078 = G__18103;
      count__18079 = G__18104;
      i__18080 = G__18105;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__18077);
      if (temp__4425__auto__) {
        var seq__18077__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18077__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first.call(null, seq__18077__$1);
          var G__18106 = cljs.core.chunk_rest.call(null, seq__18077__$1);
          var G__18107 = c__15115__auto__;
          var G__18108 = cljs.core.count.call(null, c__15115__auto__);
          var G__18109 = 0;
          seq__18077 = G__18106;
          chunk__18078 = G__18107;
          count__18079 = G__18108;
          i__18080 = G__18109;
          continue;
        } else {
          var r = cljs.core.first.call(null, seq__18077__$1);
          instaparse.failure.print_reason.call(null, r);
          cljs.core.println.call(null);
          var G__18110 = cljs.core.next.call(null, seq__18077__$1);
          var G__18111 = null;
          var G__18112 = 0;
          var G__18113 = 0;
          seq__18077 = G__18110;
          chunk__18078 = G__18111;
          count__18079 = G__18112;
          i__18080 = G__18113;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
goog.provide("instaparse.gll");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.auto_flatten_seq");
goog.require("goog.i18n.uChar");
goog.require("instaparse.print");
goog.require("instaparse.reduction");
goog.require("instaparse.failure");
instaparse.gll.ISegment = {};
instaparse.gll.subsegment = function instaparse$gll$subsegment(this$, start_index, end_index_minus_one) {
  if (!(this$ == null) && !(this$.instaparse$gll$ISegment$subsegment$arity$3 == null)) {
    return this$.instaparse$gll$ISegment$subsegment$arity$3(this$, start_index, end_index_minus_one);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = instaparse.gll.subsegment[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$, start_index, end_index_minus_one);
    } else {
      var m__14968__auto____$1 = instaparse.gll.subsegment["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$, start_index, end_index_minus_one);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISegment.subsegment", this$);
      }
    }
  }
};
instaparse.gll.toString = function instaparse$gll$toString(this$) {
  if (!(this$ == null) && !(this$.instaparse$gll$ISegment$toString$arity$1 == null)) {
    return this$.instaparse$gll$ISegment$toString$arity$1(this$);
  } else {
    var x__14967__auto__ = this$ == null ? null : this$;
    var m__14968__auto__ = instaparse.gll.toString[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, this$);
    } else {
      var m__14968__auto____$1 = instaparse.gll.toString["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISegment.toString", this$);
      }
    }
  }
};
instaparse.gll.Segment = function(text, offset, count) {
  this.text = text;
  this.offset = offset;
  this.count = count;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$ = true;
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$subsegment$arity$3 = function(this$, start, end) {
  var self__ = this;
  var this$__$1 = this;
  return new instaparse.gll.Segment(self__.text, self__.offset + start, end - start);
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$toString$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.subs.call(null, self__.text, self__.offset, self__.offset + self__.count);
};
instaparse.gll.Segment.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.count;
};
instaparse.gll.Segment.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "text", "text", -150030170, null), new cljs.core.Symbol(null, "offset", "offset", 1937029838, null), new cljs.core.Symbol(null, "count", "count", -514511684, null)], null);
};
instaparse.gll.Segment.cljs$lang$type = true;
instaparse.gll.Segment.cljs$lang$ctorStr = "instaparse.gll/Segment";
instaparse.gll.Segment.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write.call(null, writer__14911__auto__, "instaparse.gll/Segment");
};
instaparse.gll.__GT_Segment = function instaparse$gll$__GT_Segment(text, offset, count) {
  return new instaparse.gll.Segment(text, offset, count);
};
instaparse.gll.get_parser = function instaparse$gll$get_parser(grammar, p) {
  return cljs.core.get.call(null, grammar, p, p);
};
instaparse.gll._parse = function instaparse$gll$_parse(parser, index, tramp) {
  var G__17790 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__17790) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_parse.call(null, parser, index, tramp);
      break;
    case "char":
      return instaparse.gll.char_range_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser))].join(""));;
  }
};
instaparse.gll._full_parse = function instaparse$gll$_full_parse(parser, index, tramp) {
  var G__17793 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__17793) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_full_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_full_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_full_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_full_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_full_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_full_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_full_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_full_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_full_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_full_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_full_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_full_parse.call(null, parser, index, tramp);
      break;
    case "char":
      return instaparse.gll.char_range_full_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_full_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser))].join(""));;
  }
};
instaparse.gll.Failure = function(index, reason, __meta, __extmap, __hash) {
  this.index = index;
  this.reason = reason;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__14926__auto__, k__14927__auto__) {
  var self__ = this;
  var this__14926__auto____$1 = this;
  return cljs.core._lookup.call(null, this__14926__auto____$1, k__14927__auto__, null);
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__14928__auto__, k17796, else__14929__auto__) {
  var self__ = this;
  var this__14928__auto____$1 = this;
  var G__17798 = k17796 instanceof cljs.core.Keyword ? k17796.fqn : null;
  switch(G__17798) {
    case "index":
      return self__.index;
      break;
    case "reason":
      return self__.reason;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k17796, else__14929__auto__);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__14940__auto__, writer__14941__auto__, opts__14942__auto__) {
  var self__ = this;
  var this__14940__auto____$1 = this;
  var pr_pair__14943__auto__ = function(this__14940__auto____$1) {
    return function(keyval__14944__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, cljs.core.pr_writer, "", " ", "", opts__14942__auto__, keyval__14944__auto__);
    };
  }(this__14940__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, pr_pair__14943__auto__, "#instaparse.gll.Failure{", ", ", "}", opts__14942__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IIterable$ = true;
instaparse.gll.Failure.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__17795) {
  var self__ = this;
  var G__17795__$1 = this;
  return new cljs.core.RecordIter(0, G__17795__$1, 2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "reason", "reason", -2070751759)], null), cljs.core._iterator.call(null, self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__14924__auto__) {
  var self__ = this;
  var this__14924__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Failure.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__14920__auto__) {
  var self__ = this;
  var this__14920__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICounted$_count$arity$1 = function(this__14930__auto__) {
  var self__ = this;
  var this__14930__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Failure.prototype.cljs$core$IHash$_hash$arity$1 = function(this__14921__auto__) {
  var self__ = this;
  var this__14921__auto____$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_imap.call(null, this__14921__auto____$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__14922__auto__, other__14923__auto__) {
  var self__ = this;
  var this__14922__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = other__14923__auto__;
    if (cljs.core.truth_(and__14319__auto__)) {
      var and__14319__auto____$1 = this__14922__auto____$1.constructor === other__14923__auto__.constructor;
      if (and__14319__auto____$1) {
        return cljs.core.equiv_map.call(null, this__14922__auto____$1, other__14923__auto__);
      } else {
        return and__14319__auto____$1;
      }
    } else {
      return and__14319__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__14935__auto__, k__14936__auto__) {
  var self__ = this;
  var this__14935__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "index", "index", -1531685915), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null], null), null), k__14936__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__14935__auto____$1), self__.__meta), k__14936__auto__);
  } else {
    return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__14936__auto__)), null);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__14933__auto__, k__14934__auto__, G__17795) {
  var self__ = this;
  var this__14933__auto____$1 = this;
  var pred__17799 = cljs.core.keyword_identical_QMARK_;
  var expr__17800 = k__14934__auto__;
  if (cljs.core.truth_(pred__17799.call(null, new cljs.core.Keyword(null, "index", "index", -1531685915), expr__17800))) {
    return new instaparse.gll.Failure(G__17795, self__.reason, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__17799.call(null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), expr__17800))) {
      return new instaparse.gll.Failure(self__.index, G__17795, self__.__meta, self__.__extmap, null);
    } else {
      return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__14934__auto__, G__17795), null);
    }
  }
};
instaparse.gll.Failure.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__14938__auto__) {
  var self__ = this;
  var this__14938__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__14925__auto__, G__17795) {
  var self__ = this;
  var this__14925__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, G__17795, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__14931__auto__, entry__14932__auto__) {
  var self__ = this;
  var this__14931__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__14932__auto__)) {
    return cljs.core._assoc.call(null, this__14931__auto____$1, cljs.core._nth.call(null, entry__14932__auto__, 0), cljs.core._nth.call(null, entry__14932__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__14931__auto____$1, entry__14932__auto__);
  }
};
instaparse.gll.Failure.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "index", "index", 108845612, null), new cljs.core.Symbol(null, "reason", "reason", -430220232, null)], null);
};
instaparse.gll.Failure.cljs$lang$type = true;
instaparse.gll.Failure.cljs$lang$ctorPrSeq = function(this__14960__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Failure");
};
instaparse.gll.Failure.cljs$lang$ctorPrWriter = function(this__14960__auto__, writer__14961__auto__) {
  return cljs.core._write.call(null, writer__14961__auto__, "instaparse.gll/Failure");
};
instaparse.gll.__GT_Failure = function instaparse$gll$__GT_Failure(index, reason) {
  return new instaparse.gll.Failure(index, reason, null, null, null);
};
instaparse.gll.map__GT_Failure = function instaparse$gll$map__GT_Failure(G__17797) {
  return new instaparse.gll.Failure((new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(G__17797), (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(G__17797), null, cljs.core.dissoc.call(null, G__17797, new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "reason", "reason", -2070751759)), null);
};
instaparse.gll.Failure.prototype.cljs$core$IPrintWithWriter$ = true;
instaparse.gll.Failure.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(fail, writer, _) {
  var fail__$1 = this;
  return cljs.core._write.call(null, writer, function() {
    var sb__15286__auto__ = new goog.string.StringBuffer;
    var _STAR_print_newline_STAR_17803_17805 = cljs.core._STAR_print_newline_STAR_;
    var _STAR_print_fn_STAR_17804_17806 = cljs.core._STAR_print_fn_STAR_;
    cljs.core._STAR_print_newline_STAR_ = true;
    cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_17803_17805, _STAR_print_fn_STAR_17804_17806, sb__15286__auto__, fail__$1) {
      return function(x__15287__auto__) {
        return sb__15286__auto__.append(x__15287__auto__);
      };
    }(_STAR_print_newline_STAR_17803_17805, _STAR_print_fn_STAR_17804_17806, sb__15286__auto__, fail__$1);
    try {
      instaparse.failure.pprint_failure.call(null, fail__$1);
    } finally {
      cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_17804_17806;
      cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_17803_17805;
    }
    return [cljs.core.str(sb__15286__auto__)].join("");
  }());
};
instaparse.gll.text__GT_segment = function instaparse$gll$text__GT_segment(s) {
  return new instaparse.gll.Segment(s, 0, cljs.core.count.call(null, s));
};
instaparse.gll.Tramp = function(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure, __meta, __extmap, __hash) {
  this.grammar = grammar;
  this.text = text;
  this.segment = segment;
  this.fail_index = fail_index;
  this.node_builder = node_builder;
  this.stack = stack;
  this.next_stack = next_stack;
  this.generation = generation;
  this.negative_listeners = negative_listeners;
  this.msg_cache = msg_cache;
  this.nodes = nodes;
  this.success = success;
  this.failure = failure;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__14926__auto__, k__14927__auto__) {
  var self__ = this;
  var this__14926__auto____$1 = this;
  return cljs.core._lookup.call(null, this__14926__auto____$1, k__14927__auto__, null);
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__14928__auto__, k17808, else__14929__auto__) {
  var self__ = this;
  var this__14928__auto____$1 = this;
  var G__17810 = k17808 instanceof cljs.core.Keyword ? k17808.fqn : null;
  switch(G__17810) {
    case "msg-cache":
      return self__.msg_cache;
      break;
    case "negative-listeners":
      return self__.negative_listeners;
      break;
    case "generation":
      return self__.generation;
      break;
    case "failure":
      return self__.failure;
      break;
    case "fail-index":
      return self__.fail_index;
      break;
    case "grammar":
      return self__.grammar;
      break;
    case "success":
      return self__.success;
      break;
    case "nodes":
      return self__.nodes;
      break;
    case "node-builder":
      return self__.node_builder;
      break;
    case "segment":
      return self__.segment;
      break;
    case "stack":
      return self__.stack;
      break;
    case "next-stack":
      return self__.next_stack;
      break;
    case "text":
      return self__.text;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k17808, else__14929__auto__);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__14940__auto__, writer__14941__auto__, opts__14942__auto__) {
  var self__ = this;
  var this__14940__auto____$1 = this;
  var pr_pair__14943__auto__ = function(this__14940__auto____$1) {
    return function(keyval__14944__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, cljs.core.pr_writer, "", " ", "", opts__14942__auto__, keyval__14944__auto__);
    };
  }(this__14940__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, pr_pair__14943__auto__, "#instaparse.gll.Tramp{", ", ", "}", opts__14942__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IIterable$ = true;
instaparse.gll.Tramp.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__17807) {
  var self__ = this;
  var G__17807__$1 = this;
  return new cljs.core.RecordIter(0, G__17807__$1, 13, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "segment", "segment", -964921196), new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), new cljs.core.Keyword(null, "stack", 
  "stack", -793405930), new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), new cljs.core.Keyword(null, "generation", "generation", -2132542044), new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "failure", "failure", 720415879)], null), 
  cljs.core._iterator.call(null, self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__14924__auto__) {
  var self__ = this;
  var this__14924__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Tramp.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__14920__auto__) {
  var self__ = this;
  var this__14920__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICounted$_count$arity$1 = function(this__14930__auto__) {
  var self__ = this;
  var this__14930__auto____$1 = this;
  return 13 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Tramp.prototype.cljs$core$IHash$_hash$arity$1 = function(this__14921__auto__) {
  var self__ = this;
  var this__14921__auto____$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_imap.call(null, this__14921__auto____$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__14922__auto__, other__14923__auto__) {
  var self__ = this;
  var this__14922__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = other__14923__auto__;
    if (cljs.core.truth_(and__14319__auto__)) {
      var and__14319__auto____$1 = this__14922__auto____$1.constructor === other__14923__auto__.constructor;
      if (and__14319__auto____$1) {
        return cljs.core.equiv_map.call(null, this__14922__auto____$1, other__14923__auto__);
      } else {
        return and__14319__auto____$1;
      }
    } else {
      return and__14319__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__14935__auto__, k__14936__auto__) {
  var self__ = this;
  var this__14935__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), null, new cljs.core.Keyword(null, "failure", "failure", 720415879), null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), null, 
  new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "success", "success", 1890645906), null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), null, new cljs.core.Keyword(null, "segment", "segment", -964921196), null, new cljs.core.Keyword(null, "stack", "stack", -793405930), null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), null, new cljs.core.Keyword(null, 
  "text", "text", -1790561697), null], null), null), k__14936__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__14935__auto____$1), self__.__meta), k__14936__auto__);
  } else {
    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__14936__auto__)), null);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__14933__auto__, k__14934__auto__, G__17807) {
  var self__ = this;
  var this__14933__auto____$1 = this;
  var pred__17811 = cljs.core.keyword_identical_QMARK_;
  var expr__17812 = k__14934__auto__;
  if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__17812))) {
    return new instaparse.gll.Tramp(G__17807, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), expr__17812))) {
      return new instaparse.gll.Tramp(self__.grammar, G__17807, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "segment", "segment", -964921196), expr__17812))) {
        return new instaparse.gll.Tramp(self__.grammar, self__.text, G__17807, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), expr__17812))) {
          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, G__17807, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), expr__17812))) {
            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, G__17807, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "stack", "stack", -793405930), expr__17812))) {
              return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, G__17807, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), expr__17812))) {
                return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, G__17807, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), expr__17812))) {
                  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, G__17807, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), expr__17812))) {
                    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, G__17807, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), expr__17812))) {
                      return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, G__17807, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                    } else {
                      if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), expr__17812))) {
                        return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, G__17807, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                      } else {
                        if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "success", "success", 1890645906), expr__17812))) {
                          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, G__17807, self__.failure, self__.__meta, self__.__extmap, null);
                        } else {
                          if (cljs.core.truth_(pred__17811.call(null, new cljs.core.Keyword(null, "failure", "failure", 720415879), expr__17812))) {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, G__17807, self__.__meta, self__.__extmap, null);
                          } else {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__14934__auto__, G__17807), null);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__14938__auto__) {
  var self__ = this;
  var this__14938__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__14925__auto__, G__17807) {
  var self__ = this;
  var this__14925__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, G__17807, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__14931__auto__, entry__14932__auto__) {
  var self__ = this;
  var this__14931__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__14932__auto__)) {
    return cljs.core._assoc.call(null, this__14931__auto____$1, cljs.core._nth.call(null, entry__14932__auto__, 0), cljs.core._nth.call(null, entry__14932__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__14931__auto____$1, entry__14932__auto__);
  }
};
instaparse.gll.Tramp.getBasis = function() {
  return new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "grammar", "grammar", -773107502, null), new cljs.core.Symbol(null, "text", "text", -150030170, null), new cljs.core.Symbol(null, "segment", "segment", 675610331, null), new cljs.core.Symbol(null, "fail-index", "fail-index", 1889258450, null), new cljs.core.Symbol(null, "node-builder", "node-builder", -316031078, null), cljs.core.with_meta(new cljs.core.Symbol(null, "stack", "stack", 
  847125597, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-stack", "next-stack", 1158600799, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "generation", "generation", -492010517, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "negative-listeners", "negative-listeners", 1695772619, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], 
  null)), cljs.core.with_meta(new cljs.core.Symbol(null, "msg-cache", "msg-cache", 906756457, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", 
  -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "success", "success", -763789863, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "failure", "failure", -1934019890, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "mutable", "mutable", -1778657503, null)], null))], null);
};
instaparse.gll.Tramp.cljs$lang$type = true;
instaparse.gll.Tramp.cljs$lang$ctorPrSeq = function(this__14960__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Tramp");
};
instaparse.gll.Tramp.cljs$lang$ctorPrWriter = function(this__14960__auto__, writer__14961__auto__) {
  return cljs.core._write.call(null, writer__14961__auto__, "instaparse.gll/Tramp");
};
instaparse.gll.__GT_Tramp = function instaparse$gll$__GT_Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure) {
  return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure, null, null, null);
};
instaparse.gll.map__GT_Tramp = function instaparse$gll$map__GT_Tramp(G__17809) {
  return new instaparse.gll.Tramp((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "node-builder", "node-builder", 
  -1956562605)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "stack", "stack", -793405930)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "generation", "generation", -2132542044)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092)).cljs$core$IFn$_invoke$arity$1(G__17809), 
  (new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "success", "success", 1890645906)).cljs$core$IFn$_invoke$arity$1(G__17809), (new cljs.core.Keyword(null, "failure", "failure", 720415879)).cljs$core$IFn$_invoke$arity$1(G__17809), null, cljs.core.dissoc.call(null, G__17809, new cljs.core.Keyword(null, "grammar", 
  "grammar", 1881328267), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "segment", "segment", -964921196), new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), new cljs.core.Keyword(null, "stack", "stack", -793405930), new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), new cljs.core.Keyword(null, "generation", "generation", -2132542044), new cljs.core.Keyword(null, 
  "negative-listeners", "negative-listeners", 55241092), new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "failure", "failure", 720415879)), null);
};
instaparse.gll.make_tramp = function instaparse$gll$make_tramp() {
  var args17815 = [];
  var len__15370__auto___17818 = arguments.length;
  var i__15371__auto___17819 = 0;
  while (true) {
    if (i__15371__auto___17819 < len__15370__auto___17818) {
      args17815.push(arguments[i__15371__auto___17819]);
      var G__17820 = i__15371__auto___17819 + 1;
      i__15371__auto___17819 = G__17820;
      continue;
    } else {
    }
    break;
  }
  var G__17817 = args17815.length;
  switch(G__17817) {
    case 2:
      return instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17815.length)].join(""));;
  }
};
instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$2 = function(grammar, text) {
  return instaparse.gll.make_tramp.call(null, grammar, text, instaparse.gll.text__GT_segment.call(null, text), -1, null);
};
instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$3 = function(grammar, text, segment) {
  return instaparse.gll.make_tramp.call(null, grammar, text, segment, -1, null);
};
instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$4 = function(grammar, text, fail_index, node_builder) {
  return instaparse.gll.make_tramp.call(null, grammar, text, instaparse.gll.text__GT_segment.call(null, text), fail_index, node_builder);
};
instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$5 = function(grammar, text, segment, fail_index, node_builder) {
  return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, 0, cljs.core.sorted_map_by.call(null, cljs.core._GT_), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, null, new instaparse.gll.Failure(0, cljs.core.PersistentVector.EMPTY, null, null, null), null, null, null);
};
instaparse.gll.make_tramp.cljs$lang$maxFixedArity = 5;
instaparse.gll.make_success = function instaparse$gll$make_success(result, index) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 1415092211), result, new cljs.core.Keyword(null, "index", "index", -1531685915), index], null);
};
instaparse.gll.total_success_QMARK_ = function instaparse$gll$total_success_QMARK_(tramp, s) {
  return cljs.core._EQ_.call(null, cljs.core.count.call(null, tramp.text), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(s));
};
instaparse.gll.Node = function(listeners, full_listeners, results, full_results, __meta, __extmap, __hash) {
  this.listeners = listeners;
  this.full_listeners = full_listeners;
  this.results = results;
  this.full_results = full_results;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__14926__auto__, k__14927__auto__) {
  var self__ = this;
  var this__14926__auto____$1 = this;
  return cljs.core._lookup.call(null, this__14926__auto____$1, k__14927__auto__, null);
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__14928__auto__, k17823, else__14929__auto__) {
  var self__ = this;
  var this__14928__auto____$1 = this;
  var G__17825 = k17823 instanceof cljs.core.Keyword ? k17823.fqn : null;
  switch(G__17825) {
    case "listeners":
      return self__.listeners;
      break;
    case "full-listeners":
      return self__.full_listeners;
      break;
    case "results":
      return self__.results;
      break;
    case "full-results":
      return self__.full_results;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k17823, else__14929__auto__);
  }
};
instaparse.gll.Node.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__14940__auto__, writer__14941__auto__, opts__14942__auto__) {
  var self__ = this;
  var this__14940__auto____$1 = this;
  var pr_pair__14943__auto__ = function(this__14940__auto____$1) {
    return function(keyval__14944__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, cljs.core.pr_writer, "", " ", "", opts__14942__auto__, keyval__14944__auto__);
    };
  }(this__14940__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, pr_pair__14943__auto__, "#instaparse.gll.Node{", ", ", "}", opts__14942__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IIterable$ = true;
instaparse.gll.Node.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__17822) {
  var self__ = this;
  var G__17822__$1 = this;
  return new cljs.core.RecordIter(0, G__17822__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), new cljs.core.Keyword(null, "results", "results", -1134170113), new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)], null), cljs.core._iterator.call(null, self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__14924__auto__) {
  var self__ = this;
  var this__14924__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Node.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__14920__auto__) {
  var self__ = this;
  var this__14920__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICounted$_count$arity$1 = function(this__14930__auto__) {
  var self__ = this;
  var this__14930__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Node.prototype.cljs$core$IHash$_hash$arity$1 = function(this__14921__auto__) {
  var self__ = this;
  var this__14921__auto____$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_imap.call(null, this__14921__auto____$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
instaparse.gll.Node.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__14922__auto__, other__14923__auto__) {
  var self__ = this;
  var this__14922__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = other__14923__auto__;
    if (cljs.core.truth_(and__14319__auto__)) {
      var and__14319__auto____$1 = this__14922__auto____$1.constructor === other__14923__auto__.constructor;
      if (and__14319__auto____$1) {
        return cljs.core.equiv_map.call(null, this__14922__auto____$1, other__14923__auto__);
      } else {
        return and__14319__auto____$1;
      }
    } else {
      return and__14319__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Node.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__14935__auto__, k__14936__auto__) {
  var self__ = this;
  var this__14935__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), null, new cljs.core.Keyword(null, "results", "results", -1134170113), null], null), null), k__14936__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__14935__auto____$1), self__.__meta), k__14936__auto__);
  } else {
    return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__14936__auto__)), null);
  }
};
instaparse.gll.Node.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__14933__auto__, k__14934__auto__, G__17822) {
  var self__ = this;
  var this__14933__auto____$1 = this;
  var pred__17826 = cljs.core.keyword_identical_QMARK_;
  var expr__17827 = k__14934__auto__;
  if (cljs.core.truth_(pred__17826.call(null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), expr__17827))) {
    return new instaparse.gll.Node(G__17822, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__17826.call(null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), expr__17827))) {
      return new instaparse.gll.Node(self__.listeners, G__17822, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__17826.call(null, new cljs.core.Keyword(null, "results", "results", -1134170113), expr__17827))) {
        return new instaparse.gll.Node(self__.listeners, self__.full_listeners, G__17822, self__.full_results, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__17826.call(null, new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), expr__17827))) {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, G__17822, self__.__meta, self__.__extmap, null);
        } else {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__14934__auto__, G__17822), null);
        }
      }
    }
  }
};
instaparse.gll.Node.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__14938__auto__) {
  var self__ = this;
  var this__14938__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__14925__auto__, G__17822) {
  var self__ = this;
  var this__14925__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, G__17822, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__14931__auto__, entry__14932__auto__) {
  var self__ = this;
  var this__14931__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__14932__auto__)) {
    return cljs.core._assoc.call(null, this__14931__auto____$1, cljs.core._nth.call(null, entry__14932__auto__, 0), cljs.core._nth.call(null, entry__14932__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__14931__auto____$1, entry__14932__auto__);
  }
};
instaparse.gll.Node.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "listeners", "listeners", 2035075972, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "full-listeners", "full-listeners", 1691153354, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "results", "results", 506361414, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "full-results", "full-results", 140306120, null), 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "mutable", "mutable", -1778657503, null)], null))], null);
};
instaparse.gll.Node.cljs$lang$type = true;
instaparse.gll.Node.cljs$lang$ctorPrSeq = function(this__14960__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Node");
};
instaparse.gll.Node.cljs$lang$ctorPrWriter = function(this__14960__auto__, writer__14961__auto__) {
  return cljs.core._write.call(null, writer__14961__auto__, "instaparse.gll/Node");
};
instaparse.gll.__GT_Node = function instaparse$gll$__GT_Node(listeners, full_listeners, results, full_results) {
  return new instaparse.gll.Node(listeners, full_listeners, results, full_results, null, null, null);
};
instaparse.gll.map__GT_Node = function instaparse$gll$map__GT_Node(G__17824) {
  return new instaparse.gll.Node((new cljs.core.Keyword(null, "listeners", "listeners", 394544445)).cljs$core$IFn$_invoke$arity$1(G__17824), (new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827)).cljs$core$IFn$_invoke$arity$1(G__17824), (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(G__17824), (new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)).cljs$core$IFn$_invoke$arity$1(G__17824), null, cljs.core.dissoc.call(null, 
  G__17824, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), new cljs.core.Keyword(null, "results", "results", -1134170113), new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)), null);
};
instaparse.gll.make_node = function instaparse$gll$make_node() {
  return new instaparse.gll.Node(cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.EMPTY, null, null, null);
};
instaparse.gll.push_stack = function instaparse$gll$push_stack(tramp, item) {
  return tramp.stack = cljs.core.conj.call(null, tramp.stack, item);
};
instaparse.gll.push_message = function instaparse$gll$push_message(tramp, listener, result) {
  var cache = tramp.msg_cache;
  var i = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result);
  var k = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [listener, i], null);
  var c = cljs.core.get.call(null, cache, k, 0);
  var f = function(cache, i, k, c) {
    return function() {
      return listener.call(null, result);
    };
  }(cache, i, k, c);
  if (c > tramp.generation) {
    tramp.next_stack = cljs.core.conj.call(null, tramp.next_stack, f);
  } else {
    tramp.stack = cljs.core.conj.call(null, tramp.stack, f);
  }
  return tramp.msg_cache = cljs.core.assoc.call(null, tramp.msg_cache, k, c + 1);
};
instaparse.gll.listener_exists_QMARK_ = function instaparse$gll$listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4425__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var node = temp__4425__auto__;
    return cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_listener_exists_QMARK_ = function instaparse$gll$full_listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4425__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var node = temp__4425__auto__;
    return cljs.core.count.call(null, node.full_listeners) > 0 || cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.result_exists_QMARK_ = function instaparse$gll$result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4425__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var node = temp__4425__auto__;
    return cljs.core.count.call(null, node.full_results) > 0 || cljs.core.count.call(null, node.results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_result_exists_QMARK_ = function instaparse$gll$full_result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4425__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var node = temp__4425__auto__;
    return cljs.core.count.call(null, node.full_results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.node_get = function instaparse$gll$node_get(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4423__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var node = temp__4423__auto__;
    return node;
  } else {
    var node = instaparse.gll.make_node.call(null);
    tramp.nodes = cljs.core.assoc.call(null, tramp.nodes, node_key, node);
    return node;
  }
};
instaparse.gll.safe_with_meta = function instaparse$gll$safe_with_meta(obj, metamap) {
  if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 262144 || obj.cljs$core$IWithMeta$ ? true : !obj.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, obj) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, obj)) {
    return cljs.core.with_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.gll.push_result = function instaparse$gll$push_result(tramp, node_key, result) {
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  var parser = node_key.call(null, 1);
  var result__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.assoc.call(null, result, new cljs.core.Keyword(null, "result", "result", 1415092211), null) : result;
  var result__$2 = function() {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var reduction_function = temp__4423__auto__;
      return instaparse.gll.make_success.call(null, instaparse.gll.safe_with_meta.call(null, instaparse.reduction.apply_reduction.call(null, reduction_function, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(result__$1)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), node_key.call(null, 0), new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", 
      -1851404441), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1)], null)), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1));
    } else {
      return result__$1;
    }
  }();
  var total_QMARK_ = instaparse.gll.total_success_QMARK_.call(null, tramp, result__$2);
  var results = cljs.core.truth_(total_QMARK_) ? node.full_results : node.results;
  if (cljs.core.not.call(null, results.call(null, result__$2))) {
    if (cljs.core.truth_(total_QMARK_)) {
      node.full_results = cljs.core.conj.call(null, node.full_results, result__$2);
    } else {
      node.results = cljs.core.conj.call(null, node.results, result__$2);
    }
    var seq__17840_17848 = cljs.core.seq.call(null, node.listeners);
    var chunk__17841_17849 = null;
    var count__17842_17850 = 0;
    var i__17843_17851 = 0;
    while (true) {
      if (i__17843_17851 < count__17842_17850) {
        var listener_17852 = cljs.core._nth.call(null, chunk__17841_17849, i__17843_17851);
        instaparse.gll.push_message.call(null, tramp, listener_17852, result__$2);
        var G__17853 = seq__17840_17848;
        var G__17854 = chunk__17841_17849;
        var G__17855 = count__17842_17850;
        var G__17856 = i__17843_17851 + 1;
        seq__17840_17848 = G__17853;
        chunk__17841_17849 = G__17854;
        count__17842_17850 = G__17855;
        i__17843_17851 = G__17856;
        continue;
      } else {
        var temp__4425__auto___17857 = cljs.core.seq.call(null, seq__17840_17848);
        if (temp__4425__auto___17857) {
          var seq__17840_17858__$1 = temp__4425__auto___17857;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17840_17858__$1)) {
            var c__15115__auto___17859 = cljs.core.chunk_first.call(null, seq__17840_17858__$1);
            var G__17860 = cljs.core.chunk_rest.call(null, seq__17840_17858__$1);
            var G__17861 = c__15115__auto___17859;
            var G__17862 = cljs.core.count.call(null, c__15115__auto___17859);
            var G__17863 = 0;
            seq__17840_17848 = G__17860;
            chunk__17841_17849 = G__17861;
            count__17842_17850 = G__17862;
            i__17843_17851 = G__17863;
            continue;
          } else {
            var listener_17864 = cljs.core.first.call(null, seq__17840_17858__$1);
            instaparse.gll.push_message.call(null, tramp, listener_17864, result__$2);
            var G__17865 = cljs.core.next.call(null, seq__17840_17858__$1);
            var G__17866 = null;
            var G__17867 = 0;
            var G__17868 = 0;
            seq__17840_17848 = G__17865;
            chunk__17841_17849 = G__17866;
            count__17842_17850 = G__17867;
            i__17843_17851 = G__17868;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (cljs.core.truth_(total_QMARK_)) {
      var seq__17844 = cljs.core.seq.call(null, node.full_listeners);
      var chunk__17845 = null;
      var count__17846 = 0;
      var i__17847 = 0;
      while (true) {
        if (i__17847 < count__17846) {
          var listener = cljs.core._nth.call(null, chunk__17845, i__17847);
          instaparse.gll.push_message.call(null, tramp, listener, result__$2);
          var G__17869 = seq__17844;
          var G__17870 = chunk__17845;
          var G__17871 = count__17846;
          var G__17872 = i__17847 + 1;
          seq__17844 = G__17869;
          chunk__17845 = G__17870;
          count__17846 = G__17871;
          i__17847 = G__17872;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__17844);
          if (temp__4425__auto__) {
            var seq__17844__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__17844__$1)) {
              var c__15115__auto__ = cljs.core.chunk_first.call(null, seq__17844__$1);
              var G__17873 = cljs.core.chunk_rest.call(null, seq__17844__$1);
              var G__17874 = c__15115__auto__;
              var G__17875 = cljs.core.count.call(null, c__15115__auto__);
              var G__17876 = 0;
              seq__17844 = G__17873;
              chunk__17845 = G__17874;
              count__17846 = G__17875;
              i__17847 = G__17876;
              continue;
            } else {
              var listener = cljs.core.first.call(null, seq__17844__$1);
              instaparse.gll.push_message.call(null, tramp, listener, result__$2);
              var G__17877 = cljs.core.next.call(null, seq__17844__$1);
              var G__17878 = null;
              var G__17879 = 0;
              var G__17880 = 0;
              seq__17844 = G__17877;
              chunk__17845 = G__17878;
              count__17846 = G__17879;
              i__17847 = G__17880;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
instaparse.gll.push_listener = function instaparse$gll$push_listener(tramp, node_key, listener) {
  var listener_already_exists_QMARK_ = instaparse.gll.listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.listeners = cljs.core.conj.call(null, node.listeners, listener);
  var seq__17889_17897 = cljs.core.seq.call(null, node.results);
  var chunk__17890_17898 = null;
  var count__17891_17899 = 0;
  var i__17892_17900 = 0;
  while (true) {
    if (i__17892_17900 < count__17891_17899) {
      var result_17901 = cljs.core._nth.call(null, chunk__17890_17898, i__17892_17900);
      instaparse.gll.push_message.call(null, tramp, listener, result_17901);
      var G__17902 = seq__17889_17897;
      var G__17903 = chunk__17890_17898;
      var G__17904 = count__17891_17899;
      var G__17905 = i__17892_17900 + 1;
      seq__17889_17897 = G__17902;
      chunk__17890_17898 = G__17903;
      count__17891_17899 = G__17904;
      i__17892_17900 = G__17905;
      continue;
    } else {
      var temp__4425__auto___17906 = cljs.core.seq.call(null, seq__17889_17897);
      if (temp__4425__auto___17906) {
        var seq__17889_17907__$1 = temp__4425__auto___17906;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17889_17907__$1)) {
          var c__15115__auto___17908 = cljs.core.chunk_first.call(null, seq__17889_17907__$1);
          var G__17909 = cljs.core.chunk_rest.call(null, seq__17889_17907__$1);
          var G__17910 = c__15115__auto___17908;
          var G__17911 = cljs.core.count.call(null, c__15115__auto___17908);
          var G__17912 = 0;
          seq__17889_17897 = G__17909;
          chunk__17890_17898 = G__17910;
          count__17891_17899 = G__17911;
          i__17892_17900 = G__17912;
          continue;
        } else {
          var result_17913 = cljs.core.first.call(null, seq__17889_17907__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_17913);
          var G__17914 = cljs.core.next.call(null, seq__17889_17907__$1);
          var G__17915 = null;
          var G__17916 = 0;
          var G__17917 = 0;
          seq__17889_17897 = G__17914;
          chunk__17890_17898 = G__17915;
          count__17891_17899 = G__17916;
          i__17892_17900 = G__17917;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__17893_17918 = cljs.core.seq.call(null, node.full_results);
  var chunk__17894_17919 = null;
  var count__17895_17920 = 0;
  var i__17896_17921 = 0;
  while (true) {
    if (i__17896_17921 < count__17895_17920) {
      var result_17922 = cljs.core._nth.call(null, chunk__17894_17919, i__17896_17921);
      instaparse.gll.push_message.call(null, tramp, listener, result_17922);
      var G__17923 = seq__17893_17918;
      var G__17924 = chunk__17894_17919;
      var G__17925 = count__17895_17920;
      var G__17926 = i__17896_17921 + 1;
      seq__17893_17918 = G__17923;
      chunk__17894_17919 = G__17924;
      count__17895_17920 = G__17925;
      i__17896_17921 = G__17926;
      continue;
    } else {
      var temp__4425__auto___17927 = cljs.core.seq.call(null, seq__17893_17918);
      if (temp__4425__auto___17927) {
        var seq__17893_17928__$1 = temp__4425__auto___17927;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17893_17928__$1)) {
          var c__15115__auto___17929 = cljs.core.chunk_first.call(null, seq__17893_17928__$1);
          var G__17930 = cljs.core.chunk_rest.call(null, seq__17893_17928__$1);
          var G__17931 = c__15115__auto___17929;
          var G__17932 = cljs.core.count.call(null, c__15115__auto___17929);
          var G__17933 = 0;
          seq__17893_17918 = G__17930;
          chunk__17894_17919 = G__17931;
          count__17895_17920 = G__17932;
          i__17896_17921 = G__17933;
          continue;
        } else {
          var result_17934 = cljs.core.first.call(null, seq__17893_17928__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_17934);
          var G__17935 = cljs.core.next.call(null, seq__17893_17928__$1);
          var G__17936 = null;
          var G__17937 = 0;
          var G__17938 = 0;
          seq__17893_17918 = G__17935;
          chunk__17894_17919 = G__17936;
          count__17895_17920 = G__17937;
          i__17896_17921 = G__17938;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_full_listener = function instaparse$gll$push_full_listener(tramp, node_key, listener) {
  var full_listener_already_exists_QMARK_ = instaparse.gll.full_listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.full_listeners = cljs.core.conj.call(null, node.full_listeners, listener);
  var seq__17943_17947 = cljs.core.seq.call(null, node.full_results);
  var chunk__17944_17948 = null;
  var count__17945_17949 = 0;
  var i__17946_17950 = 0;
  while (true) {
    if (i__17946_17950 < count__17945_17949) {
      var result_17951 = cljs.core._nth.call(null, chunk__17944_17948, i__17946_17950);
      instaparse.gll.push_message.call(null, tramp, listener, result_17951);
      var G__17952 = seq__17943_17947;
      var G__17953 = chunk__17944_17948;
      var G__17954 = count__17945_17949;
      var G__17955 = i__17946_17950 + 1;
      seq__17943_17947 = G__17952;
      chunk__17944_17948 = G__17953;
      count__17945_17949 = G__17954;
      i__17946_17950 = G__17955;
      continue;
    } else {
      var temp__4425__auto___17956 = cljs.core.seq.call(null, seq__17943_17947);
      if (temp__4425__auto___17956) {
        var seq__17943_17957__$1 = temp__4425__auto___17956;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17943_17957__$1)) {
          var c__15115__auto___17958 = cljs.core.chunk_first.call(null, seq__17943_17957__$1);
          var G__17959 = cljs.core.chunk_rest.call(null, seq__17943_17957__$1);
          var G__17960 = c__15115__auto___17958;
          var G__17961 = cljs.core.count.call(null, c__15115__auto___17958);
          var G__17962 = 0;
          seq__17943_17947 = G__17959;
          chunk__17944_17948 = G__17960;
          count__17945_17949 = G__17961;
          i__17946_17950 = G__17962;
          continue;
        } else {
          var result_17963 = cljs.core.first.call(null, seq__17943_17957__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_17963);
          var G__17964 = cljs.core.next.call(null, seq__17943_17957__$1);
          var G__17965 = null;
          var G__17966 = 0;
          var G__17967 = 0;
          seq__17943_17947 = G__17964;
          chunk__17944_17948 = G__17965;
          count__17945_17949 = G__17966;
          i__17946_17950 = G__17967;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, full_listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(full_listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._full_parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(full_listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.merge_negative_listeners = cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.into);
instaparse.gll.push_negative_listener = function instaparse$gll$push_negative_listener(tramp, creator, negative_listener) {
  return tramp.negative_listeners = instaparse.gll.merge_negative_listeners.call(null, tramp.negative_listeners, new cljs.core.PersistentArrayMap.fromArray([creator.call(null, 0), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [negative_listener], null)], true, false));
};
instaparse.gll.fail = function instaparse$gll$fail(tramp, node_key, index, reason) {
  tramp.failure = function(failure) {
    var current_index = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure);
    var G__17969 = cljs.core.compare.call(null, index, current_index);
    switch(G__17969) {
      case 1:
        return new instaparse.gll.Failure(index, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reason], null), null, null, null);
        break;
      case 0:
        return new instaparse.gll.Failure(index, cljs.core.conj.call(null, (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(failure), reason), null, null, null);
        break;
      case -1:
        return failure;
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(cljs.core.compare.call(null, index, current_index))].join(""));;
    }
  }.call(null, tramp.failure);
  if (cljs.core._EQ_.call(null, index, tramp.fail_index)) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, instaparse.gll.build_node_with_meta.call(null, tramp.node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), cljs.core.subs.call(null, tramp.text, index), index, cljs.core.count.call(null, tramp.text)), cljs.core.count.call(null, tramp.text)));
  } else {
    return null;
  }
};
instaparse.gll.step = function instaparse$gll$step(tramp) {
  var top = cljs.core.peek.call(null, tramp.stack);
  tramp.stack = cljs.core.pop.call(null, tramp.stack);
  return top.call(null);
};
instaparse.gll.run = function instaparse$gll$run() {
  var args17971 = [];
  var len__15370__auto___17975 = arguments.length;
  var i__15371__auto___17976 = 0;
  while (true) {
    if (i__15371__auto___17976 < len__15370__auto___17975) {
      args17971.push(arguments[i__15371__auto___17976]);
      var G__17977 = i__15371__auto___17976 + 1;
      i__15371__auto___17976 = G__17977;
      continue;
    } else {
    }
    break;
  }
  var G__17973 = args17971.length;
  switch(G__17973) {
    case 1:
      return instaparse.gll.run.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.gll.run.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17971.length)].join(""));;
  }
};
instaparse.gll.run.cljs$core$IFn$_invoke$arity$1 = function(tramp) {
  return instaparse.gll.run.call(null, tramp, null);
};
instaparse.gll.run.cljs$core$IFn$_invoke$arity$2 = function(tramp, found_result_QMARK_) {
  while (true) {
    var stack = tramp.stack;
    if (cljs.core.truth_(tramp.success)) {
      return cljs.core.cons.call(null, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(tramp.success), new cljs.core.LazySeq(null, function(tramp, found_result_QMARK_, stack) {
        return function() {
          tramp.success = null;
          return instaparse.gll.run.call(null, tramp, true);
        };
      }(tramp, found_result_QMARK_, stack), null, null));
    } else {
      if (cljs.core.count.call(null, stack) > 0) {
        instaparse.gll.step.call(null, tramp);
        var G__17979 = tramp;
        var G__17980 = found_result_QMARK_;
        tramp = G__17979;
        found_result_QMARK_ = G__17980;
        continue;
      } else {
        if (cljs.core.count.call(null, tramp.negative_listeners) > 0) {
          var vec__17974 = cljs.core.first.call(null, tramp.negative_listeners);
          var index = cljs.core.nth.call(null, vec__17974, 0, null);
          var listeners = cljs.core.nth.call(null, vec__17974, 1, null);
          var listener = cljs.core.peek.call(null, listeners);
          listener.call(null);
          if (cljs.core._EQ_.call(null, cljs.core.count.call(null, listeners), 1)) {
            tramp.negative_listeners = cljs.core.dissoc.call(null, tramp.negative_listeners, index);
          } else {
            tramp.negative_listeners = cljs.core.update.call(null, tramp.negative_listeners, index, cljs.core.pop);
          }
          var G__17981 = tramp;
          var G__17982 = found_result_QMARK_;
          tramp = G__17981;
          found_result_QMARK_ = G__17982;
          continue;
        } else {
          if (cljs.core.truth_(found_result_QMARK_)) {
            var next_stack = tramp.next_stack;
            tramp.stack = next_stack;
            tramp.next_stack = cljs.core.PersistentVector.EMPTY;
            tramp.generation = tramp.generation + 1;
            var G__17983 = tramp;
            var G__17984 = null;
            tramp = G__17983;
            found_result_QMARK_ = G__17984;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
instaparse.gll.run.cljs$lang$maxFixedArity = 2;
instaparse.gll.NodeListener = function instaparse$gll$NodeListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, result);
  };
};
instaparse.gll.LookListener = function instaparse$gll$LookListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, node_key.call(null, 0)));
  };
};
instaparse.gll.CatListener = function instaparse$gll$CatListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__17987 = result;
    var map__17987__$1 = (!(map__17987 == null) ? map__17987.cljs$lang$protocol_mask$partition0$ & 64 || map__17987.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17987) : map__17987;
    var parsed_result = cljs.core.get.call(null, map__17987__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__17987__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core.seq.call(null, parser_sequence)) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), instaparse$gll$CatListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.CatFullListener = function instaparse$gll$CatFullListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__17991 = result;
    var map__17991__$1 = (!(map__17991 == null) ? map__17991.cljs$lang$protocol_mask$partition0$ & 64 || map__17991.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17991) : map__17991;
    var parsed_result = cljs.core.get.call(null, map__17991__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__17991__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core.truth_(instaparse.reduction.singleton_QMARK_.call(null, parser_sequence))) {
      return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), instaparse$gll$CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      if (cljs.core.seq.call(null, parser_sequence)) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), instaparse$gll$CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
      } else {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      }
    }
  };
};
instaparse.gll.PlusListener = function instaparse$gll$PlusListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__17995 = result;
    var map__17995__$1 = (!(map__17995 == null) ? map__17995.cljs$lang$protocol_mask$partition0$ & 64 || map__17995.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17995) : map__17995;
    var parsed_result = cljs.core.get.call(null, map__17995__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__17995__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), instaparse$gll$PlusListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.PlusFullListener = function instaparse$gll$PlusFullListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__17999 = result;
    var map__17999__$1 = (!(map__17999 == null) ? map__17999.cljs$lang$protocol_mask$partition0$ & 64 || map__17999.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17999) : map__17999;
    var parsed_result = cljs.core.get.call(null, map__17999__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__17999__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), instaparse$gll$PlusFullListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      }
    }
  };
};
instaparse.gll.RepListener = function instaparse$gll$RepListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__18003 = result;
    var map__18003__$1 = (!(map__18003 == null) ? map__18003.cljs$lang$protocol_mask$partition0$ & 64 || map__18003.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18003) : map__18003;
    var parsed_result = cljs.core.get.call(null, map__18003__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__18003__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
      instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    } else {
    }
    if (cljs.core.count.call(null, new_results_so_far) < n) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), instaparse$gll$RepListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
    } else {
      return null;
    }
  };
};
instaparse.gll.RepFullListener = function instaparse$gll$RepFullListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__18007 = result;
    var map__18007__$1 = (!(map__18007 == null) ? map__18007.cljs$lang$protocol_mask$partition0$ & 64 || map__18007.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18007) : map__18007;
    var parsed_result = cljs.core.get.call(null, map__18007__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__18007__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return null;
      }
    } else {
      if (cljs.core.count.call(null, new_results_so_far) < n) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), instaparse$gll$RepFullListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
      } else {
        return null;
      }
    }
  };
};
instaparse.gll.TopListener = function instaparse$gll$TopListener(tramp) {
  return function(result) {
    return tramp.success = result;
  };
};
instaparse.gll.string_parse = function instaparse$gll$string_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__14650__auto__ = cljs.core.count.call(null, text);
    var y__14651__auto__ = index + cljs.core.count.call(null, string);
    return x__14650__auto__ < y__14651__auto__ ? x__14650__auto__ : y__14651__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_full_parse = function instaparse$gll$string_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__14650__auto__ = cljs.core.count.call(null, text);
    var y__14651__auto__ = index + cljs.core.count.call(null, string);
    return x__14650__auto__ < y__14651__auto__ ? x__14650__auto__ : y__14651__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.equals_ignore_case = function instaparse$gll$equals_ignore_case(s1, s2) {
  return cljs.core._EQ_.call(null, s1.toUpperCase(), s2.toUpperCase());
};
instaparse.gll.string_case_insensitive_parse = function instaparse$gll$string_case_insensitive_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__14650__auto__ = cljs.core.count.call(null, text);
    var y__14651__auto__ = index + cljs.core.count.call(null, string);
    return x__14650__auto__ < y__14651__auto__ ? x__14650__auto__ : y__14651__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core.truth_(instaparse.gll.equals_ignore_case.call(null, string, head))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_case_insensitive_full_parse = function instaparse$gll$string_case_insensitive_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__14650__auto__ = cljs.core.count.call(null, text);
    var y__14651__auto__ = index + cljs.core.count.call(null, string);
    return x__14650__auto__ < y__14651__auto__ ? x__14650__auto__ : y__14651__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text));
    if (and__14319__auto__) {
      return instaparse.gll.equals_ignore_case.call(null, string, head);
    } else {
      return and__14319__auto__;
    }
  }())) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.char_range_parse = function instaparse$gll$char_range_parse(this$, index, tramp) {
  var lo = (new cljs.core.Keyword(null, "lo", "lo", -931799889)).cljs$core$IFn$_invoke$arity$1(this$);
  var hi = (new cljs.core.Keyword(null, "hi", "hi", -1821422114)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp);
  if (index >= cljs.core.count.call(null, text)) {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "char-range", "char-range", 1443391389), true, 
    new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null)], null));
  } else {
    if (hi <= 65535) {
      var code = text.charCodeAt(index);
      if (lo <= code && code <= hi) {
        return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, cljs.core.char$.call(null, code), index + 1));
      } else {
        return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "char-range", "char-range", 1443391389), true, 
        new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null)], null));
      }
    } else {
      var code_point = goog.i18n.uChar.getCodePointAround(text, index | 0);
      var char_string = goog.i18n.uChar.fromCharCode(code_point);
      if (lo <= code_point && code_point <= hi) {
        return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, char_string, index + cljs.core.count.call(null, char_string)));
      } else {
        return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "char-range", "char-range", 1443391389), true, 
        new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null)], null));
      }
    }
  }
};
instaparse.gll.char_range_full_parse = function instaparse$gll$char_range_full_parse(this$, index, tramp) {
  var lo = (new cljs.core.Keyword(null, "lo", "lo", -931799889)).cljs$core$IFn$_invoke$arity$1(this$);
  var hi = (new cljs.core.Keyword(null, "hi", "hi", -1821422114)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp);
  var end = cljs.core.count.call(null, text);
  if (index >= cljs.core.count.call(null, text)) {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "char-range", "char-range", 1443391389), true, 
    new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null), new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  } else {
    if (hi <= 65535) {
      var code = text.charCodeAt(index);
      if (cljs.core._EQ_.call(null, index + 1, end) && (lo <= code && code <= hi)) {
        return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, cljs.core.char$.call(null, code), end));
      } else {
        return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "char-range", "char-range", 1443391389), true, 
        new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null), new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
      }
    } else {
      var code_point = goog.i18n.uChar.getCodePointAround(text, index | 0);
      var char_string = goog.i18n.uChar.fromCharCode(code_point);
      if (cljs.core._EQ_.call(null, index + cljs.core.count.call(null, char_string), end) && (lo <= code_point && code_point <= hi)) {
        return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, char_string, end));
      } else {
        return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "char", "char", -641587586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "char-range", "char-range", 1443391389), true, 
        new cljs.core.Keyword(null, "lo", "lo", -931799889), lo, new cljs.core.Keyword(null, "hi", "hi", -1821422114), hi], null), new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
      }
    }
  }
};
instaparse.gll.re_match_at_front = function instaparse$gll$re_match_at_front(regexp, text) {
  var re = new RegExp(regexp.source, "g");
  var m = re.exec(text);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = m;
    if (cljs.core.truth_(and__14319__auto__)) {
      return m.index === 0;
    } else {
      return and__14319__auto__;
    }
  }())) {
    return cljs.core.first.call(null, m);
  } else {
    return null;
  }
};
instaparse.gll.regexp_parse = function instaparse$gll$regexp_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.segment;
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  if (cljs.core.truth_(match)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, index + cljs.core.count.call(null, match)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp], null));
  }
};
instaparse.gll.regexp_full_parse = function instaparse$gll$regexp_full_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(tramp);
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  var desired_length = cljs.core.count.call(null, text) - index;
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = match;
    if (cljs.core.truth_(and__14319__auto__)) {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, match), desired_length);
    } else {
      return and__14319__auto__;
    }
  }())) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, cljs.core.count.call(null, text)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
var empty_cat_result_18009 = instaparse.auto_flatten_seq.EMPTY;
instaparse.gll.cat_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$cat_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatListener.call(null, empty_cat_result_18009, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_18009);
instaparse.gll.cat_full_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$cat_full_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatFullListener.call(null, empty_cat_result_18009, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_18009);
instaparse.gll.plus_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$plus_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_18009, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_18009);
instaparse.gll.plus_full_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$plus_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_18009, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_18009);
instaparse.gll.rep_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$rep_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_18009, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_18009, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_18009);
instaparse.gll.rep_full_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$rep_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_18009, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_18009, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_18009);
instaparse.gll.star_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$star_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_18009, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  };
}(empty_cat_result_18009);
instaparse.gll.star_full_parse = function(empty_cat_result_18009) {
  return function instaparse$gll$star_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_18009, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_18009);
instaparse.gll.alt_parse = function instaparse$gll$alt_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__18014 = cljs.core.seq.call(null, parsers);
  var chunk__18015 = null;
  var count__18016 = 0;
  var i__18017 = 0;
  while (true) {
    if (i__18017 < count__18016) {
      var parser = cljs.core._nth.call(null, chunk__18015, i__18017);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__18018 = seq__18014;
      var G__18019 = chunk__18015;
      var G__18020 = count__18016;
      var G__18021 = i__18017 + 1;
      seq__18014 = G__18018;
      chunk__18015 = G__18019;
      count__18016 = G__18020;
      i__18017 = G__18021;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__18014);
      if (temp__4425__auto__) {
        var seq__18014__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18014__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first.call(null, seq__18014__$1);
          var G__18022 = cljs.core.chunk_rest.call(null, seq__18014__$1);
          var G__18023 = c__15115__auto__;
          var G__18024 = cljs.core.count.call(null, c__15115__auto__);
          var G__18025 = 0;
          seq__18014 = G__18022;
          chunk__18015 = G__18023;
          count__18016 = G__18024;
          i__18017 = G__18025;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__18014__$1);
          instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__18026 = cljs.core.next.call(null, seq__18014__$1);
          var G__18027 = null;
          var G__18028 = 0;
          var G__18029 = 0;
          seq__18014 = G__18026;
          chunk__18015 = G__18027;
          count__18016 = G__18028;
          i__18017 = G__18029;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.alt_full_parse = function instaparse$gll$alt_full_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__18034 = cljs.core.seq.call(null, parsers);
  var chunk__18035 = null;
  var count__18036 = 0;
  var i__18037 = 0;
  while (true) {
    if (i__18037 < count__18036) {
      var parser = cljs.core._nth.call(null, chunk__18035, i__18037);
      instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__18038 = seq__18034;
      var G__18039 = chunk__18035;
      var G__18040 = count__18036;
      var G__18041 = i__18037 + 1;
      seq__18034 = G__18038;
      chunk__18035 = G__18039;
      count__18036 = G__18040;
      i__18037 = G__18041;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__18034);
      if (temp__4425__auto__) {
        var seq__18034__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18034__$1)) {
          var c__15115__auto__ = cljs.core.chunk_first.call(null, seq__18034__$1);
          var G__18042 = cljs.core.chunk_rest.call(null, seq__18034__$1);
          var G__18043 = c__15115__auto__;
          var G__18044 = cljs.core.count.call(null, c__15115__auto__);
          var G__18045 = 0;
          seq__18034 = G__18042;
          chunk__18035 = G__18043;
          count__18036 = G__18044;
          i__18037 = G__18045;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__18034__$1);
          instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__18046 = cljs.core.next.call(null, seq__18034__$1);
          var G__18047 = null;
          var G__18048 = 0;
          var G__18049 = 0;
          seq__18034 = G__18046;
          chunk__18035 = G__18047;
          count__18036 = G__18048;
          i__18037 = G__18049;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.ordered_alt_parse = function instaparse$gll$ordered_alt_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, node_key_parser1, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.ordered_alt_full_parse = function instaparse$gll$ordered_alt_full_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_full_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, node_key_parser1, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_full_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.opt_parse = function instaparse$gll$opt_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.opt_full_parse = function instaparse$gll$opt_full_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "optional", "optional", 2053951509), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.non_terminal_parse = function instaparse$gll$non_terminal_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.non_terminal_full_parse = function instaparse$gll$non_terminal_full_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_parse = function instaparse$gll$lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.LookListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_full_parse = function instaparse$gll$lookahead_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.lookahead_parse.call(null, this$, index, tramp);
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "lookahead", "lookahead", -400102393), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.negative_lookahead_parse = function instaparse$gll$negative_lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null);
  if (cljs.core.truth_(instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387)], null));
  } else {
    instaparse.gll.push_listener.call(null, tramp, node_key, function() {
      var fail_send = new cljs.core.Delay(function(parser, node_key) {
        return function() {
          return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "NOT", "NOT", 
          -1689245341), instaparse.print.combinators__GT_str.call(null, parser)], null)], null));
        };
      }(parser, node_key), null);
      return function(fail_send, parser, node_key) {
        return function(result) {
          return cljs.core.force.call(null, fail_send);
        };
      }(fail_send, parser, node_key);
    }());
    return instaparse.gll.push_negative_listener.call(null, tramp, node_key, function(parser, node_key) {
      return function() {
        if (cljs.core.not.call(null, instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
          return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
        } else {
          return null;
        }
      };
    }(parser, node_key));
  }
};
instaparse.gll.epsilon_parse = function instaparse$gll$epsilon_parse(this$, index, tramp) {
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.epsilon_full_parse = function instaparse$gll$epsilon_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "Epsilon", "Epsilon", 133418452), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.start_parser = function instaparse$gll$start_parser(tramp, parser, partial_QMARK_) {
  if (cljs.core.truth_(partial_QMARK_)) {
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  } else {
    return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  }
};
instaparse.gll.parses = function instaparse$gll$parses(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4423__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var all_parses = temp__4423__auto__;
    return all_parses;
  } else {
    return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, instaparse.failure.augment_failure.call(null, tramp.failure, text));
  }
};
instaparse.gll.parse = function instaparse$gll$parse(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4423__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var all_parses = temp__4423__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.failure.augment_failure.call(null, tramp.failure, text);
  }
};
instaparse.gll.build_node_with_meta = function instaparse$gll$build_node_with_meta(node_builder, tag, content, start, end) {
  return cljs.core.with_meta.call(null, node_builder.call(null, tag, content), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), start, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), end], null));
};
instaparse.gll.build_total_failure_node = function instaparse$gll$build_total_failure_node(node_builder, start, text) {
  var build_failure_node = instaparse.gll.build_node_with_meta.call(null, node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), text, 0, cljs.core.count.call(null, text));
  var build_start_node = instaparse.gll.build_node_with_meta.call(null, node_builder, start, build_failure_node, 0, cljs.core.count.call(null, text));
  return build_start_node;
};
instaparse.gll.parses_total_after_fail = function instaparse$gll$parses_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4423__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var all_parses = temp__4423__auto__;
    return all_parses;
  } else {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, instaparse.gll.build_total_failure_node.call(null, node_builder, start, text));
  }
};
instaparse.gll.merge_meta = function instaparse$gll$merge_meta(obj, metamap) {
  return cljs.core.with_meta.call(null, obj, cljs.core.merge.call(null, metamap, cljs.core.meta.call(null, obj)));
};
instaparse.gll.parses_total = function instaparse$gll$parses_total(grammar, start, text, partial_QMARK_, node_builder) {
  var all_parses = instaparse.gll.parses.call(null, grammar, start, text, partial_QMARK_);
  if (cljs.core.seq.call(null, all_parses)) {
    return all_parses;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parses_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, all_parses)), partial_QMARK_, node_builder), cljs.core.meta.call(null, all_parses));
  }
};
instaparse.gll.parse_total_after_fail = function instaparse$gll$parse_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4423__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var all_parses = temp__4423__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.gll.build_total_failure_node.call(null, node_builder, start, text);
  }
};
instaparse.gll.parse_total = function instaparse$gll$parse_total(grammar, start, text, partial_QMARK_, node_builder) {
  var result = instaparse.gll.parse.call(null, grammar, start, text, partial_QMARK_);
  if (!(result instanceof instaparse.gll.Failure)) {
    return result;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parse_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result), partial_QMARK_, node_builder), result);
  }
};
goog.provide("instaparse.transform");
goog.require("cljs.core");
goog.require("instaparse.gll");
instaparse.transform.map_preserving_meta = function instaparse$transform$map_preserving_meta(f, l) {
  return cljs.core.with_meta.call(null, cljs.core.map.call(null, f, l), cljs.core.meta.call(null, l));
};
instaparse.transform.merge_meta = function instaparse$transform$merge_meta(obj, metamap) {
  if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 262144 || obj.cljs$core$IWithMeta$ ? true : !obj.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, obj) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, obj)) {
    return instaparse.gll.merge_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.transform.enlive_transform = function instaparse$transform$enlive_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, instaparse$transform$enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree))) {
      return cljs.core.assoc.call(null, parse_tree, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.map.call(null, cljs.core.partial.call(null, instaparse$transform$enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree)));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.hiccup_transform = function instaparse$transform$hiccup_transform(transform_map, parse_tree) {
  if (cljs.core.sequential_QMARK_.call(null, parse_tree) && cljs.core.seq.call(null, parse_tree)) {
    var temp__4423__auto__ = transform_map.call(null, cljs.core.first.call(null, parse_tree));
    if (cljs.core.truth_(temp__4423__auto__)) {
      var transform = temp__4423__auto__;
      return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, instaparse$transform$hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
    } else {
      return cljs.core.with_meta.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, parse_tree)], null), cljs.core.map.call(null, cljs.core.partial.call(null, instaparse$transform$hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
    }
  } else {
    return parse_tree;
  }
};
instaparse.transform.transform = function instaparse$transform$transform(transform_map, parse_tree) {
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = cljs.core.map_QMARK_.call(null, parse_tree);
    if (and__14319__auto__) {
      return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree);
    } else {
      return and__14319__auto__;
    }
  }())) {
    return instaparse.transform.enlive_transform.call(null, transform_map, parse_tree);
  } else {
    if (cljs.core.vector_QMARK_.call(null, parse_tree) && cljs.core.first.call(null, parse_tree) instanceof cljs.core.Keyword) {
      return instaparse.transform.hiccup_transform.call(null, transform_map, parse_tree);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, parse_tree)) {
        return instaparse.transform.map_preserving_meta.call(null, cljs.core.partial.call(null, instaparse$transform$transform, transform_map), parse_tree);
      } else {
        if (parse_tree instanceof instaparse.gll.Failure) {
          return parse_tree;
        } else {
          throw "Invalid parse-tree, not recognized as either enlive or hiccup format.";
        }
      }
    }
  }
};
goog.provide("instaparse.line_col");
goog.require("cljs.core");
goog.require("instaparse.transform");
instaparse.line_col.Cursor = function(index, line, column, __meta, __extmap, __hash) {
  this.index = index;
  this.line = line;
  this.column = column;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
instaparse.line_col.Cursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__14926__auto__, k__14927__auto__) {
  var self__ = this;
  var this__14926__auto____$1 = this;
  return cljs.core._lookup.call(null, this__14926__auto____$1, k__14927__auto__, null);
};
instaparse.line_col.Cursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__14928__auto__, k18465, else__14929__auto__) {
  var self__ = this;
  var this__14928__auto____$1 = this;
  var G__18467 = k18465 instanceof cljs.core.Keyword ? k18465.fqn : null;
  switch(G__18467) {
    case "index":
      return self__.index;
      break;
    case "line":
      return self__.line;
      break;
    case "column":
      return self__.column;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k18465, else__14929__auto__);
  }
};
instaparse.line_col.Cursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__14940__auto__, writer__14941__auto__, opts__14942__auto__) {
  var self__ = this;
  var this__14940__auto____$1 = this;
  var pr_pair__14943__auto__ = function(this__14940__auto____$1) {
    return function(keyval__14944__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, cljs.core.pr_writer, "", " ", "", opts__14942__auto__, keyval__14944__auto__);
    };
  }(this__14940__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, pr_pair__14943__auto__, "#instaparse.line-col.Cursor{", ", ", "}", opts__14942__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "line", "line", 212345235), self__.line], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "column", "column", 2078222095), self__.column], null)], null), self__.__extmap));
};
instaparse.line_col.Cursor.prototype.cljs$core$IIterable$ = true;
instaparse.line_col.Cursor.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__18464) {
  var self__ = this;
  var G__18464__$1 = this;
  return new cljs.core.RecordIter(0, G__18464__$1, 3, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095)], null), cljs.core._iterator.call(null, self__.__extmap));
};
instaparse.line_col.Cursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__14924__auto__) {
  var self__ = this;
  var this__14924__auto____$1 = this;
  return self__.__meta;
};
instaparse.line_col.Cursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__14920__auto__) {
  var self__ = this;
  var this__14920__auto____$1 = this;
  return new instaparse.line_col.Cursor(self__.index, self__.line, self__.column, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.line_col.Cursor.prototype.cljs$core$ICounted$_count$arity$1 = function(this__14930__auto__) {
  var self__ = this;
  var this__14930__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.line_col.Cursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this__14921__auto__) {
  var self__ = this;
  var this__14921__auto____$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_imap.call(null, this__14921__auto____$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
instaparse.line_col.Cursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__14922__auto__, other__14923__auto__) {
  var self__ = this;
  var this__14922__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = other__14923__auto__;
    if (cljs.core.truth_(and__14319__auto__)) {
      var and__14319__auto____$1 = this__14922__auto____$1.constructor === other__14923__auto__.constructor;
      if (and__14319__auto____$1) {
        return cljs.core.equiv_map.call(null, this__14922__auto____$1, other__14923__auto__);
      } else {
        return and__14319__auto____$1;
      }
    } else {
      return and__14319__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.line_col.Cursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__14935__auto__, k__14936__auto__) {
  var self__ = this;
  var this__14935__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "index", "index", -1531685915), null, new cljs.core.Keyword(null, "column", "column", 2078222095), null, new cljs.core.Keyword(null, "line", "line", 212345235), null], null), null), k__14936__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__14935__auto____$1), self__.__meta), k__14936__auto__);
  } else {
    return new instaparse.line_col.Cursor(self__.index, self__.line, self__.column, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__14936__auto__)), null);
  }
};
instaparse.line_col.Cursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__14933__auto__, k__14934__auto__, G__18464) {
  var self__ = this;
  var this__14933__auto____$1 = this;
  var pred__18468 = cljs.core.keyword_identical_QMARK_;
  var expr__18469 = k__14934__auto__;
  if (cljs.core.truth_(pred__18468.call(null, new cljs.core.Keyword(null, "index", "index", -1531685915), expr__18469))) {
    return new instaparse.line_col.Cursor(G__18464, self__.line, self__.column, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__18468.call(null, new cljs.core.Keyword(null, "line", "line", 212345235), expr__18469))) {
      return new instaparse.line_col.Cursor(self__.index, G__18464, self__.column, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__18468.call(null, new cljs.core.Keyword(null, "column", "column", 2078222095), expr__18469))) {
        return new instaparse.line_col.Cursor(self__.index, self__.line, G__18464, self__.__meta, self__.__extmap, null);
      } else {
        return new instaparse.line_col.Cursor(self__.index, self__.line, self__.column, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__14934__auto__, G__18464), null);
      }
    }
  }
};
instaparse.line_col.Cursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__14938__auto__) {
  var self__ = this;
  var this__14938__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "line", "line", 212345235), self__.line], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "column", "column", 2078222095), self__.column], null)], null), self__.__extmap));
};
instaparse.line_col.Cursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__14925__auto__, G__18464) {
  var self__ = this;
  var this__14925__auto____$1 = this;
  return new instaparse.line_col.Cursor(self__.index, self__.line, self__.column, G__18464, self__.__extmap, self__.__hash);
};
instaparse.line_col.Cursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__14931__auto__, entry__14932__auto__) {
  var self__ = this;
  var this__14931__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__14932__auto__)) {
    return cljs.core._assoc.call(null, this__14931__auto____$1, cljs.core._nth.call(null, entry__14932__auto__, 0), cljs.core._nth.call(null, entry__14932__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__14931__auto____$1, entry__14932__auto__);
  }
};
instaparse.line_col.Cursor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "index", "index", 108845612, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "int", "int", -100885395, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line", "line", 1852876762, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", 
  "tag", -1290361223), new cljs.core.Symbol(null, "long", "long", 1469079434, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "column", "column", -576213674, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "long", "long", 1469079434, null)], null))], null);
};
instaparse.line_col.Cursor.cljs$lang$type = true;
instaparse.line_col.Cursor.cljs$lang$ctorPrSeq = function(this__14960__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.line-col/Cursor");
};
instaparse.line_col.Cursor.cljs$lang$ctorPrWriter = function(this__14960__auto__, writer__14961__auto__) {
  return cljs.core._write.call(null, writer__14961__auto__, "instaparse.line-col/Cursor");
};
instaparse.line_col.__GT_Cursor = function instaparse$line_col$__GT_Cursor(index, line, column) {
  return new instaparse.line_col.Cursor(index, line, column, null, null, null);
};
instaparse.line_col.map__GT_Cursor = function instaparse$line_col$map__GT_Cursor(G__18466) {
  return new instaparse.line_col.Cursor((new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(G__18466), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(G__18466), (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(G__18466), null, cljs.core.dissoc.call(null, G__18466, new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "line", "line", 212345235), 
  new cljs.core.Keyword(null, "column", "column", 2078222095)), null);
};
instaparse.line_col.advance_cursor = function instaparse$line_col$advance_cursor(cursor, text, new_index) {
  var new_index__$1 = new_index | 0;
  if (cursor.index <= new_index__$1) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), cljs.core.list(new cljs.core.Symbol(null, ".-index", ".-index", -2076208248, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null)), new cljs.core.Symbol(null, "new-index", "new-index", -2136000138, null))))].join(""));
  }
  if (cljs.core._EQ_.call(null, cursor.index, new_index__$1)) {
    return cursor;
  } else {
    var index = cursor.index;
    var line = cursor.line;
    var column = cursor.column;
    while (true) {
      if (cljs.core._EQ_.call(null, index, new_index__$1)) {
        return new instaparse.line_col.Cursor(index, line, column, null, null, null);
      } else {
        if (cljs.core._EQ_.call(null, text.charAt(index), "\n")) {
          var G__18472 = index + 1;
          var G__18473 = line + 1;
          var G__18474 = 1;
          index = G__18472;
          line = G__18473;
          column = G__18474;
          continue;
        } else {
          var G__18475 = index + 1;
          var G__18476 = line;
          var G__18477 = column + 1;
          index = G__18475;
          line = G__18476;
          column = G__18477;
          continue;
        }
      }
      break;
    }
  }
};
instaparse.line_col.make_line_col_fn = function instaparse$line_col$make_line_col_fn(text) {
  var cursor_state = cljs.core.atom.call(null, new instaparse.line_col.Cursor(0, 1, 1, null, null, null));
  return function(cursor_state) {
    return function instaparse$line_col$make_line_col_fn_$_line_col(i) {
      cljs.core.swap_BANG_.call(null, cursor_state, instaparse.line_col.advance_cursor, text, i);
      return cljs.core.deref.call(null, cursor_state);
    };
  }(cursor_state);
};
instaparse.line_col.hiccup_add_line_col_spans = function instaparse$line_col$hiccup_add_line_col_spans(line_col_fn, parse_tree) {
  var m = cljs.core.meta.call(null, parse_tree);
  var start_index = (new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620)).cljs$core$IFn$_invoke$arity$1(m);
  var end_index = (new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = start_index;
    if (cljs.core.truth_(and__14319__auto__)) {
      return end_index;
    } else {
      return and__14319__auto__;
    }
  }())) {
    var start_cursor = line_col_fn.call(null, start_index);
    var children = cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.partial.call(null, instaparse$line_col$hiccup_add_line_col_spans, line_col_fn), cljs.core.next.call(null, parse_tree)));
    var end_cursor = line_col_fn.call(null, end_index);
    return cljs.core.with_meta.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, parse_tree)], null), children), cljs.core.merge.call(null, cljs.core.meta.call(null, parse_tree), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("instaparse.gll", "start-line", "instaparse.gll/start-line", 768862483), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(start_cursor), 
    new cljs.core.Keyword("instaparse.gll", "start-column", "instaparse.gll/start-column", -1490883898), (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(start_cursor), new cljs.core.Keyword("instaparse.gll", "end-line", "instaparse.gll/end-line", -1706020282), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(end_cursor), new cljs.core.Keyword("instaparse.gll", "end-column", "instaparse.gll/end-column", 942330297), (new cljs.core.Keyword(null, 
    "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(end_cursor)], null)));
  } else {
    return parse_tree;
  }
};
instaparse.line_col.enlive_add_line_col_spans = function instaparse$line_col$enlive_add_line_col_spans(line_col_fn, parse_tree) {
  var m = cljs.core.meta.call(null, parse_tree);
  var start_index = (new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620)).cljs$core$IFn$_invoke$arity$1(m);
  var end_index = (new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = start_index;
    if (cljs.core.truth_(and__14319__auto__)) {
      return end_index;
    } else {
      return and__14319__auto__;
    }
  }())) {
    var start_cursor = line_col_fn.call(null, start_index);
    var children = cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.partial.call(null, instaparse$line_col$enlive_add_line_col_spans, line_col_fn), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree)));
    var end_cursor = line_col_fn.call(null, end_index);
    return cljs.core.with_meta.call(null, cljs.core.assoc.call(null, parse_tree, new cljs.core.Keyword(null, "content", "content", 15833224), children), cljs.core.merge.call(null, cljs.core.meta.call(null, parse_tree), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("instaparse.gll", "start-line", "instaparse.gll/start-line", 768862483), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(start_cursor), new cljs.core.Keyword("instaparse.gll", "start-column", 
    "instaparse.gll/start-column", -1490883898), (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(start_cursor), new cljs.core.Keyword("instaparse.gll", "end-line", "instaparse.gll/end-line", -1706020282), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(end_cursor), new cljs.core.Keyword("instaparse.gll", "end-column", "instaparse.gll/end-column", 942330297), (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(end_cursor)], 
    null)));
  } else {
    return parse_tree;
  }
};
instaparse.line_col.add_line_col_spans = function instaparse$line_col$add_line_col_spans(text, parse_tree) {
  var line_col_fn = instaparse.line_col.make_line_col_fn.call(null, text);
  if (parse_tree == null) {
    return null;
  } else {
    if (cljs.core.truth_(function() {
      var and__14319__auto__ = cljs.core.map_QMARK_.call(null, parse_tree);
      if (and__14319__auto__) {
        return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree);
      } else {
        return and__14319__auto__;
      }
    }())) {
      return instaparse.line_col.enlive_add_line_col_spans.call(null, line_col_fn, parse_tree);
    } else {
      if (cljs.core.vector_QMARK_.call(null, parse_tree) && cljs.core.first.call(null, parse_tree) instanceof cljs.core.Keyword) {
        return instaparse.line_col.hiccup_add_line_col_spans.call(null, line_col_fn, parse_tree);
      } else {
        if (cljs.core.truth_(function() {
          var and__14319__auto__ = cljs.core.sequential_QMARK_.call(null, parse_tree);
          if (and__14319__auto__) {
            var and__14319__auto____$1 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, parse_tree));
            if (and__14319__auto____$1) {
              return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, parse_tree));
            } else {
              return and__14319__auto____$1;
            }
          } else {
            return and__14319__auto__;
          }
        }())) {
          return instaparse.transform.map_preserving_meta.call(null, cljs.core.partial.call(null, instaparse.line_col.enlive_add_line_col_spans, line_col_fn), parse_tree);
        } else {
          if (cljs.core.sequential_QMARK_.call(null, parse_tree) && cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, parse_tree)) && cljs.core.first.call(null, cljs.core.first.call(null, parse_tree)) instanceof cljs.core.Keyword) {
            return instaparse.transform.map_preserving_meta.call(null, cljs.core.partial.call(null, instaparse.line_col.hiccup_add_line_col_spans, line_col_fn), parse_tree);
          } else {
            if (parse_tree instanceof instaparse.gll.Failure) {
              return parse_tree;
            } else {
              throw "Invalid parse-tree, not recognized as either enlive or hiccup format.";
            }
          }
        }
      }
    }
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = {};
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$read_char$arity$1 == null)) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__14967__auto__ = reader == null ? null : reader;
    var m__14968__auto__ = cljs.reader.read_char[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, reader);
    } else {
      var m__14968__auto____$1 = cljs.reader.read_char["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
      }
    }
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$unread$arity$2 == null)) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__14967__auto__ = reader == null ? null : reader;
    var m__14968__auto__ = cljs.reader.unread[goog.typeOf(x__14967__auto__)];
    if (!(m__14968__auto__ == null)) {
      return m__14968__auto__.call(null, reader, ch);
    } else {
      var m__14968__auto____$1 = cljs.reader.unread["_"];
      if (!(m__14968__auto____$1 == null)) {
        return m__14968__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
      }
    }
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs.core.with_meta(new cljs.core.Symbol(null, "idx", "idx", -1600747296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__14910__auto__, writer__14911__auto__, opt__14912__auto__) {
  return cljs.core._write.call(null, writer__14911__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__14331__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__14331__auto__)) {
    return or__14331__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error() {
  var args__15377__auto__ = [];
  var len__15370__auto___18272 = arguments.length;
  var i__15371__auto___18273 = 0;
  while (true) {
    if (i__15371__auto___18273 < len__15370__auto___18272) {
      args__15377__auto__.push(arguments[i__15371__auto___18273]);
      var G__18274 = i__15371__auto___18273 + 1;
      i__15371__auto___18273 = G__18274;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq18270) {
  var G__18271 = cljs.core.first.call(null, seq18270);
  var seq18270__$1 = cljs.core.next.call(null, seq18270);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__18271, seq18270__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__14319__auto__ = !(ch === "#");
  if (and__14319__auto__) {
    var and__14319__auto____$1 = !(ch === "'");
    if (and__14319__auto____$1) {
      var and__14319__auto____$2 = !(ch === ":");
      if (and__14319__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__14319__auto____$2;
      }
    } else {
      return and__14319__auto____$1;
    }
  } else {
    return and__14319__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__18275 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__18276 = cljs.reader.read_char.call(null, rdr);
      sb = G__18275;
      ch = G__18276;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__18277 = cljs.reader.read_char.call(null, rdr);
      ch = G__18277;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4423__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var macrofn = temp__4423__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__18278 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__18278;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__18279 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__18279;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4423__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var obj = temp__4423__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__14331__auto__ = ch == null;
      if (or__14331__auto__) {
        return or__14331__auto__;
      } else {
        var or__14331__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__14331__auto____$1) {
          return or__14331__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__14331__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__18280 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__18281 = cljs.reader.read_char.call(null, reader);
      buffer = G__18280;
      ch = G__18281;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__18282 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__18283 = cljs.reader.read_char.call(null, reader);
        buffer = G__18282;
        ch = G__18283;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__18284 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__18285 = cljs.reader.read_char.call(null, reader);
          buffer = G__18284;
          ch = G__18285;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__18290 = function() {
            var G__18288 = buffer;
            G__18288.append(nch);
            return G__18288;
          }();
          var G__18291 = cljs.reader.read_char.call(null, reader);
          buffer = G__18290;
          ch = G__18291;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__18292 = function() {
            var G__18289 = buffer;
            G__18289.append(ch);
            return G__18289;
          }();
          var G__18293 = cljs.reader.read_char.call(null, reader);
          buffer = G__18292;
          ch = G__18293;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__14319__auto__)) {
      return !(token.length === 1);
    } else {
      return and__14319__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || o.cljs$core$IWithMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o)) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__18296 = reader;
        var G__18297 = eof_is_error;
        var G__18298 = sentinel;
        var G__18299 = is_recursive;
        reader = G__18296;
        eof_is_error = G__18297;
        sentinel = G__18298;
        is_recursive = G__18299;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__18300 = cljs.reader.read_comment.call(null, reader, ch);
          var G__18301 = eof_is_error;
          var G__18302 = sentinel;
          var G__18303 = is_recursive;
          reader = G__18300;
          eof_is_error = G__18301;
          sentinel = G__18302;
          is_recursive = G__18303;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__18304 = reader;
            var G__18305 = eof_is_error;
            var G__18306 = sentinel;
            var G__18307 = is_recursive;
            reader = G__18304;
            eof_is_error = G__18305;
            sentinel = G__18306;
            is_recursive = G__18307;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Cannot read from non-string object.");
  }
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__18308 = b.append("0");
          b = G__18308;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__14319__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__14319__auto__)) {
    var or__14331__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__14331__auto__)) {
      return or__14331__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__14319__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__18310 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__18310, 0, null);
  var years = cljs.core.nth.call(null, vec__18310, 1, null);
  var months = cljs.core.nth.call(null, vec__18310, 2, null);
  var days = cljs.core.nth.call(null, vec__18310, 3, null);
  var hours = cljs.core.nth.call(null, vec__18310, 4, null);
  var minutes = cljs.core.nth.call(null, vec__18310, 5, null);
  var seconds = cljs.core.nth.call(null, vec__18310, 6, null);
  var fraction = cljs.core.nth.call(null, vec__18310, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__18310, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__18310, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__18310, 10, null);
  var v = vec__18310;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__14331__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__14331__auto__)) {
        return or__14331__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4423__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__18312 = temp__4423__auto__;
    var years = cljs.core.nth.call(null, vec__18312, 0, null);
    var months = cljs.core.nth.call(null, vec__18312, 1, null);
    var days = cljs.core.nth.call(null, vec__18312, 2, null);
    var hours = cljs.core.nth.call(null, vec__18312, 3, null);
    var minutes = cljs.core.nth.call(null, vec__18312, 4, null);
    var seconds = cljs.core.nth.call(null, vec__18312, 5, null);
    var ms = cljs.core.nth.call(null, vec__18312, 6, null);
    var offset = cljs.core.nth.call(null, vec__18312, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__18325_18337 = cljs.core.seq.call(null, form);
    var chunk__18326_18338 = null;
    var count__18327_18339 = 0;
    var i__18328_18340 = 0;
    while (true) {
      if (i__18328_18340 < count__18327_18339) {
        var x_18341 = cljs.core._nth.call(null, chunk__18326_18338, i__18328_18340);
        arr.push(x_18341);
        var G__18342 = seq__18325_18337;
        var G__18343 = chunk__18326_18338;
        var G__18344 = count__18327_18339;
        var G__18345 = i__18328_18340 + 1;
        seq__18325_18337 = G__18342;
        chunk__18326_18338 = G__18343;
        count__18327_18339 = G__18344;
        i__18328_18340 = G__18345;
        continue;
      } else {
        var temp__4425__auto___18346 = cljs.core.seq.call(null, seq__18325_18337);
        if (temp__4425__auto___18346) {
          var seq__18325_18347__$1 = temp__4425__auto___18346;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18325_18347__$1)) {
            var c__15115__auto___18348 = cljs.core.chunk_first.call(null, seq__18325_18347__$1);
            var G__18349 = cljs.core.chunk_rest.call(null, seq__18325_18347__$1);
            var G__18350 = c__15115__auto___18348;
            var G__18351 = cljs.core.count.call(null, c__15115__auto___18348);
            var G__18352 = 0;
            seq__18325_18337 = G__18349;
            chunk__18326_18338 = G__18350;
            count__18327_18339 = G__18351;
            i__18328_18340 = G__18352;
            continue;
          } else {
            var x_18353 = cljs.core.first.call(null, seq__18325_18347__$1);
            arr.push(x_18353);
            var G__18354 = cljs.core.next.call(null, seq__18325_18347__$1);
            var G__18355 = null;
            var G__18356 = 0;
            var G__18357 = 0;
            seq__18325_18337 = G__18354;
            chunk__18326_18338 = G__18355;
            count__18327_18339 = G__18356;
            i__18328_18340 = G__18357;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = {};
      var seq__18331_18358 = cljs.core.seq.call(null, form);
      var chunk__18332_18359 = null;
      var count__18333_18360 = 0;
      var i__18334_18361 = 0;
      while (true) {
        if (i__18334_18361 < count__18333_18360) {
          var vec__18335_18362 = cljs.core._nth.call(null, chunk__18332_18359, i__18334_18361);
          var k_18363 = cljs.core.nth.call(null, vec__18335_18362, 0, null);
          var v_18364 = cljs.core.nth.call(null, vec__18335_18362, 1, null);
          obj[cljs.core.name.call(null, k_18363)] = v_18364;
          var G__18365 = seq__18331_18358;
          var G__18366 = chunk__18332_18359;
          var G__18367 = count__18333_18360;
          var G__18368 = i__18334_18361 + 1;
          seq__18331_18358 = G__18365;
          chunk__18332_18359 = G__18366;
          count__18333_18360 = G__18367;
          i__18334_18361 = G__18368;
          continue;
        } else {
          var temp__4425__auto___18369 = cljs.core.seq.call(null, seq__18331_18358);
          if (temp__4425__auto___18369) {
            var seq__18331_18370__$1 = temp__4425__auto___18369;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__18331_18370__$1)) {
              var c__15115__auto___18371 = cljs.core.chunk_first.call(null, seq__18331_18370__$1);
              var G__18372 = cljs.core.chunk_rest.call(null, seq__18331_18370__$1);
              var G__18373 = c__15115__auto___18371;
              var G__18374 = cljs.core.count.call(null, c__15115__auto___18371);
              var G__18375 = 0;
              seq__18331_18358 = G__18372;
              chunk__18332_18359 = G__18373;
              count__18333_18360 = G__18374;
              i__18334_18361 = G__18375;
              continue;
            } else {
              var vec__18336_18376 = cljs.core.first.call(null, seq__18331_18370__$1);
              var k_18377 = cljs.core.nth.call(null, vec__18336_18376, 0, null);
              var v_18378 = cljs.core.nth.call(null, vec__18336_18376, 1, null);
              obj[cljs.core.name.call(null, k_18377)] = v_18378;
              var G__18379 = cljs.core.next.call(null, seq__18331_18370__$1);
              var G__18380 = null;
              var G__18381 = 0;
              var G__18382 = 0;
              seq__18331_18358 = G__18379;
              chunk__18332_18359 = G__18380;
              count__18333_18360 = G__18381;
              i__18334_18361 = G__18382;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return cljs.core.uuid.call(null, uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("instaparse.cfg");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.gll");
goog.require("clojure.string");
goog.require("cljs.reader");
instaparse.cfg._STAR_case_insensitive_literals_STAR_ = false;
instaparse.cfg.single_quoted_string = /'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.single_quoted_regexp = /#'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.double_quoted_string = /\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.double_quoted_regexp = /#\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.inside_comment = /(?:(?!(?:\(\*|\*\)))[\s\S])*/;
instaparse.cfg.ws = "[,\\s]*";
instaparse.cfg.opt_whitespace = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)));
instaparse.cfg.cfg = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, 
"look", "look", -539441433), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845), new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "rules", "rules", 1198912366), new cljs.core.Keyword(null, "hide", "hide", -596913169), 
new cljs.core.Keyword(null, "paren", "paren", -294107600), new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "factor", "factor", -2103172748), new cljs.core.Keyword(null, "comment", "comment", 532206069), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570), new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927), 
new cljs.core.Keyword(null, "opt", "opt", -794706369)], [instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "!")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.plus.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "look", "look", -539441433)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "neg", "neg", 1800032960))), instaparse.cfg.opt_whitespace)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.plus.call(null, 
instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "/")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ":"), instaparse.combinators_source.string.call(null, ":\x3d"), instaparse.combinators_source.string.call(null, 
"::\x3d"), instaparse.combinators_source.string.call(null, "\x3d")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "|")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x26")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, 
"nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ";"), instaparse.combinators_source.string.call(null, ".")), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.neg.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570))), instaparse.combinators_source.regexp.call(null, "[^, \\r\\t\\n\x3c\x3e(){}\\[\\]+*?:\x3d|'\"#\x26!;./]+")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "{")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "}"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "*")))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_string), 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_string)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.plus.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule", "rule", 729973257))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "(")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, ")"))), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt", "alt", -3214426)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "ord", "ord", 1142548323)))), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_regexp), instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_regexp)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "string", "string", -1989541586)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "regexp", "regexp", -541372782)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt", "opt", -794706369)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "star", "star", 279424429)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "plus", "plus", 211540661)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "paren", "paren", -294107600)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "hide", "hide", -596913169)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "(*"), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708)), instaparse.combinators_source.string.call(null, "*)")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "+"))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, "Epsilon"), instaparse.combinators_source.string.call(null, "epsilon"), instaparse.combinators_source.string.call(null, "EPSILON"), instaparse.combinators_source.string.call(null, "eps"), instaparse.combinators_source.string.call(null, 
"\u03b5")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.string.call(null, "[")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "]"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "?"))))]));
instaparse.cfg.tag = cljs.core.first;
instaparse.cfg.contents = cljs.core.next;
instaparse.cfg.content = cljs.core.fnext;
instaparse.cfg.escape = function instaparse$cfg$escape(s) {
  var sq = cljs.core.seq.call(null, s);
  var v = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var temp__4423__auto__ = cljs.core.first.call(null, sq);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var c = temp__4423__auto__;
      var G__18193 = c;
      switch(G__18193) {
        case "\\":
          var temp__4423__auto____$1 = cljs.core.second.call(null, sq);
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var c2 = temp__4423__auto____$1;
            if (cljs.core._EQ_.call(null, c2, "'")) {
              var G__18195 = cljs.core.drop.call(null, 2, sq);
              var G__18196 = cljs.core.conj.call(null, v, c2);
              sq = G__18195;
              v = G__18196;
              continue;
            } else {
              var G__18197 = cljs.core.drop.call(null, 2, sq);
              var G__18198 = cljs.core.conj.call(null, v, c, c2);
              sq = G__18197;
              v = G__18198;
              continue;
            }
          } else {
            throw [cljs.core.str("Encountered backslash character at end of string:"), cljs.core.str(s)].join("");
          }
          break;
        case '"':
          var G__18199 = cljs.core.next.call(null, sq);
          var G__18200 = cljs.core.conj.call(null, v, "\\", '"');
          sq = G__18199;
          v = G__18200;
          continue;
          break;
        default:
          var G__18201 = cljs.core.next.call(null, sq);
          var G__18202 = cljs.core.conj.call(null, v, c);
          sq = G__18201;
          v = G__18202;
          continue;
      }
    } else {
      return cljs.core.apply.call(null, cljs.core.str, v);
    }
    break;
  }
};
instaparse.cfg.safe_read_string = function instaparse$cfg$safe_read_string(s) {
  return cljs.reader.read_string_STAR_.call(null, cljs.reader.push_back_reader.call(null, s), null);
};
instaparse.cfg.process_string = function instaparse$cfg$process_string(s) {
  var stripped = cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = instaparse.cfg.safe_read_string.call(null, [cljs.core.str(remove_escaped_single_quotes), cljs.core.str('"')].join(""));
  return final_string;
};
instaparse.cfg.process_regexp = function instaparse$cfg$process_regexp(s) {
  var stripped = cljs.core.subs.call(null, s, 2, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = cljs.core.re_pattern.call(null, remove_escaped_single_quotes);
  return final_string;
};
instaparse.cfg.build_rule = function instaparse$cfg$build_rule(tree) {
  while (true) {
    var G__18205 = instaparse.cfg.tag.call(null, tree) instanceof cljs.core.Keyword ? instaparse.cfg.tag.call(null, tree).fqn : null;
    switch(G__18205) {
      case "neg":
        return instaparse.combinators_source.neg.call(null, instaparse$cfg$build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "cat":
        return cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.map.call(null, instaparse$cfg$build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "ord":
        return cljs.core.apply.call(null, instaparse.combinators_source.ord, cljs.core.map.call(null, instaparse$cfg$build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "alt":
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, cljs.core.map.call(null, instaparse$cfg$build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "look":
        return instaparse.combinators_source.look.call(null, instaparse$cfg$build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "rule":
        var vec__18206 = instaparse.cfg.contents.call(null, tree);
        var nt = cljs.core.nth.call(null, vec__18206, 0, null);
        var alt_or_ord = cljs.core.nth.call(null, vec__18206, 1, null);
        if (cljs.core._EQ_.call(null, instaparse.cfg.tag.call(null, nt), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, instaparse.cfg.content.call(null, nt))), instaparse.combinators_source.hide_tag.call(null, instaparse$cfg$build_rule.call(null, alt_or_ord))], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, nt)), instaparse$cfg$build_rule.call(null, alt_or_ord)], null);
        }
        break;
      case "nt":
        return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "star":
        return instaparse.combinators_source.star.call(null, instaparse$cfg$build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "string":
        return (cljs.core.truth_(instaparse.cfg._STAR_case_insensitive_literals_STAR_) ? instaparse.combinators_source.string_ci : instaparse.combinators_source.string).call(null, instaparse.cfg.process_string.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "hide":
        return instaparse.combinators_source.hide.call(null, instaparse$cfg$build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "paren":
        var G__18208 = instaparse.cfg.content.call(null, tree);
        tree = G__18208;
        continue;
        break;
      case "regexp":
        return instaparse.combinators_source.regexp.call(null, instaparse.cfg.process_regexp.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "plus":
        return instaparse.combinators_source.plus.call(null, instaparse$cfg$build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "epsilon":
        return instaparse.combinators_source.Epsilon;
        break;
      case "opt":
        return instaparse.combinators_source.opt.call(null, instaparse$cfg$build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(instaparse.cfg.tag.call(null, tree))].join(""));;
    }
    break;
  }
};
instaparse.cfg.seq_nt = function instaparse$cfg$seq_nt(parser) {
  while (true) {
    var G__18210 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
    switch(G__18210) {
      case "neg":
        var G__18212 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__18212;
        continue;
        break;
      case "cat":
        return cljs.core.mapcat.call(null, instaparse$cfg$seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "ord":
        return cljs.core.mapcat.call(null, instaparse$cfg$seq_nt, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser)], null));
        break;
      case "alt":
        return cljs.core.mapcat.call(null, instaparse$cfg$seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "look":
        var G__18213 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__18213;
        continue;
        break;
      case "nt":
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(parser)], null);
        break;
      case "rep":
        var G__18214 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__18214;
        continue;
        break;
      case "star":
        var G__18215 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__18215;
        continue;
        break;
      case "string":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "regexp":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "plus":
        var G__18216 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__18216;
        continue;
        break;
      case "epsilon":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "string-ci":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "char":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "opt":
        var G__18217 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__18217;
        continue;
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser))].join(""));;
    }
    break;
  }
};
instaparse.cfg.check_grammar = function instaparse$cfg$check_grammar(grammar_map) {
  var valid_nts_18226 = cljs.core.set.call(null, cljs.core.keys.call(null, grammar_map));
  var seq__18222_18227 = cljs.core.seq.call(null, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map))));
  var chunk__18223_18228 = null;
  var count__18224_18229 = 0;
  var i__18225_18230 = 0;
  while (true) {
    if (i__18225_18230 < count__18224_18229) {
      var nt_18231 = cljs.core._nth.call(null, chunk__18223_18228, i__18225_18230);
      if (cljs.core.truth_(valid_nts_18226.call(null, nt_18231))) {
      } else {
        throw [cljs.core.str(cljs.core.subs.call(null, [cljs.core.str(nt_18231)].join(""), 1)), cljs.core.str(" occurs on the right-hand side of your grammar, but not on the left")].join("");
      }
      var G__18232 = seq__18222_18227;
      var G__18233 = chunk__18223_18228;
      var G__18234 = count__18224_18229;
      var G__18235 = i__18225_18230 + 1;
      seq__18222_18227 = G__18232;
      chunk__18223_18228 = G__18233;
      count__18224_18229 = G__18234;
      i__18225_18230 = G__18235;
      continue;
    } else {
      var temp__4425__auto___18236 = cljs.core.seq.call(null, seq__18222_18227);
      if (temp__4425__auto___18236) {
        var seq__18222_18237__$1 = temp__4425__auto___18236;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18222_18237__$1)) {
          var c__15115__auto___18238 = cljs.core.chunk_first.call(null, seq__18222_18237__$1);
          var G__18239 = cljs.core.chunk_rest.call(null, seq__18222_18237__$1);
          var G__18240 = c__15115__auto___18238;
          var G__18241 = cljs.core.count.call(null, c__15115__auto___18238);
          var G__18242 = 0;
          seq__18222_18227 = G__18239;
          chunk__18223_18228 = G__18240;
          count__18224_18229 = G__18241;
          i__18225_18230 = G__18242;
          continue;
        } else {
          var nt_18243 = cljs.core.first.call(null, seq__18222_18237__$1);
          if (cljs.core.truth_(valid_nts_18226.call(null, nt_18243))) {
          } else {
            throw [cljs.core.str(cljs.core.subs.call(null, [cljs.core.str(nt_18243)].join(""), 1)), cljs.core.str(" occurs on the right-hand side of your grammar, but not on the left")].join("");
          }
          var G__18244 = cljs.core.next.call(null, seq__18222_18237__$1);
          var G__18245 = null;
          var G__18246 = 0;
          var G__18247 = 0;
          seq__18222_18227 = G__18244;
          chunk__18223_18228 = G__18245;
          count__18224_18229 = G__18246;
          i__18225_18230 = G__18247;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return grammar_map;
};
instaparse.cfg.build_parser = function instaparse$cfg$build_parser(spec, output_format) {
  var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
  if (rules instanceof instaparse.gll.Failure) {
    throw [cljs.core.str("Error parsing grammar specification:\n"), cljs.core.str(function() {
      var sb__15286__auto__ = new goog.string.StringBuffer;
      var _STAR_print_newline_STAR_18250_18252 = cljs.core._STAR_print_newline_STAR_;
      var _STAR_print_fn_STAR_18251_18253 = cljs.core._STAR_print_fn_STAR_;
      cljs.core._STAR_print_newline_STAR_ = true;
      cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18250_18252, _STAR_print_fn_STAR_18251_18253, sb__15286__auto__, rules) {
        return function(x__15287__auto__) {
          return sb__15286__auto__.append(x__15287__auto__);
        };
      }(_STAR_print_newline_STAR_18250_18252, _STAR_print_fn_STAR_18251_18253, sb__15286__auto__, rules);
      try {
        cljs.core.println.call(null, rules);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18251_18253;
        cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18250_18252;
      }
      return [cljs.core.str(sb__15286__auto__)].join("");
    }())].join("");
  } else {
    var productions = cljs.core.map.call(null, instaparse.cfg.build_rule, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, productions));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, productions))), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.build_parser_from_combinators = function instaparse$cfg$build_parser_from_combinators(grammar_map, output_format, start_production) {
  if (start_production == null) {
    throw "When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument.";
  } else {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.ebnf = function instaparse$cfg$ebnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /[:=]/, spec))) {
    var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
    if (rules instanceof instaparse.gll.Failure) {
      throw [cljs.core.str("Error parsing grammar specification:\n"), cljs.core.str(function() {
        var sb__15286__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_18258_18262 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_18259_18263 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18258_18262, _STAR_print_fn_STAR_18259_18263, sb__15286__auto__, rules) {
          return function(x__15287__auto__) {
            return sb__15286__auto__.append(x__15287__auto__);
          };
        }(_STAR_print_newline_STAR_18258_18262, _STAR_print_fn_STAR_18259_18263, sb__15286__auto__, rules);
        try {
          cljs.core.println.call(null, rules);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18259_18263;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18258_18262;
        }
        return [cljs.core.str(sb__15286__auto__)].join("");
      }())].join("");
    } else {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, instaparse.cfg.build_rule, rules));
    }
  } else {
    var rhs = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), spec, false);
    if (rhs instanceof instaparse.gll.Failure) {
      throw [cljs.core.str("Error parsing grammar specification:\n"), cljs.core.str(function() {
        var sb__15286__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_18260_18264 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_18261_18265 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18260_18264, _STAR_print_fn_STAR_18261_18265, sb__15286__auto__, rhs) {
          return function(x__15287__auto__) {
            return sb__15286__auto__.append(x__15287__auto__);
          };
        }(_STAR_print_newline_STAR_18260_18264, _STAR_print_fn_STAR_18261_18265, sb__15286__auto__, rhs);
        try {
          cljs.core.println.call(null, rhs);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18261_18265;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18260_18264;
        }
        return [cljs.core.str(sb__15286__auto__)].join("");
      }())].join("");
    } else {
      return instaparse.cfg.build_rule.call(null, cljs.core.first.call(null, rhs));
    }
  }
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || width == "" || replacement.length >= width) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = parseFloat(value).toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("instaparse.abnf");
goog.require("cljs.core");
goog.require("instaparse.transform");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.cfg");
goog.require("instaparse.reduction");
goog.require("goog.string.format");
instaparse.abnf._STAR_case_insensitive_STAR_ = false;
instaparse.abnf.abnf_core = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "CRLF", "CRLF", 11418756), new cljs.core.Keyword(null, "HTAB", "HTAB", 11392612), new cljs.core.Keyword(null, "LWSP", "LWSP", 782998598), new cljs.core.Keyword(null, "LF", "LF", 1177033158), new cljs.core.Keyword(null, "VCHAR", "VCHAR", 1962437706), new cljs.core.Keyword(null, "DIGIT", "DIGIT", 341251338), new cljs.core.Keyword(null, "SP", "SP", 124290284), new cljs.core.Keyword(null, "HEXDIG", "HEXDIG", 
-200221072), new cljs.core.Keyword(null, "CTL", "CTL", -9995632), new cljs.core.Keyword(null, "DQUOTE", "DQUOTE", -571169808), new cljs.core.Keyword(null, "WSP", "WSP", -1046948716), new cljs.core.Keyword(null, "CR", "CR", -1654295403), new cljs.core.Keyword(null, "OCTET", "OCTET", -743420682), new cljs.core.Keyword(null, "ALPHA", "ALPHA", -1463859144), new cljs.core.Keyword(null, "CHAR", "CHAR", -1280338086), new cljs.core.Keyword(null, "BIT", "BIT", -1854474115)], [instaparse.combinators_source.string.call(null, 
"\r\n"), instaparse.combinators_source.string.call(null, "\t"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "\r\n"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, 
" "), instaparse.combinators_source.string.call(null, "\t"))))), instaparse.combinators_source.string.call(null, "\n"), instaparse.combinators_source.regexp.call(null, "[\\u0021-\\u007E]"), instaparse.combinators_source.regexp.call(null, "[0-9]"), instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.regexp.call(null, "[0-9a-fA-F]"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u001F|\\u007F]"), instaparse.combinators_source.string.call(null, '"'), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.string.call(null, "\r"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u00FF]"), instaparse.combinators_source.regexp.call(null, "[a-zA-Z]"), instaparse.combinators_source.regexp.call(null, "[\\u0001-\\u007F]"), instaparse.combinators_source.regexp.call(null, "[01]")]);
instaparse.abnf.abnf_grammar = "\n\x3crulelist\x3e \x3d \x3copt-whitespace\x3e (rule | hide-tag-rule)+;\nrule \x3d rulename-left \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nhide-tag-rule \x3d hide-tag \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nrulename-left \x3d rulename;\nrulename-right \x3d rulename;\n\x3crulename\x3e \x3d #'[a-zA-Z][-a-zA-Z0-9]*';\n\x3chide-tag\x3e \x3d \x3c'\x3c' opt-whitespace\x3e rulename-left \x3copt-whitespace '\x3e'\x3e;\ndefined-as \x3d \x3copt-whitespace\x3e ('\x3d' | '\x3d/') \x3copt-whitespace\x3e;\nalternation \x3d concatenation (\x3copt-whitespace '/' opt-whitespace\x3e concatenation)*;\nconcatenation \x3d repetition (\x3cwhitespace\x3e repetition)*;\nrepetition \x3d [repeat] \x3copt-whitespace\x3e element;\nrepeat \x3d NUM | (NUM? '*' NUM?);\n\x3celement\x3e \x3d rulename-right | group | hide | option | char-val | num-val\n          | look | neg | regexp;\nlook \x3d \x3c'\x26' opt-whitespace\x3e element;\nneg \x3d \x3c'!' opt-whitespace\x3e element;\n\x3cgroup\x3e \x3d \x3c'(' opt-whitespace\x3e alternation \x3copt-whitespace ')'\x3e;\noption \x3d \x3c'[' opt-whitespace\x3e alternation \x3copt-whitespace ']'\x3e;\nhide \x3d \x3c'\x3c' opt-whitespace\x3e alternation \x3copt-whitespace '\x3e'\x3e;\nchar-val \x3d \x3c'\\u0022'\x3e #'[\\u0020-\\u0021\\u0023-\\u007E]'* \x3c'\\u0022'\x3e (* double-quoted strings *)\n         | \x3c'\\u0027'\x3e #'[\\u0020-\\u0026(-~]'* \x3c'\\u0027'\x3e;  (* single-quoted strings *)\n\x3cnum-val\x3e \x3d \x3c'%'\x3e (bin-val | dec-val | hex-val);\nbin-val \x3d \x3c'b'\x3e bin-char\n          [ (\x3c'.'\x3e bin-char)+ | ('-' bin-char) ];\nbin-char \x3d ('0' | '1')+;\ndec-val \x3d \x3c'd'\x3e dec-char\n          [ (\x3c'.'\x3e dec-char)+ | ('-' dec-char) ];\ndec-char \x3d DIGIT+;\nhex-val \x3d \x3c'x'\x3e hex-char\n          [ (\x3c'.'\x3e hex-char)+ | ('-' hex-char) ];\nhex-char \x3d HEXDIG+;\nNUM \x3d DIGIT+;\n\x3cDIGIT\x3e \x3d #'[0-9]';\n\x3cHEXDIG\x3e \x3d #'[0-9a-fA-F]';\nopt-whitespace \x3d #'\\s*(?:;.*?(?:\\u000D?\\u000A\\s*|$))*';\nwhitespace \x3d #'\\s+(?:;.*?\\u000D?\\u000A\\s*)*';\nregexp \x3d #\"#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n       | #\"#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\"\n";
instaparse.abnf.format = function instaparse$abnf$format() {
  var args__15377__auto__ = [];
  var len__15370__auto___18118 = arguments.length;
  var i__15371__auto___18119 = 0;
  while (true) {
    if (i__15371__auto___18119 < len__15370__auto___18118) {
      args__15377__auto__.push(arguments[i__15371__auto___18119]);
      var G__18120 = i__15371__auto___18119 + 1;
      i__15371__auto___18119 = G__18120;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return instaparse.abnf.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
instaparse.abnf.format.cljs$core$IFn$_invoke$arity$variadic = function(fmt, args) {
  return cljs.core.apply.call(null, goog.string.format, fmt, args);
};
instaparse.abnf.format.cljs$lang$maxFixedArity = 1;
instaparse.abnf.format.cljs$lang$applyTo = function(seq18116) {
  var G__18117 = cljs.core.first.call(null, seq18116);
  var seq18116__$1 = cljs.core.next.call(null, seq18116);
  return instaparse.abnf.format.cljs$core$IFn$_invoke$arity$variadic(G__18117, seq18116__$1);
};
instaparse.abnf.get_char_combinator = function instaparse$abnf$get_char_combinator() {
  var args__15377__auto__ = [];
  var len__15370__auto___18127 = arguments.length;
  var i__15371__auto___18128 = 0;
  while (true) {
    if (i__15371__auto___18128 < len__15370__auto___18127) {
      args__15377__auto__.push(arguments[i__15371__auto___18128]);
      var G__18129 = i__15371__auto___18128 + 1;
      i__15371__auto___18128 = G__18129;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 0 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(0), 0) : null;
  return instaparse.abnf.get_char_combinator.cljs$core$IFn$_invoke$arity$variadic(argseq__15378__auto__);
};
instaparse.abnf.get_char_combinator.cljs$core$IFn$_invoke$arity$variadic = function(nums) {
  if (cljs.core._EQ_.call(null, "-", cljs.core.second.call(null, nums))) {
    var vec__18122 = nums;
    var lo = cljs.core.nth.call(null, vec__18122, 0, null);
    var _ = cljs.core.nth.call(null, vec__18122, 1, null);
    var hi = cljs.core.nth.call(null, vec__18122, 2, null);
    return instaparse.combinators_source.unicode_char.call(null, lo, hi);
  } else {
    return cljs.core.apply.call(null, instaparse.combinators_source.cat, function() {
      var iter__15084__auto__ = function instaparse$abnf$iter__18123(s__18124) {
        return new cljs.core.LazySeq(null, function() {
          var s__18124__$1 = s__18124;
          while (true) {
            var temp__4425__auto__ = cljs.core.seq.call(null, s__18124__$1);
            if (temp__4425__auto__) {
              var s__18124__$2 = temp__4425__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__18124__$2)) {
                var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18124__$2);
                var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
                var b__18126 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
                if (function() {
                  var i__18125 = 0;
                  while (true) {
                    if (i__18125 < size__15083__auto__) {
                      var n = cljs.core._nth.call(null, c__15082__auto__, i__18125);
                      cljs.core.chunk_append.call(null, b__18126, instaparse.combinators_source.unicode_char.call(null, n));
                      var G__18130 = i__18125 + 1;
                      i__18125 = G__18130;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18126), instaparse$abnf$iter__18123.call(null, cljs.core.chunk_rest.call(null, s__18124__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18126), null);
                }
              } else {
                var n = cljs.core.first.call(null, s__18124__$2);
                return cljs.core.cons.call(null, instaparse.combinators_source.unicode_char.call(null, n), instaparse$abnf$iter__18123.call(null, cljs.core.rest.call(null, s__18124__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__15084__auto__.call(null, nums);
    }());
  }
};
instaparse.abnf.get_char_combinator.cljs$lang$maxFixedArity = 0;
instaparse.abnf.get_char_combinator.cljs$lang$applyTo = function(seq18121) {
  return instaparse.abnf.get_char_combinator.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq18121));
};
instaparse.abnf.project = function instaparse$abnf$project(m, ks) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__15084__auto__ = function instaparse$abnf$project_$_iter__18135(s__18136) {
      return new cljs.core.LazySeq(null, function() {
        var s__18136__$1 = s__18136;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__18136__$1);
          if (temp__4425__auto__) {
            var s__18136__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__18136__$2)) {
              var c__15082__auto__ = cljs.core.chunk_first.call(null, s__18136__$2);
              var size__15083__auto__ = cljs.core.count.call(null, c__15082__auto__);
              var b__18138 = cljs.core.chunk_buffer.call(null, size__15083__auto__);
              if (function() {
                var i__18137 = 0;
                while (true) {
                  if (i__18137 < size__15083__auto__) {
                    var k = cljs.core._nth.call(null, c__15082__auto__, i__18137);
                    if (cljs.core.contains_QMARK_.call(null, m, k)) {
                      cljs.core.chunk_append.call(null, b__18138, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null));
                      var G__18139 = i__18137 + 1;
                      i__18137 = G__18139;
                      continue;
                    } else {
                      var G__18140 = i__18137 + 1;
                      i__18137 = G__18140;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18138), instaparse$abnf$project_$_iter__18135.call(null, cljs.core.chunk_rest.call(null, s__18136__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18138), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__18136__$2);
              if (cljs.core.contains_QMARK_.call(null, m, k)) {
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null), instaparse$abnf$project_$_iter__18135.call(null, cljs.core.rest.call(null, s__18136__$2)));
              } else {
                var G__18141 = cljs.core.rest.call(null, s__18136__$2);
                s__18136__$1 = G__18141;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__15084__auto__.call(null, ks);
  }());
};
instaparse.abnf.merge_core = function instaparse$abnf$merge_core(grammar_map) {
  return cljs.core.merge.call(null, instaparse.abnf.project.call(null, instaparse.abnf.abnf_core, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map)))), grammar_map);
};
instaparse.abnf.hide_tag_QMARK_ = function instaparse$abnf$hide_tag_QMARK_(p) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(p), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.abnf.alt_preserving_hide_tag = function instaparse$abnf$alt_preserving_hide_tag(p1, p2) {
  var hide_tag_p1_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p1);
  var hide_tag_p2_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p2);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = hide_tag_p1_QMARK_;
    if (cljs.core.truth_(and__14319__auto__)) {
      return hide_tag_p2_QMARK_;
    } else {
      return and__14319__auto__;
    }
  }())) {
    return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
  } else {
    if (cljs.core.truth_(hide_tag_p1_QMARK_)) {
      return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), p2));
    } else {
      if (cljs.core.truth_(hide_tag_p2_QMARK_)) {
        return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, p1, cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
      } else {
        return instaparse.combinators_source.alt.call(null, p1, p2);
      }
    }
  }
};
instaparse.abnf.abnf_transformer = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "hide-tag-rule", "hide-tag-rule", 150267589), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "bin-char", "bin-char", -1662780697), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "rulename-right", "rulename-right", 1125609193), new cljs.core.Keyword(null, "NUM", "NUM", 
-218662260), new cljs.core.Keyword(null, "char-val", "char-val", 1408617933), new cljs.core.Keyword(null, "hide", "hide", -596913169), new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.Keyword(null, "hex-char", "hex-char", 764443568), new cljs.core.Keyword(null, "bin-val", "bin-val", 1705209105), new cljs.core.Keyword(null, "dec-val", "dec-val", -1263870894), new cljs.core.Keyword(null, "concatenation", "concatenation", -951369614), new cljs.core.Keyword(null, "alternation", 
"alternation", -1162147630), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "repetition", "repetition", 1938392115), new cljs.core.Keyword(null, "rulename-left", "rulename-left", -1824251564), new cljs.core.Keyword(null, "repeat", "repeat", 832692087), new cljs.core.Keyword(null, "hex-val", "hex-val", 1267737401), new cljs.core.Keyword(null, "dec-char", "dec-char", -646625154)], [instaparse.combinators_source.neg, function(tag, rule) {
  return new cljs.core.PersistentArrayMap.fromArray([tag, instaparse.combinators_source.hide_tag.call(null, rule)], true, false);
}, instaparse.combinators_source.look, function() {
  var G__18146__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 2);
  };
  var G__18146 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      var G__18147__i = 0, G__18147__a = new Array(arguments.length - 0);
      while (G__18147__i < G__18147__a.length) {
        G__18147__a[G__18147__i] = arguments[G__18147__i + 0];
        ++G__18147__i;
      }
      cs = new cljs.core.IndexedSeq(G__18147__a, 0);
    }
    return G__18146__delegate.call(this, cs);
  };
  G__18146.cljs$lang$maxFixedArity = 0;
  G__18146.cljs$lang$applyTo = function(arglist__18148) {
    var cs = cljs.core.seq(arglist__18148);
    return G__18146__delegate(cs);
  };
  G__18146.cljs$core$IFn$_invoke$arity$variadic = G__18146__delegate;
  return G__18146;
}(), cljs.core.hash_map, function() {
  var G__18149__delegate = function(rest__18143_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__18143_SHARP_))));
    } else {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__18143_SHARP_)));
    }
  };
  var G__18149 = function(var_args) {
    var rest__18143_SHARP_ = null;
    if (arguments.length > 0) {
      var G__18150__i = 0, G__18150__a = new Array(arguments.length - 0);
      while (G__18150__i < G__18150__a.length) {
        G__18150__a[G__18150__i] = arguments[G__18150__i + 0];
        ++G__18150__i;
      }
      rest__18143_SHARP_ = new cljs.core.IndexedSeq(G__18150__a, 0);
    }
    return G__18149__delegate.call(this, rest__18143_SHARP_);
  };
  G__18149.cljs$lang$maxFixedArity = 0;
  G__18149.cljs$lang$applyTo = function(arglist__18151) {
    var rest__18143_SHARP_ = cljs.core.seq(arglist__18151);
    return G__18149__delegate(rest__18143_SHARP_);
  };
  G__18149.cljs$core$IFn$_invoke$arity$variadic = G__18149__delegate;
  return G__18149;
}(), function() {
  var G__18152__delegate = function(rest__18144_SHARP_) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, rest__18144_SHARP_));
  };
  var G__18152 = function(var_args) {
    var rest__18144_SHARP_ = null;
    if (arguments.length > 0) {
      var G__18153__i = 0, G__18153__a = new Array(arguments.length - 0);
      while (G__18153__i < G__18153__a.length) {
        G__18153__a[G__18153__i] = arguments[G__18153__i + 0];
        ++G__18153__i;
      }
      rest__18144_SHARP_ = new cljs.core.IndexedSeq(G__18153__a, 0);
    }
    return G__18152__delegate.call(this, rest__18144_SHARP_);
  };
  G__18152.cljs$lang$maxFixedArity = 0;
  G__18152.cljs$lang$applyTo = function(arglist__18154) {
    var rest__18144_SHARP_ = cljs.core.seq(arglist__18154);
    return G__18152__delegate(rest__18144_SHARP_);
  };
  G__18152.cljs$core$IFn$_invoke$arity$variadic = G__18152__delegate;
  return G__18152;
}(), function() {
  var G__18155__delegate = function(cs) {
    return instaparse.combinators_source.string_ci.call(null, cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__18155 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      var G__18156__i = 0, G__18156__a = new Array(arguments.length - 0);
      while (G__18156__i < G__18156__a.length) {
        G__18156__a[G__18156__i] = arguments[G__18156__i + 0];
        ++G__18156__i;
      }
      cs = new cljs.core.IndexedSeq(G__18156__a, 0);
    }
    return G__18155__delegate.call(this, cs);
  };
  G__18155.cljs$lang$maxFixedArity = 0;
  G__18155.cljs$lang$applyTo = function(arglist__18157) {
    var cs = cljs.core.seq(arglist__18157);
    return G__18155__delegate(cs);
  };
  G__18155.cljs$core$IFn$_invoke$arity$variadic = G__18155__delegate;
  return G__18155;
}(), instaparse.combinators_source.hide, instaparse.combinators_source.opt, function() {
  var G__18158__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 16);
  };
  var G__18158 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      var G__18159__i = 0, G__18159__a = new Array(arguments.length - 0);
      while (G__18159__i < G__18159__a.length) {
        G__18159__a[G__18159__i] = arguments[G__18159__i + 0];
        ++G__18159__i;
      }
      cs = new cljs.core.IndexedSeq(G__18159__a, 0);
    }
    return G__18158__delegate.call(this, cs);
  };
  G__18158.cljs$lang$maxFixedArity = 0;
  G__18158.cljs$lang$applyTo = function(arglist__18160) {
    var cs = cljs.core.seq(arglist__18160);
    return G__18158__delegate(cs);
  };
  G__18158.cljs$core$IFn$_invoke$arity$variadic = G__18158__delegate;
  return G__18158;
}(), instaparse.abnf.get_char_combinator, instaparse.abnf.get_char_combinator, instaparse.combinators_source.cat, instaparse.combinators_source.alt, cljs.core.comp.call(null, instaparse.combinators_source.regexp, instaparse.cfg.process_regexp), function() {
  var G__18161 = null;
  var G__18161__1 = function(element) {
    return element;
  };
  var G__18161__2 = function(repeat, element) {
    if (cljs.core.empty_QMARK_.call(null, repeat)) {
      return instaparse.combinators_source.star.call(null, element);
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, repeat), 2)) {
        return instaparse.combinators_source.rep.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), element);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
          return instaparse.combinators_source.plus.call(null, element);
        } else {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
            return instaparse.combinators_source.opt.call(null, element);
          } else {
            return instaparse.combinators_source.rep.call(null, function() {
              var or__14331__auto__ = (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__14331__auto__)) {
                return or__14331__auto__;
              } else {
                return 0;
              }
            }(), function() {
              var or__14331__auto__ = (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__14331__auto__)) {
                return or__14331__auto__;
              } else {
                return Infinity;
              }
            }(), element);
          }
        }
      }
    }
  };
  G__18161 = function(repeat, element) {
    switch(arguments.length) {
      case 1:
        return G__18161__1.call(this, repeat);
      case 2:
        return G__18161__2.call(this, repeat, element);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18161.cljs$core$IFn$_invoke$arity$1 = G__18161__1;
  G__18161.cljs$core$IFn$_invoke$arity$2 = G__18161__2;
  return G__18161;
}(), function() {
  var G__18162__delegate = function(rest__18142_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__18142_SHARP_)));
    } else {
      return cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__18142_SHARP_));
    }
  };
  var G__18162 = function(var_args) {
    var rest__18142_SHARP_ = null;
    if (arguments.length > 0) {
      var G__18163__i = 0, G__18163__a = new Array(arguments.length - 0);
      while (G__18163__i < G__18163__a.length) {
        G__18163__a[G__18163__i] = arguments[G__18163__i + 0];
        ++G__18163__i;
      }
      rest__18142_SHARP_ = new cljs.core.IndexedSeq(G__18163__a, 0);
    }
    return G__18162__delegate.call(this, rest__18142_SHARP_);
  };
  G__18162.cljs$lang$maxFixedArity = 0;
  G__18162.cljs$lang$applyTo = function(arglist__18164) {
    var rest__18142_SHARP_ = cljs.core.seq(arglist__18164);
    return G__18162__delegate(rest__18142_SHARP_);
  };
  G__18162.cljs$core$IFn$_invoke$arity$variadic = G__18162__delegate;
  return G__18162;
}(), function() {
  var G__18165__delegate = function(items) {
    var G__18145 = cljs.core.count.call(null, items);
    switch(G__18145) {
      case 1:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return cljs.core.PersistentArrayMap.EMPTY;
        } else {
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.first.call(null, items)], null);
        }
        break;
      case 2:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.second.call(null, items)], null);
        } else {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items)], null);
        }
        break;
      case 3:
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.nth.call(null, items, 2)], null);
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(cljs.core.count.call(null, items))].join(""));;
    }
  };
  var G__18165 = function(var_args) {
    var items = null;
    if (arguments.length > 0) {
      var G__18167__i = 0, G__18167__a = new Array(arguments.length - 0);
      while (G__18167__i < G__18167__a.length) {
        G__18167__a[G__18167__i] = arguments[G__18167__i + 0];
        ++G__18167__i;
      }
      items = new cljs.core.IndexedSeq(G__18167__a, 0);
    }
    return G__18165__delegate.call(this, items);
  };
  G__18165.cljs$lang$maxFixedArity = 0;
  G__18165.cljs$lang$applyTo = function(arglist__18168) {
    var items = cljs.core.seq(arglist__18168);
    return G__18165__delegate(items);
  };
  G__18165.cljs$core$IFn$_invoke$arity$variadic = G__18165__delegate;
  return G__18165;
}(), instaparse.abnf.get_char_combinator, function() {
  var G__18169__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__18169 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      var G__18170__i = 0, G__18170__a = new Array(arguments.length - 0);
      while (G__18170__i < G__18170__a.length) {
        G__18170__a[G__18170__i] = arguments[G__18170__i + 0];
        ++G__18170__i;
      }
      cs = new cljs.core.IndexedSeq(G__18170__a, 0);
    }
    return G__18169__delegate.call(this, cs);
  };
  G__18169.cljs$lang$maxFixedArity = 0;
  G__18169.cljs$lang$applyTo = function(arglist__18171) {
    var cs = cljs.core.seq(arglist__18171);
    return G__18169__delegate(cs);
  };
  G__18169.cljs$core$IFn$_invoke$arity$variadic = G__18169__delegate;
  return G__18169;
}()]);
instaparse.abnf.abnf_parser = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.cfg.ebnf.call(null, instaparse.abnf.abnf_grammar));
instaparse.abnf.rules__GT_grammar_map = function instaparse$abnf$rules__GT_grammar_map(rules) {
  return instaparse.abnf.merge_core.call(null, cljs.core.apply.call(null, cljs.core.merge_with, instaparse.abnf.alt_preserving_hide_tag, rules));
};
instaparse.abnf.abnf = function instaparse$abnf$abnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /=/, spec))) {
    var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
    if (rule_tree instanceof instaparse.gll.Failure) {
      throw [cljs.core.str("Error parsing grammar specification:\n"), cljs.core.str(function() {
        var sb__15286__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_18176_18180 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_18177_18181 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18176_18180, _STAR_print_fn_STAR_18177_18181, sb__15286__auto__, rule_tree) {
          return function(x__15287__auto__) {
            return sb__15286__auto__.append(x__15287__auto__);
          };
        }(_STAR_print_newline_STAR_18176_18180, _STAR_print_fn_STAR_18177_18181, sb__15286__auto__, rule_tree);
        try {
          cljs.core.println.call(null, rule_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18177_18181;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18176_18180;
        }
        return [cljs.core.str(sb__15286__auto__)].join("");
      }())].join("");
    } else {
      return instaparse.abnf.rules__GT_grammar_map.call(null, instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree));
    }
  } else {
    var rhs_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "alternation", "alternation", -1162147630), spec, false);
    if (rhs_tree instanceof instaparse.gll.Failure) {
      throw [cljs.core.str("Error parsing grammar specification:\n"), cljs.core.str(function() {
        var sb__15286__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_18178_18182 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_18179_18183 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18178_18182, _STAR_print_fn_STAR_18179_18183, sb__15286__auto__, rhs_tree) {
          return function(x__15287__auto__) {
            return sb__15286__auto__.append(x__15287__auto__);
          };
        }(_STAR_print_newline_STAR_18178_18182, _STAR_print_fn_STAR_18179_18183, sb__15286__auto__, rhs_tree);
        try {
          cljs.core.println.call(null, rhs_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18179_18183;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18178_18182;
        }
        return [cljs.core.str(sb__15286__auto__)].join("");
      }())].join("");
    } else {
      return instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rhs_tree);
    }
  }
};
instaparse.abnf.build_parser = function instaparse$abnf$build_parser(spec, output_format) {
  var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
  if (rule_tree instanceof instaparse.gll.Failure) {
    throw [cljs.core.str("Error parsing grammar specification:\n"), cljs.core.str(function() {
      var sb__15286__auto__ = new goog.string.StringBuffer;
      var _STAR_print_newline_STAR_18186_18188 = cljs.core._STAR_print_newline_STAR_;
      var _STAR_print_fn_STAR_18187_18189 = cljs.core._STAR_print_fn_STAR_;
      cljs.core._STAR_print_newline_STAR_ = true;
      cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_18186_18188, _STAR_print_fn_STAR_18187_18189, sb__15286__auto__, rule_tree) {
        return function(x__15287__auto__) {
          return sb__15286__auto__.append(x__15287__auto__);
        };
      }(_STAR_print_newline_STAR_18186_18188, _STAR_print_fn_STAR_18187_18189, sb__15286__auto__, rule_tree);
      try {
        cljs.core.println.call(null, rule_tree);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_18187_18189;
        cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_18186_18188;
      }
      return [cljs.core.str(sb__15286__auto__)].join("");
    }())].join("");
  } else {
    var rules = instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree);
    var grammar_map = instaparse.abnf.rules__GT_grammar_map.call(null, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, cljs.core.first.call(null, rules)));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
goog.provide("instaparse.viz");
goog.require("cljs.core");
instaparse.viz.span = function instaparse$viz$span(tree) {
  var m = cljs.core.meta.call(null, tree);
  var s = (new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620)).cljs$core$IFn$_invoke$arity$1(m);
  var e = (new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = s;
    if (cljs.core.truth_(and__14319__auto__)) {
      return e;
    } else {
      return and__14319__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, e], null);
  } else {
    return null;
  }
};
goog.provide("instaparse.repeat");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.viz");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.failure");
instaparse.repeat.empty_result_QMARK_ = function instaparse$repeat$empty_result_QMARK_(result) {
  return cljs.core.vector_QMARK_.call(null, result) && cljs.core._EQ_.call(null, cljs.core.count.call(null, result), 1) || cljs.core.map_QMARK_.call(null, result) && cljs.core.contains_QMARK_.call(null, result, new cljs.core.Keyword(null, "tag", "tag", -1290361223)) && cljs.core.empty_QMARK_.call(null, cljs.core.get.call(null, result, new cljs.core.Keyword(null, "content", "content", 15833224))) || cljs.core.empty_QMARK_.call(null, result);
};
instaparse.repeat.failure_signal = instaparse.gll.__GT_Failure.call(null, null, null);
instaparse.repeat.get_end = function instaparse$repeat$get_end() {
  var args17681 = [];
  var len__15370__auto___17686 = arguments.length;
  var i__15371__auto___17687 = 0;
  while (true) {
    if (i__15371__auto___17687 < len__15370__auto___17686) {
      args17681.push(arguments[i__15371__auto___17687]);
      var G__17688 = i__15371__auto___17687 + 1;
      i__15371__auto___17687 = G__17688;
      continue;
    } else {
    }
    break;
  }
  var G__17683 = args17681.length;
  switch(G__17683) {
    case 1:
      return instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17681.length)].join(""));;
  }
};
instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$1 = function(parse) {
  var vec__17684 = instaparse.viz.span.call(null, parse);
  var start = cljs.core.nth.call(null, vec__17684, 0, null);
  var end = cljs.core.nth.call(null, vec__17684, 1, null);
  if (cljs.core.truth_(end)) {
    return cljs.core.long$.call(null, end);
  } else {
    return cljs.core.count.call(null, parse);
  }
};
instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$2 = function(parse, index) {
  var vec__17685 = instaparse.viz.span.call(null, parse);
  var start = cljs.core.nth.call(null, vec__17685, 0, null);
  var end = cljs.core.nth.call(null, vec__17685, 1, null);
  if (cljs.core.truth_(end)) {
    return cljs.core.long$.call(null, end);
  } else {
    return index + cljs.core.count.call(null, parse);
  }
};
instaparse.repeat.get_end.cljs$lang$maxFixedArity = 2;
instaparse.repeat.parse_from_index = function instaparse$repeat$parse_from_index(grammar, initial_parser, text, segment, index) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, segment);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, initial_parser], null), instaparse.gll.TopListener.call(null, tramp));
  return instaparse.gll.run.call(null, tramp);
};
instaparse.repeat.select_parse = function instaparse$repeat$select_parse(grammar, initial_parser, text, segment, index, parses) {
  var length = cljs.core.count.call(null, text);
  var parses__$1 = cljs.core.seq.call(null, parses);
  while (true) {
    if (parses__$1) {
      var parse = cljs.core.first.call(null, parses__$1);
      var vec__17691 = instaparse.viz.span.call(null, parse);
      var start = cljs.core.nth.call(null, vec__17691, 0, null);
      var end = cljs.core.nth.call(null, vec__17691, 1, null);
      var end__$1 = cljs.core.truth_(end) ? end : index + cljs.core.count.call(null, parse);
      if (cljs.core._EQ_.call(null, end__$1, length)) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, null], null);
      } else {
        var temp__4423__auto__ = cljs.core.seq.call(null, instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, end__$1));
        if (temp__4423__auto__) {
          var follow_ups = temp__4423__auto__;
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, follow_ups], null);
        } else {
          var G__17692 = cljs.core.next.call(null, parses__$1);
          parses__$1 = G__17692;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
instaparse.repeat.repeat_parse_hiccup = function instaparse$repeat$repeat_parse_hiccup() {
  var args17693 = [];
  var len__15370__auto___17700 = arguments.length;
  var i__15371__auto___17701 = 0;
  while (true) {
    if (i__15371__auto___17701 < len__15370__auto___17700) {
      args17693.push(arguments[i__15371__auto___17701]);
      var G__17702 = i__15371__auto___17701 + 1;
      i__15371__auto___17701 = G__17702;
      continue;
    } else {
    }
    break;
  }
  var G__17695 = args17693.length;
  switch(G__17695) {
    case 5:
      return instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17693.length)].join(""));;
  }
};
instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5 = function(grammar, initial_parser, root_tag, text, segment) {
  return instaparse.repeat.repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, segment, 0);
};
instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6 = function(grammar, initial_parser, root_tag, text, segment, index) {
  var length = cljs.core.count.call(null, text);
  var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
  var index__$1 = cljs.core.long$.call(null, index);
  var parses = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null));
  var G__17697 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
  var vec__17698 = G__17697;
  var parse = cljs.core.nth.call(null, vec__17698, 0, null);
  var end = cljs.core.nth.call(null, vec__17698, 1, null);
  var follow_ups = cljs.core.nth.call(null, vec__17698, 2, null);
  var selection = vec__17698;
  var index__$2 = index__$1;
  var parses__$1 = parses;
  var G__17697__$1 = G__17697;
  while (true) {
    var index__$3 = index__$2;
    var parses__$2 = parses__$1;
    var vec__17699 = G__17697__$1;
    var parse__$1 = cljs.core.nth.call(null, vec__17699, 0, null);
    var end__$1 = cljs.core.nth.call(null, vec__17699, 1, null);
    var follow_ups__$1 = cljs.core.nth.call(null, vec__17699, 2, null);
    var selection__$1 = vec__17699;
    if (selection__$1 == null) {
      return instaparse.repeat.failure_signal;
    } else {
      if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
        return instaparse.repeat.failure_signal;
      } else {
        if (follow_ups__$1 == null) {
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", 
          "end-index", "instaparse.gll/end-index", -1851404441), length], null));
        } else {
          var G__17704 = cljs.core.long$.call(null, end__$1);
          var G__17705 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
          var G__17706 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
          index__$2 = G__17704;
          parses__$1 = G__17705;
          G__17697__$1 = G__17706;
          continue;
        }
      }
    }
    break;
  }
};
instaparse.repeat.repeat_parse_hiccup.cljs$lang$maxFixedArity = 6;
instaparse.repeat.repeat_parse_enlive = function instaparse$repeat$repeat_parse_enlive() {
  var args17707 = [];
  var len__15370__auto___17714 = arguments.length;
  var i__15371__auto___17715 = 0;
  while (true) {
    if (i__15371__auto___17715 < len__15370__auto___17714) {
      args17707.push(arguments[i__15371__auto___17715]);
      var G__17716 = i__15371__auto___17715 + 1;
      i__15371__auto___17715 = G__17716;
      continue;
    } else {
    }
    break;
  }
  var G__17709 = args17707.length;
  switch(G__17709) {
    case 5:
      return instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17707.length)].join(""));;
  }
};
instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5 = function(grammar, initial_parser, root_tag, text, segment) {
  return instaparse.repeat.repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, segment, 0);
};
instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6 = function(grammar, initial_parser, root_tag, text, segment, index) {
  var length = cljs.core.count.call(null, text);
  var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
  var index__$1 = cljs.core.long$.call(null, index);
  var parses = instaparse.auto_flatten_seq.EMPTY;
  var G__17711 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
  var vec__17712 = G__17711;
  var parse = cljs.core.nth.call(null, vec__17712, 0, null);
  var end = cljs.core.nth.call(null, vec__17712, 1, null);
  var follow_ups = cljs.core.nth.call(null, vec__17712, 2, null);
  var selection = vec__17712;
  var index__$2 = index__$1;
  var parses__$1 = parses;
  var G__17711__$1 = G__17711;
  while (true) {
    var index__$3 = index__$2;
    var parses__$2 = parses__$1;
    var vec__17713 = G__17711__$1;
    var parse__$1 = cljs.core.nth.call(null, vec__17713, 0, null);
    var end__$1 = cljs.core.nth.call(null, vec__17713, 1, null);
    var follow_ups__$1 = cljs.core.nth.call(null, vec__17713, 2, null);
    var selection__$1 = vec__17713;
    if (selection__$1 == null) {
      return instaparse.repeat.failure_signal;
    } else {
      if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
        return instaparse.repeat.failure_signal;
      } else {
        if (follow_ups__$1 == null) {
          return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.seq.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1))], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), 
          new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null));
        } else {
          var G__17718 = cljs.core.long$.call(null, end__$1);
          var G__17719 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
          var G__17720 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
          index__$2 = G__17718;
          parses__$1 = G__17719;
          G__17711__$1 = G__17720;
          continue;
        }
      }
    }
    break;
  }
};
instaparse.repeat.repeat_parse_enlive.cljs$lang$maxFixedArity = 6;
instaparse.repeat.repeat_parse_no_tag = function instaparse$repeat$repeat_parse_no_tag() {
  var args17721 = [];
  var len__15370__auto___17728 = arguments.length;
  var i__15371__auto___17729 = 0;
  while (true) {
    if (i__15371__auto___17729 < len__15370__auto___17728) {
      args17721.push(arguments[i__15371__auto___17729]);
      var G__17730 = i__15371__auto___17729 + 1;
      i__15371__auto___17729 = G__17730;
      continue;
    } else {
    }
    break;
  }
  var G__17723 = args17721.length;
  switch(G__17723) {
    case 4:
      return instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17721.length)].join(""));;
  }
};
instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4 = function(grammar, initial_parser, text, segment) {
  return instaparse.repeat.repeat_parse_no_tag.call(null, grammar, initial_parser, text, segment, 0);
};
instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5 = function(grammar, initial_parser, text, segment, index) {
  var length = cljs.core.count.call(null, text);
  var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
  var index__$1 = cljs.core.long$.call(null, index);
  var parses = instaparse.auto_flatten_seq.EMPTY;
  var G__17725 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
  var vec__17726 = G__17725;
  var parse = cljs.core.nth.call(null, vec__17726, 0, null);
  var end = cljs.core.nth.call(null, vec__17726, 1, null);
  var follow_ups = cljs.core.nth.call(null, vec__17726, 2, null);
  var selection = vec__17726;
  var index__$2 = index__$1;
  var parses__$1 = parses;
  var G__17725__$1 = G__17725;
  while (true) {
    var index__$3 = index__$2;
    var parses__$2 = parses__$1;
    var vec__17727 = G__17725__$1;
    var parse__$1 = cljs.core.nth.call(null, vec__17727, 0, null);
    var end__$1 = cljs.core.nth.call(null, vec__17727, 1, null);
    var follow_ups__$1 = cljs.core.nth.call(null, vec__17727, 2, null);
    var selection__$1 = vec__17727;
    if (selection__$1 == null) {
      return instaparse.repeat.failure_signal;
    } else {
      if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
        return instaparse.repeat.failure_signal;
      } else {
        if (follow_ups__$1 == null) {
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], 
          null));
        } else {
          var G__17732 = cljs.core.long$.call(null, end__$1);
          var G__17733 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
          var G__17734 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
          index__$2 = G__17732;
          parses__$1 = G__17733;
          G__17725__$1 = G__17734;
          continue;
        }
      }
    }
    break;
  }
};
instaparse.repeat.repeat_parse_no_tag.cljs$lang$maxFixedArity = 5;
instaparse.repeat.repeat_parse = function instaparse$repeat$repeat_parse() {
  var args17735 = [];
  var len__15370__auto___17738 = arguments.length;
  var i__15371__auto___17739 = 0;
  while (true) {
    if (i__15371__auto___17739 < len__15370__auto___17738) {
      args17735.push(arguments[i__15371__auto___17739]);
      var G__17740 = i__15371__auto___17739 + 1;
      i__15371__auto___17739 = G__17740;
      continue;
    } else {
    }
    break;
  }
  var G__17737 = args17735.length;
  switch(G__17737) {
    case 4:
      return instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args17735.length)].join(""));;
  }
};
instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4 = function(grammar, initial_parser, output_format, text) {
  return instaparse.repeat.repeat_parse_no_tag.call(null, grammar, initial_parser, text, instaparse.gll.text__GT_segment.call(null, text));
};
instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5 = function(grammar, initial_parser, output_format, root_tag, text) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, output_format))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "output-format", "output-format", -185851149, null))))].join(""));
  }
  if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238))) {
    return instaparse.repeat.repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.text__GT_segment.call(null, text));
  } else {
    if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921))) {
      return instaparse.repeat.repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.text__GT_segment.call(null, text));
    } else {
      return null;
    }
  }
};
instaparse.repeat.repeat_parse.cljs$lang$maxFixedArity = 5;
instaparse.repeat.repeat_parse_with_header = function instaparse$repeat$repeat_parse_with_header(grammar, header_parser, repeating_parser, output_format, root_tag, text) {
  var segment = instaparse.gll.text__GT_segment.call(null, text);
  var length = cljs.core.count.call(null, text);
  var header_results = instaparse.repeat.parse_from_index.call(null, grammar, header_parser, text, segment, 0);
  if (cljs.core.truth_(function() {
    var or__14331__auto__ = cljs.core.empty_QMARK_.call(null, header_results);
    if (or__14331__auto__) {
      return or__14331__auto__;
    } else {
      return (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(header_parser);
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_result = cljs.core.apply.call(null, cljs.core.max_key, instaparse.repeat.get_end, header_results);
    var end = instaparse.repeat.get_end.call(null, header_result);
    var repeat_result = instaparse.repeat.repeat_parse_no_tag.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser), text, segment, end);
    var span_meta = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null);
    if (cljs.core.truth_(function() {
      var or__14331__auto__ = repeat_result instanceof instaparse.gll.Failure;
      if (or__14331__auto__) {
        return or__14331__auto__;
      } else {
        var and__14319__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser), new cljs.core.Keyword(null, "star", "star", 279424429));
        if (and__14319__auto__) {
          return instaparse.repeat.empty_result_QMARK_.call(null, repeat_result);
        } else {
          return and__14319__auto__;
        }
      }
    }())) {
      return instaparse.repeat.failure_signal;
    } else {
      var G__17743 = output_format instanceof cljs.core.Keyword ? output_format.fqn : null;
      switch(G__17743) {
        case "enlive":
          return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result)], null), span_meta);
          break;
        case "hiccup":
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null)), header_result), repeat_result)), span_meta);
          break;
        default:
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result), span_meta);
      }
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy_with_header = function instaparse$repeat$try_repeating_parse_strategy_with_header(grammar, text, start_production, start_rule, output_format) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(start_rule);
  var repeating_parser = cljs.core.last.call(null, parsers);
  if (cljs.core.not.call(null, function() {
    var and__14319__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "cat", "cat", -1457810207));
    if (and__14319__auto__) {
      var and__14319__auto____$1 = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "star", "star", 279424429), null, new cljs.core.Keyword(null, "plus", "plus", 211540661), null], null), null)).call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser));
      if (cljs.core.truth_(and__14319__auto____$1)) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(repeating_parser)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser)));
      } else {
        return and__14319__auto____$1;
      }
    } else {
      return and__14319__auto__;
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_parser = cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.butlast.call(null, parsers));
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, null, start_production, text);
    } else {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, output_format, start_production, text);
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy = function instaparse$repeat$try_repeating_parse_strategy(parser, text, start_production) {
  var grammar = (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser);
  var output_format = (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser);
  var start_rule = cljs.core.get.call(null, grammar, start_production);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(start_rule), true)) {
    return instaparse.repeat.failure_signal;
  } else {
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
          if (cljs.core.truth_(instaparse.repeat.empty_result_QMARK_.call(null, result))) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
          if (cljs.core.truth_(instaparse.repeat.empty_result_QMARK_.call(null, result))) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    }
  }
};
instaparse.repeat.used_memory_optimization_QMARK_ = function instaparse$repeat$used_memory_optimization_QMARK_(tree) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), (new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tree)));
};
goog.provide("instaparse.core");
goog.require("cljs.core");
goog.require("instaparse.transform");
goog.require("instaparse.combinators_source");
goog.require("instaparse.abnf");
goog.require("instaparse.gll");
goog.require("instaparse.line_col");
goog.require("instaparse.print");
goog.require("instaparse.cfg");
goog.require("instaparse.reduction");
goog.require("instaparse.failure");
goog.require("instaparse.repeat");
instaparse.core._STAR_default_output_format_STAR_ = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.core.set_default_output_format_BANG_ = function instaparse$core$set_default_output_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, type))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null))))].join(""));
  }
  return instaparse.core._STAR_default_output_format_STAR_ = type;
};
instaparse.core._STAR_default_input_format_STAR_ = new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825);
instaparse.core.set_default_input_format_BANG_ = function instaparse$core$set_default_input_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null)).call(null, type))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null))))].join(""));
  }
  return instaparse.core._STAR_default_input_format_STAR_ = type;
};
instaparse.core.unhide_parser = function instaparse$core$unhide_parser(parser, unhide) {
  var G__17637 = unhide;
  if (cljs.core._EQ_.call(null, null, G__17637)) {
    return parser;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "content", "content", 15833224), G__17637)) {
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all_content.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), G__17637)) {
        return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_tags.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "all", "all", 892129742), G__17637)) {
          return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(unhide)].join(""));
        }
      }
    }
  }
};
instaparse.core.parse = function instaparse$core$parse() {
  var args__15377__auto__ = [];
  var len__15370__auto___17644 = arguments.length;
  var i__15371__auto___17645 = 0;
  while (true) {
    if (i__15371__auto___17645 < len__15370__auto___17644) {
      args__15377__auto__.push(arguments[i__15371__auto___17645]);
      var G__17646 = i__15371__auto___17645 + 1;
      i__15371__auto___17645 = G__17646;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 2 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(2), 0) : null;
  return instaparse.core.parse.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15378__auto__);
};
instaparse.core.parse.cljs$core$IFn$_invoke$arity$variadic = function(parser, text, p__17641) {
  var map__17642 = p__17641;
  var map__17642__$1 = (!(map__17642 == null) ? map__17642.cljs$lang$protocol_mask$partition0$ & 64 || map__17642.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17642) : map__17642;
  var options = map__17642__$1;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
    "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))))].join(""));
  }
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), 
    new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)))))].join(""));
  }
  var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
  var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
  var optimize_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), false);
  var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
  var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
    return instaparse.gll.parse_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
  } else {
    if (cljs.core.truth_(function() {
      var and__14319__auto__ = optimize_QMARK_;
      if (cljs.core.truth_(and__14319__auto__)) {
        return cljs.core.not.call(null, partial_QMARK_);
      } else {
        return and__14319__auto__;
      }
    }())) {
      var result = instaparse.repeat.try_repeating_parse_strategy.call(null, parser__$1, text, start_production);
      if (cljs.core.truth_(instaparse.core.failure_QMARK_.call(null, result))) {
        return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
      } else {
        return result;
      }
    } else {
      return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
    }
  }
};
instaparse.core.parse.cljs$lang$maxFixedArity = 2;
instaparse.core.parse.cljs$lang$applyTo = function(seq17638) {
  var G__17639 = cljs.core.first.call(null, seq17638);
  var seq17638__$1 = cljs.core.next.call(null, seq17638);
  var G__17640 = cljs.core.first.call(null, seq17638__$1);
  var seq17638__$2 = cljs.core.next.call(null, seq17638__$1);
  return instaparse.core.parse.cljs$core$IFn$_invoke$arity$variadic(G__17639, G__17640, seq17638__$2);
};
instaparse.core.parses = function instaparse$core$parses() {
  var args__15377__auto__ = [];
  var len__15370__auto___17653 = arguments.length;
  var i__15371__auto___17654 = 0;
  while (true) {
    if (i__15371__auto___17654 < len__15370__auto___17653) {
      args__15377__auto__.push(arguments[i__15371__auto___17654]);
      var G__17655 = i__15371__auto___17654 + 1;
      i__15371__auto___17654 = G__17655;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 2 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(2), 0) : null;
  return instaparse.core.parses.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__15378__auto__);
};
instaparse.core.parses.cljs$core$IFn$_invoke$arity$variadic = function(parser, text, p__17650) {
  var map__17651 = p__17650;
  var map__17651__$1 = (!(map__17651 == null) ? map__17651.cljs$lang$protocol_mask$partition0$ & 64 || map__17651.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17651) : map__17651;
  var options = map__17651__$1;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
    "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))))].join(""));
  }
  var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
  var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
  var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
  var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
    return instaparse.gll.parses_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
  } else {
    return instaparse.gll.parses.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
  }
};
instaparse.core.parses.cljs$lang$maxFixedArity = 2;
instaparse.core.parses.cljs$lang$applyTo = function(seq17647) {
  var G__17648 = cljs.core.first.call(null, seq17647);
  var seq17647__$1 = cljs.core.next.call(null, seq17647);
  var G__17649 = cljs.core.first.call(null, seq17647__$1);
  var seq17647__$2 = cljs.core.next.call(null, seq17647__$1);
  return instaparse.core.parses.cljs$core$IFn$_invoke$arity$variadic(G__17648, G__17649, seq17647__$2);
};
instaparse.core.Parser = function(grammar, start_production, output_format, __meta, __extmap, __hash) {
  this.grammar = grammar;
  this.start_production = start_production;
  this.output_format = output_format;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__14926__auto__, k__14927__auto__) {
  var self__ = this;
  var this__14926__auto____$1 = this;
  return cljs.core._lookup.call(null, this__14926__auto____$1, k__14927__auto__, null);
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__14928__auto__, k17657, else__14929__auto__) {
  var self__ = this;
  var this__14928__auto____$1 = this;
  var G__17660 = k17657 instanceof cljs.core.Keyword ? k17657.fqn : null;
  switch(G__17660) {
    case "grammar":
      return self__.grammar;
      break;
    case "start-production":
      return self__.start_production;
      break;
    case "output-format":
      return self__.output_format;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k17657, else__14929__auto__);
  }
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__14940__auto__, writer__14941__auto__, opts__14942__auto__) {
  var self__ = this;
  var this__14940__auto____$1 = this;
  var pr_pair__14943__auto__ = function(this__14940__auto____$1) {
    return function(keyval__14944__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, cljs.core.pr_writer, "", " ", "", opts__14942__auto__, keyval__14944__auto__);
    };
  }(this__14940__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__14941__auto__, pr_pair__14943__auto__, "#instaparse.core.Parser{", ", ", "}", opts__14942__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IIterable$ = true;
instaparse.core.Parser.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__17656) {
  var self__ = this;
  var G__17656__$1 = this;
  return new cljs.core.RecordIter(0, G__17656__$1, 3, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)], null), cljs.core._iterator.call(null, self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__14924__auto__) {
  var self__ = this;
  var this__14924__auto____$1 = this;
  return self__.__meta;
};
instaparse.core.Parser.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__14920__auto__) {
  var self__ = this;
  var this__14920__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICounted$_count$arity$1 = function(this__14930__auto__) {
  var self__ = this;
  var this__14930__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.core.Parser.prototype.cljs$core$IHash$_hash$arity$1 = function(this__14921__auto__) {
  var self__ = this;
  var this__14921__auto____$1 = this;
  var h__14747__auto__ = self__.__hash;
  if (!(h__14747__auto__ == null)) {
    return h__14747__auto__;
  } else {
    var h__14747__auto____$1 = cljs.core.hash_imap.call(null, this__14921__auto____$1);
    self__.__hash = h__14747__auto____$1;
    return h__14747__auto____$1;
  }
};
instaparse.core.Parser.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__14922__auto__, other__14923__auto__) {
  var self__ = this;
  var this__14922__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__14319__auto__ = other__14923__auto__;
    if (cljs.core.truth_(and__14319__auto__)) {
      var and__14319__auto____$1 = this__14922__auto____$1.constructor === other__14923__auto__.constructor;
      if (and__14319__auto____$1) {
        return cljs.core.equiv_map.call(null, this__14922__auto____$1, other__14923__auto__);
      } else {
        return and__14319__auto____$1;
      }
    } else {
      return and__14319__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.core.Parser.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__14935__auto__, k__14936__auto__) {
  var self__ = this;
  var this__14935__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), null], null), null), k__14936__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__14935__auto____$1), self__.__meta), k__14936__auto__);
  } else {
    return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__14936__auto__)), null);
  }
};
instaparse.core.Parser.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__14933__auto__, k__14934__auto__, G__17656) {
  var self__ = this;
  var this__14933__auto____$1 = this;
  var pred__17661 = cljs.core.keyword_identical_QMARK_;
  var expr__17662 = k__14934__auto__;
  if (cljs.core.truth_(pred__17661.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__17662))) {
    return new instaparse.core.Parser(G__17656, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__17661.call(null, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), expr__17662))) {
      return new instaparse.core.Parser(self__.grammar, G__17656, self__.output_format, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__17661.call(null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), expr__17662))) {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, G__17656, self__.__meta, self__.__extmap, null);
      } else {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__14934__auto__, G__17656), null);
      }
    }
  }
};
instaparse.core.Parser.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__14938__auto__) {
  var self__ = this;
  var this__14938__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__14925__auto__, G__17656) {
  var self__ = this;
  var this__14925__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, G__17656, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__14931__auto__, entry__14932__auto__) {
  var self__ = this;
  var this__14931__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__14932__auto__)) {
    return cljs.core._assoc.call(null, this__14931__auto____$1, cljs.core._nth.call(null, entry__14932__auto__, 0), cljs.core._nth.call(null, entry__14932__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__14931__auto____$1, entry__14932__auto__);
  }
};
instaparse.core.Parser.prototype.call = function() {
  var G__17665 = null;
  var G__17665__2 = function(self__, text) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text);
  };
  var G__17665__4 = function(self__, text, key1, val1) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1);
  };
  var G__17665__6 = function(self__, text, key1, val1, key2, val2) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
  };
  var G__17665__8 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
  };
  G__17665 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    switch(arguments.length) {
      case 2:
        return G__17665__2.call(this, self__, text);
      case 4:
        return G__17665__4.call(this, self__, text, key1, val1);
      case 6:
        return G__17665__6.call(this, self__, text, key1, val1, key2, val2);
      case 8:
        return G__17665__8.call(this, self__, text, key1, val1, key2, val2, key3, val3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17665.cljs$core$IFn$_invoke$arity$2 = G__17665__2;
  G__17665.cljs$core$IFn$_invoke$arity$4 = G__17665__4;
  G__17665.cljs$core$IFn$_invoke$arity$6 = G__17665__6;
  G__17665.cljs$core$IFn$_invoke$arity$8 = G__17665__8;
  return G__17665;
}();
instaparse.core.Parser.prototype.apply = function(self__, args17659) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17659)));
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$1 = function(text) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$3 = function(text, key1, val1) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$5 = function(text, key1, val1, key2, val2) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$7 = function(text, key1, val1, key2, val2, key3, val3) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
};
instaparse.core.Parser.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "grammar", "grammar", -773107502, null), new cljs.core.Symbol(null, "start-production", "start-production", -1966889232, null), new cljs.core.Symbol(null, "output-format", "output-format", -185851149, null)], null);
};
instaparse.core.Parser.cljs$lang$type = true;
instaparse.core.Parser.cljs$lang$ctorPrSeq = function(this__14960__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.core/Parser");
};
instaparse.core.Parser.cljs$lang$ctorPrWriter = function(this__14960__auto__, writer__14961__auto__) {
  return cljs.core._write.call(null, writer__14961__auto__, "instaparse.core/Parser");
};
instaparse.core.__GT_Parser = function instaparse$core$__GT_Parser(grammar, start_production, output_format) {
  return new instaparse.core.Parser(grammar, start_production, output_format, null, null, null);
};
instaparse.core.map__GT_Parser = function instaparse$core$map__GT_Parser(G__17658) {
  return new instaparse.core.Parser((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__17658), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(G__17658), (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(G__17658), null, cljs.core.dissoc.call(null, G__17658, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), new cljs.core.Keyword(null, 
  "start-production", "start-production", 687546537), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)), null);
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$ = true;
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(parser, writer, _) {
  var parser__$1 = this;
  return cljs.core._write.call(null, writer, instaparse.print.Parser__GT_str.call(null, parser__$1));
};
instaparse.core.parser = function instaparse$core$parser() {
  var args__15377__auto__ = [];
  var len__15370__auto___17675 = arguments.length;
  var i__15371__auto___17676 = 0;
  while (true) {
    if (i__15371__auto___17676 < len__15370__auto___17675) {
      args__15377__auto__.push(arguments[i__15371__auto___17676]);
      var G__17677 = i__15371__auto___17676 + 1;
      i__15371__auto___17676 = G__17677;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic = function(grammar_specification, p__17668) {
  var map__17669 = p__17668;
  var map__17669__$1 = (!(map__17669 == null) ? map__17669.cljs$lang$protocol_mask$partition0$ & 64 || map__17669.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17669) : map__17669;
  var options = map__17669__$1;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481)))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, 
    "options", "options", 1740170016, null), new cljs.core.Keyword(null, "input-format", "input-format", -422703481)))))].join(""));
  }
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), 
    new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)))))].join(""));
  }
  if (function() {
    var ws_parser = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
    return ws_parser == null || cljs.core.contains_QMARK_.call(null, instaparse.core.standard_whitespace_parsers, ws_parser) || cljs.core.map_QMARK_.call(null, ws_parser) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "let", "let", 358118826, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "auto-whitespace", 
    "auto-whitespace", 741152317))], null), cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "standard-whitespace-parsers", "standard-whitespace-parsers", -1387573457, null), new cljs.core.Symbol(null, "ws-parser", 
    "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)), cljs.core.list(new cljs.core.Symbol(null, 
    "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "start-production", "start-production", 687546537)))))))].join(""));
  }
  var input_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481), instaparse.core._STAR_default_input_format_STAR_);
  var build_parser = function() {
    var G__17671 = input_format instanceof cljs.core.Keyword ? input_format.fqn : null;
    switch(G__17671) {
      case "abnf":
        return instaparse.abnf.build_parser;
        break;
      case "ebnf":
        if (cljs.core.truth_(cljs.core.get.call(null, options, new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805)))) {
          return function(G__17671, input_format, map__17669, map__17669__$1, options) {
            return function(spec, output_format) {
              var _STAR_case_insensitive_literals_STAR_17672 = instaparse.cfg._STAR_case_insensitive_literals_STAR_;
              instaparse.cfg._STAR_case_insensitive_literals_STAR_ = true;
              try {
                return instaparse.cfg.build_parser.call(null, spec, output_format);
              } finally {
                instaparse.cfg._STAR_case_insensitive_literals_STAR_ = _STAR_case_insensitive_literals_STAR_17672;
              }
            };
          }(G__17671, input_format, map__17669, map__17669__$1, options);
        } else {
          return instaparse.cfg.build_parser;
        }
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(input_format)].join(""));;
    }
  }();
  var output_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), instaparse.core._STAR_default_output_format_STAR_);
  var start = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), null);
  var built_parser = typeof grammar_specification === "string" ? function() {
    var parser = build_parser.call(null, grammar_specification, output_format);
    if (cljs.core.truth_(start)) {
      return instaparse.core.map__GT_Parser.call(null, cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start));
    } else {
      return instaparse.core.map__GT_Parser.call(null, parser);
    }
  }() : cljs.core.map_QMARK_.call(null, grammar_specification) ? function() {
    var parser = instaparse.cfg.build_parser_from_combinators.call(null, grammar_specification, output_format, start);
    return instaparse.core.map__GT_Parser.call(null, parser);
  }() : cljs.core.vector_QMARK_.call(null, grammar_specification) ? function() {
    var start__$1 = cljs.core.truth_(start) ? start : grammar_specification.call(null, 0);
    var parser = instaparse.cfg.build_parser_from_combinators.call(null, cljs.core.apply.call(null, cljs.core.hash_map, grammar_specification), output_format, start__$1);
    return instaparse.core.map__GT_Parser.call(null, parser);
  }() : null;
  var auto_whitespace = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
  var whitespace_parser = auto_whitespace instanceof cljs.core.Keyword ? cljs.core.get.call(null, instaparse.core.standard_whitespace_parsers, auto_whitespace) : auto_whitespace;
  var temp__4423__auto__ = whitespace_parser;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var map__17673 = temp__4423__auto__;
    var map__17673__$1 = (!(map__17673 == null) ? map__17673.cljs$lang$protocol_mask$partition0$ & 64 || map__17673.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17673) : map__17673;
    var ws_grammar = cljs.core.get.call(null, map__17673__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
    var ws_start = cljs.core.get.call(null, map__17673__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
    return cljs.core.assoc.call(null, built_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.auto_whitespace.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(built_parser), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(built_parser), ws_grammar, ws_start));
  } else {
    return built_parser;
  }
};
instaparse.core.parser.cljs$lang$maxFixedArity = 1;
instaparse.core.parser.cljs$lang$applyTo = function(seq17666) {
  var G__17667 = cljs.core.first.call(null, seq17666);
  var seq17666__$1 = cljs.core.next.call(null, seq17666);
  return instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic(G__17667, seq17666__$1);
};
instaparse.core.failure_QMARK_ = function instaparse$core$failure_QMARK_(result) {
  return result instanceof instaparse.gll.Failure || cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure;
};
instaparse.core.get_failure = function instaparse$core$get_failure(result) {
  if (result instanceof instaparse.gll.Failure) {
    return result;
  } else {
    if (cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure) {
      return cljs.core.meta.call(null, result);
    } else {
      return null;
    }
  }
};
instaparse.core.transform = instaparse.transform.transform;
instaparse.core.add_line_and_column_info_to_metadata = instaparse.line_col.add_line_col_spans;
instaparse.core.standard_whitespace_parsers = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "standard", "standard", -1769206695), instaparse.core.parser.call(null, "whitespace \x3d #'\\s+'"), new cljs.core.Keyword(null, "comma", "comma", 1699024745), instaparse.core.parser.call(null, "whitespace \x3d #'[,\\s]+'")], null);
goog.provide("testdouble.cljs.csv");
goog.require("cljs.core");
goog.require("clojure.string");
testdouble.cljs.csv.wrap_in_quotes = function testdouble$cljs$csv$wrap_in_quotes(s) {
  return [cljs.core.str('"'), cljs.core.str(s), cljs.core.str('"')].join("");
};
testdouble.cljs.csv.seperate = function testdouble$cljs$csv$seperate(data, separator, quote) {
  if (cljs.core.truth_(quote)) {
    return clojure.string.join.call(null, separator, cljs.core.map.call(null, testdouble.cljs.csv.wrap_in_quotes, data));
  } else {
    return clojure.string.join.call(null, separator, data);
  }
};
testdouble.cljs.csv.write_data = function testdouble$cljs$csv$write_data(data, separator, newline, quote) {
  return clojure.string.join.call(null, newline, cljs.core.map.call(null, function(p1__18578_SHARP_) {
    return testdouble.cljs.csv.seperate.call(null, p1__18578_SHARP_, separator, quote);
  }, data));
};
testdouble.cljs.csv.newlines = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "lf", "lf", 1923784290), "\n", new cljs.core.Keyword(null, "cr+lf", "cr+lf", 486534798), "\r\n"], null);
testdouble.cljs.csv.newline_error_message = [cljs.core.str(":newline must be one of ["), cljs.core.str(clojure.string.join.call(null, ",", cljs.core.keys.call(null, testdouble.cljs.csv.newlines))), cljs.core.str("]")].join("");
testdouble.cljs.csv.write_csv = function testdouble$cljs$csv$write_csv() {
  var args__15377__auto__ = [];
  var len__15370__auto___18583 = arguments.length;
  var i__15371__auto___18584 = 0;
  while (true) {
    if (i__15371__auto___18584 < len__15370__auto___18583) {
      args__15377__auto__.push(arguments[i__15371__auto___18584]);
      var G__18585 = i__15371__auto___18584 + 1;
      i__15371__auto___18584 = G__18585;
      continue;
    } else {
    }
    break;
  }
  var argseq__15378__auto__ = 1 < args__15377__auto__.length ? new cljs.core.IndexedSeq(args__15377__auto__.slice(1), 0) : null;
  return testdouble.cljs.csv.write_csv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15378__auto__);
};
testdouble.cljs.csv.write_csv.cljs$core$IFn$_invoke$arity$variadic = function(data, options) {
  var map__18581 = options;
  var map__18581__$1 = (!(map__18581 == null) ? map__18581.cljs$lang$protocol_mask$partition0$ & 64 || map__18581.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18581) : map__18581;
  var separator = cljs.core.get.call(null, map__18581__$1, new cljs.core.Keyword(null, "separator", "separator", -1628749125), ",");
  var newline = cljs.core.get.call(null, map__18581__$1, new cljs.core.Keyword(null, "newline", "newline", 1790071323), new cljs.core.Keyword(null, "lf", "lf", 1923784290));
  var quote = cljs.core.get.call(null, map__18581__$1, new cljs.core.Keyword(null, "quote", "quote", -262615245), false);
  var temp__4423__auto__ = cljs.core.get.call(null, testdouble.cljs.csv.newlines, newline);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var newline_char = temp__4423__auto__;
    return testdouble.cljs.csv.write_data.call(null, data, separator, newline_char, quote);
  } else {
    throw new Error(testdouble.cljs.csv.newline_error_message);
  }
};
testdouble.cljs.csv.write_csv.cljs$lang$maxFixedArity = 1;
testdouble.cljs.csv.write_csv.cljs$lang$applyTo = function(seq18579) {
  var G__18580 = cljs.core.first.call(null, seq18579);
  var seq18579__$1 = cljs.core.next.call(null, seq18579);
  return testdouble.cljs.csv.write_csv.cljs$core$IFn$_invoke$arity$variadic(G__18580, seq18579__$1);
};
goog.provide("qiss.core");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("clojure.browser.repl");
goog.require("testdouble.cljs.csv");
goog.require("instaparse.core");
goog.require("goog.string.format");
goog.require("clojure.string");
goog.require("instaparse.viz");
qiss.core.bool_QMARK_ = function qiss$core$bool_QMARK_(x) {
  return x instanceof java.lang.Boolean;
};
qiss.core.err = function qiss$core$err() {
  var args__15401__auto__ = [];
  var len__15394__auto___18309 = arguments.length;
  var i__15395__auto___18310 = 0;
  while (true) {
    if (i__15395__auto___18310 < len__15394__auto___18309) {
      args__15401__auto__.push(arguments[i__15395__auto___18310]);
      var G__18311 = i__15395__auto___18310 + 1;
      i__15395__auto___18310 = G__18311;
      continue;
    } else {
    }
    break;
  }
  var argseq__15402__auto__ = 0 < args__15401__auto__.length ? new cljs.core.IndexedSeq(args__15401__auto__.slice(0), 0) : null;
  return qiss.core.err.cljs$core$IFn$_invoke$arity$variadic(argseq__15402__auto__);
};
qiss.core.err.cljs$core$IFn$_invoke$arity$variadic = function(x) {
  throw new Error(clojure.string.join.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["'", clojure.string.join.call(null, " ", cljs.core.map.call(null, qiss.core.lose_env, x))], null)));
};
qiss.core.err.cljs$lang$maxFixedArity = 0;
qiss.core.err.cljs$lang$applyTo = function(seq18308) {
  return qiss.core.err.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq18308));
};
qiss.core.exit = function qiss$core$exit() {
  var args18312 = [];
  var len__15394__auto___18315 = arguments.length;
  var i__15395__auto___18316 = 0;
  while (true) {
    if (i__15395__auto___18316 < len__15394__auto___18315) {
      args18312.push(arguments[i__15395__auto___18316]);
      var G__18317 = i__15395__auto___18316 + 1;
      i__15395__auto___18316 = G__18317;
      continue;
    } else {
    }
    break;
  }
  var G__18314 = args18312.length;
  switch(G__18314) {
    case 0:
      return qiss.core.exit.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return qiss.core.exit.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18312.length)].join(""));;
  }
};
qiss.core.exit.cljs$core$IFn$_invoke$arity$0 = function() {
  return qiss.core.exit.call(null, 0);
};
qiss.core.exit.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return null;
};
qiss.core.exit.cljs$lang$maxFixedArity = 1;
qiss.core.index_of = function qiss$core$index_of(x, i) {
  var j = x.indexOf(i);
  if (j < 0) {
    return cljs.core.count.call(null, x);
  } else {
    return j;
  }
};
qiss.core.knew = function qiss$core$knew() {
  var args18319 = [];
  var len__15394__auto___18322 = arguments.length;
  var i__15395__auto___18323 = 0;
  while (true) {
    if (i__15395__auto___18323 < len__15394__auto___18322) {
      args18319.push(arguments[i__15395__auto___18323]);
      var G__18324 = i__15395__auto___18323 + 1;
      i__15395__auto___18323 = G__18324;
      continue;
    } else {
    }
    break;
  }
  var G__18321 = args18319.length;
  switch(G__18321) {
    case 1:
      return qiss.core.knew.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.knew.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18319.length)].join(""));;
  }
};
qiss.core.knew.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return null;
};
qiss.core.knew.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return null;
};
qiss.core.knew.cljs$lang$maxFixedArity = 2;
qiss.core.last_index_of = function qiss$core$last_index_of(x, i) {
  var j = qiss.core.index_of.call(null, cljs.core.vec.call(null, cljs.core.reverse.call(null, x)), i);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, x), j)) {
    return j;
  } else {
    return cljs.core.count.call(null, x) - (1 + j);
  }
};
qiss.core.string = function qiss$core$string(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (x instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, x);
    } else {
      return clojure.string.join.call(null, x);
    }
  }
};
qiss.core.read_lines = function qiss$core$read_lines(x) {
  return null;
};
qiss.core.xform = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "elhs", "elhs", 927934789), new cljs.core.Keyword(null, "dalhs", "dalhs", 589508392), new cljs.core.Keyword(null, "lop", "lop", -749049685), new cljs.core.Keyword(null, "lid", "lid", 1029596625), new cljs.core.Keyword(null, "ldot", "ldot", 971088019), new cljs.core.Keyword(null, "llhs", "llhs", -124381869), new cljs.core.Keyword(null, "valhs", "valhs", -1275023629), new cljs.core.Keyword(null, "lverb", "lverb", 
-705960011), new cljs.core.Keyword(null, "lmonop", "lmonop", -1312901226), new cljs.core.Keyword(null, "lat", "lat", -580793929), new cljs.core.Keyword(null, "lrhs", "lrhs", 430959640), new cljs.core.Keyword(null, "alhs", "alhs", -580149E3), new cljs.core.Keyword(null, "ldotn", "ldotn", -193868583), new cljs.core.Keyword(null, "lassign", "lassign", 880758361), new cljs.core.Keyword(null, "ladverbed", "ladverbed", 81469947), new cljs.core.Keyword(null, "lelhs", "lelhs", -295434052), new cljs.core.Keyword(null, 
"ldyop", "ldyop", 1284372509), new cljs.core.Keyword(null, "ljuxt", "ljuxt", -1233177698), new cljs.core.Keyword(null, "lexpr", "lexpr", -1674066145)], [function() {
  var G__18326__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "lhs", "lhs", 1172082094), x));
  };
  var G__18326 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18327__i = 0, G__18327__a = new Array(arguments.length - 0);
      while (G__18327__i < G__18327__a.length) {
        G__18327__a[G__18327__i] = arguments[G__18327__i + 0];
        ++G__18327__i;
      }
      x = new cljs.core.IndexedSeq(G__18327__a, 0);
    }
    return G__18326__delegate.call(this, x);
  };
  G__18326.cljs$lang$maxFixedArity = 0;
  G__18326.cljs$lang$applyTo = function(arglist__18328) {
    var x = cljs.core.seq(arglist__18328);
    return G__18326__delegate(x);
  };
  G__18326.cljs$core$IFn$_invoke$arity$variadic = G__18326__delegate;
  return G__18326;
}(), function() {
  var G__18329__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "darg", "darg", -346444863), x));
  };
  var G__18329 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18330__i = 0, G__18330__a = new Array(arguments.length - 0);
      while (G__18330__i < G__18330__a.length) {
        G__18330__a[G__18330__i] = arguments[G__18330__i + 0];
        ++G__18330__i;
      }
      x = new cljs.core.IndexedSeq(G__18330__a, 0);
    }
    return G__18329__delegate.call(this, x);
  };
  G__18329.cljs$lang$maxFixedArity = 0;
  G__18329.cljs$lang$applyTo = function(arglist__18331) {
    var x = cljs.core.seq(arglist__18331);
    return G__18329__delegate(x);
  };
  G__18329.cljs$core$IFn$_invoke$arity$variadic = G__18329__delegate;
  return G__18329;
}(), function() {
  var G__18332__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "op", "op", -1882987955), x));
  };
  var G__18332 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18333__i = 0, G__18333__a = new Array(arguments.length - 0);
      while (G__18333__i < G__18333__a.length) {
        G__18333__a[G__18333__i] = arguments[G__18333__i + 0];
        ++G__18333__i;
      }
      x = new cljs.core.IndexedSeq(G__18333__a, 0);
    }
    return G__18332__delegate.call(this, x);
  };
  G__18332.cljs$lang$maxFixedArity = 0;
  G__18332.cljs$lang$applyTo = function(arglist__18334) {
    var x = cljs.core.seq(arglist__18334);
    return G__18332__delegate(x);
  };
  G__18332.cljs$core$IFn$_invoke$arity$variadic = G__18332__delegate;
  return G__18332;
}(), function() {
  var G__18335__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "id", "id", -1388402092), x));
  };
  var G__18335 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18336__i = 0, G__18336__a = new Array(arguments.length - 0);
      while (G__18336__i < G__18336__a.length) {
        G__18336__a[G__18336__i] = arguments[G__18336__i + 0];
        ++G__18336__i;
      }
      x = new cljs.core.IndexedSeq(G__18336__a, 0);
    }
    return G__18335__delegate.call(this, x);
  };
  G__18335.cljs$lang$maxFixedArity = 0;
  G__18335.cljs$lang$applyTo = function(arglist__18337) {
    var x = cljs.core.seq(arglist__18337);
    return G__18335__delegate(x);
  };
  G__18335.cljs$core$IFn$_invoke$arity$variadic = G__18335__delegate;
  return G__18335;
}(), function() {
  var G__18338__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "dot", "dot", 1442709401), x));
  };
  var G__18338 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18339__i = 0, G__18339__a = new Array(arguments.length - 0);
      while (G__18339__i < G__18339__a.length) {
        G__18339__a[G__18339__i] = arguments[G__18339__i + 0];
        ++G__18339__i;
      }
      x = new cljs.core.IndexedSeq(G__18339__a, 0);
    }
    return G__18338__delegate.call(this, x);
  };
  G__18338.cljs$lang$maxFixedArity = 0;
  G__18338.cljs$lang$applyTo = function(arglist__18340) {
    var x = cljs.core.seq(arglist__18340);
    return G__18338__delegate(x);
  };
  G__18338.cljs$core$IFn$_invoke$arity$variadic = G__18338__delegate;
  return G__18338;
}(), function() {
  var G__18341__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "lhs", "lhs", 1172082094), x));
  };
  var G__18341 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18342__i = 0, G__18342__a = new Array(arguments.length - 0);
      while (G__18342__i < G__18342__a.length) {
        G__18342__a[G__18342__i] = arguments[G__18342__i + 0];
        ++G__18342__i;
      }
      x = new cljs.core.IndexedSeq(G__18342__a, 0);
    }
    return G__18341__delegate.call(this, x);
  };
  G__18341.cljs$lang$maxFixedArity = 0;
  G__18341.cljs$lang$applyTo = function(arglist__18343) {
    var x = cljs.core.seq(arglist__18343);
    return G__18341__delegate(x);
  };
  G__18341.cljs$core$IFn$_invoke$arity$variadic = G__18341__delegate;
  return G__18341;
}(), function() {
  var G__18344__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "varg", "varg", 405462767), x));
  };
  var G__18344 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18345__i = 0, G__18345__a = new Array(arguments.length - 0);
      while (G__18345__i < G__18345__a.length) {
        G__18345__a[G__18345__i] = arguments[G__18345__i + 0];
        ++G__18345__i;
      }
      x = new cljs.core.IndexedSeq(G__18345__a, 0);
    }
    return G__18344__delegate.call(this, x);
  };
  G__18344.cljs$lang$maxFixedArity = 0;
  G__18344.cljs$lang$applyTo = function(arglist__18346) {
    var x = cljs.core.seq(arglist__18346);
    return G__18344__delegate(x);
  };
  G__18344.cljs$core$IFn$_invoke$arity$variadic = G__18344__delegate;
  return G__18344;
}(), function() {
  var G__18347__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "verb", "verb", -1492655803), x));
  };
  var G__18347 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18348__i = 0, G__18348__a = new Array(arguments.length - 0);
      while (G__18348__i < G__18348__a.length) {
        G__18348__a[G__18348__i] = arguments[G__18348__i + 0];
        ++G__18348__i;
      }
      x = new cljs.core.IndexedSeq(G__18348__a, 0);
    }
    return G__18347__delegate.call(this, x);
  };
  G__18347.cljs$lang$maxFixedArity = 0;
  G__18347.cljs$lang$applyTo = function(arglist__18349) {
    var x = cljs.core.seq(arglist__18349);
    return G__18347__delegate(x);
  };
  G__18347.cljs$core$IFn$_invoke$arity$variadic = G__18347__delegate;
  return G__18347;
}(), function() {
  var G__18350__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "monop", "monop", -1867059169), x));
  };
  var G__18350 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18351__i = 0, G__18351__a = new Array(arguments.length - 0);
      while (G__18351__i < G__18351__a.length) {
        G__18351__a[G__18351__i] = arguments[G__18351__i + 0];
        ++G__18351__i;
      }
      x = new cljs.core.IndexedSeq(G__18351__a, 0);
    }
    return G__18350__delegate.call(this, x);
  };
  G__18350.cljs$lang$maxFixedArity = 0;
  G__18350.cljs$lang$applyTo = function(arglist__18352) {
    var x = cljs.core.seq(arglist__18352);
    return G__18350__delegate(x);
  };
  G__18350.cljs$core$IFn$_invoke$arity$variadic = G__18350__delegate;
  return G__18350;
}(), function() {
  var G__18353__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "at", "at", 1476951349), x));
  };
  var G__18353 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18354__i = 0, G__18354__a = new Array(arguments.length - 0);
      while (G__18354__i < G__18354__a.length) {
        G__18354__a[G__18354__i] = arguments[G__18354__i + 0];
        ++G__18354__i;
      }
      x = new cljs.core.IndexedSeq(G__18354__a, 0);
    }
    return G__18353__delegate.call(this, x);
  };
  G__18353.cljs$lang$maxFixedArity = 0;
  G__18353.cljs$lang$applyTo = function(arglist__18355) {
    var x = cljs.core.seq(arglist__18355);
    return G__18353__delegate(x);
  };
  G__18353.cljs$core$IFn$_invoke$arity$variadic = G__18353__delegate;
  return G__18353;
}(), function() {
  var G__18356__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "rhs", "rhs", -229356739), x));
  };
  var G__18356 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18357__i = 0, G__18357__a = new Array(arguments.length - 0);
      while (G__18357__i < G__18357__a.length) {
        G__18357__a[G__18357__i] = arguments[G__18357__i + 0];
        ++G__18357__i;
      }
      x = new cljs.core.IndexedSeq(G__18357__a, 0);
    }
    return G__18356__delegate.call(this, x);
  };
  G__18356.cljs$lang$maxFixedArity = 0;
  G__18356.cljs$lang$applyTo = function(arglist__18358) {
    var x = cljs.core.seq(arglist__18358);
    return G__18356__delegate(x);
  };
  G__18356.cljs$core$IFn$_invoke$arity$variadic = G__18356__delegate;
  return G__18356;
}(), function() {
  var G__18359__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "lhs", "lhs", 1172082094), x));
  };
  var G__18359 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18360__i = 0, G__18360__a = new Array(arguments.length - 0);
      while (G__18360__i < G__18360__a.length) {
        G__18360__a[G__18360__i] = arguments[G__18360__i + 0];
        ++G__18360__i;
      }
      x = new cljs.core.IndexedSeq(G__18360__a, 0);
    }
    return G__18359__delegate.call(this, x);
  };
  G__18359.cljs$lang$maxFixedArity = 0;
  G__18359.cljs$lang$applyTo = function(arglist__18361) {
    var x = cljs.core.seq(arglist__18361);
    return G__18359__delegate(x);
  };
  G__18359.cljs$core$IFn$_invoke$arity$variadic = G__18359__delegate;
  return G__18359;
}(), function() {
  var G__18362__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "dotn", "dotn", -1422820659), x));
  };
  var G__18362 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18363__i = 0, G__18363__a = new Array(arguments.length - 0);
      while (G__18363__i < G__18363__a.length) {
        G__18363__a[G__18363__i] = arguments[G__18363__i + 0];
        ++G__18363__i;
      }
      x = new cljs.core.IndexedSeq(G__18363__a, 0);
    }
    return G__18362__delegate.call(this, x);
  };
  G__18362.cljs$lang$maxFixedArity = 0;
  G__18362.cljs$lang$applyTo = function(arglist__18364) {
    var x = cljs.core.seq(arglist__18364);
    return G__18362__delegate(x);
  };
  G__18362.cljs$core$IFn$_invoke$arity$variadic = G__18362__delegate;
  return G__18362;
}(), function() {
  var G__18365__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "assign", "assign", -1590426222), x));
  };
  var G__18365 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18366__i = 0, G__18366__a = new Array(arguments.length - 0);
      while (G__18366__i < G__18366__a.length) {
        G__18366__a[G__18366__i] = arguments[G__18366__i + 0];
        ++G__18366__i;
      }
      x = new cljs.core.IndexedSeq(G__18366__a, 0);
    }
    return G__18365__delegate.call(this, x);
  };
  G__18365.cljs$lang$maxFixedArity = 0;
  G__18365.cljs$lang$applyTo = function(arglist__18367) {
    var x = cljs.core.seq(arglist__18367);
    return G__18365__delegate(x);
  };
  G__18365.cljs$core$IFn$_invoke$arity$variadic = G__18365__delegate;
  return G__18365;
}(), function() {
  var G__18368__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "adverbed", "adverbed", -309374022), x));
  };
  var G__18368 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18369__i = 0, G__18369__a = new Array(arguments.length - 0);
      while (G__18369__i < G__18369__a.length) {
        G__18369__a[G__18369__i] = arguments[G__18369__i + 0];
        ++G__18369__i;
      }
      x = new cljs.core.IndexedSeq(G__18369__a, 0);
    }
    return G__18368__delegate.call(this, x);
  };
  G__18368.cljs$lang$maxFixedArity = 0;
  G__18368.cljs$lang$applyTo = function(arglist__18370) {
    var x = cljs.core.seq(arglist__18370);
    return G__18368__delegate(x);
  };
  G__18368.cljs$core$IFn$_invoke$arity$variadic = G__18368__delegate;
  return G__18368;
}(), function() {
  var G__18371__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "lhs", "lhs", 1172082094), x));
  };
  var G__18371 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18372__i = 0, G__18372__a = new Array(arguments.length - 0);
      while (G__18372__i < G__18372__a.length) {
        G__18372__a[G__18372__i] = arguments[G__18372__i + 0];
        ++G__18372__i;
      }
      x = new cljs.core.IndexedSeq(G__18372__a, 0);
    }
    return G__18371__delegate.call(this, x);
  };
  G__18371.cljs$lang$maxFixedArity = 0;
  G__18371.cljs$lang$applyTo = function(arglist__18373) {
    var x = cljs.core.seq(arglist__18373);
    return G__18371__delegate(x);
  };
  G__18371.cljs$core$IFn$_invoke$arity$variadic = G__18371__delegate;
  return G__18371;
}(), function() {
  var G__18374__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "dyop", "dyop", 827870066), x));
  };
  var G__18374 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18375__i = 0, G__18375__a = new Array(arguments.length - 0);
      while (G__18375__i < G__18375__a.length) {
        G__18375__a[G__18375__i] = arguments[G__18375__i + 0];
        ++G__18375__i;
      }
      x = new cljs.core.IndexedSeq(G__18375__a, 0);
    }
    return G__18374__delegate.call(this, x);
  };
  G__18374.cljs$lang$maxFixedArity = 0;
  G__18374.cljs$lang$applyTo = function(arglist__18376) {
    var x = cljs.core.seq(arglist__18376);
    return G__18374__delegate(x);
  };
  G__18374.cljs$core$IFn$_invoke$arity$variadic = G__18374__delegate;
  return G__18374;
}(), function() {
  var G__18377__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "juxt", "juxt", -969445923), x));
  };
  var G__18377 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18378__i = 0, G__18378__a = new Array(arguments.length - 0);
      while (G__18378__i < G__18378__a.length) {
        G__18378__a[G__18378__i] = arguments[G__18378__i + 0];
        ++G__18378__i;
      }
      x = new cljs.core.IndexedSeq(G__18378__a, 0);
    }
    return G__18377__delegate.call(this, x);
  };
  G__18377.cljs$lang$maxFixedArity = 0;
  G__18377.cljs$lang$applyTo = function(arglist__18379) {
    var x = cljs.core.seq(arglist__18379);
    return G__18377__delegate(x);
  };
  G__18377.cljs$core$IFn$_invoke$arity$variadic = G__18377__delegate;
  return G__18377;
}(), function() {
  var G__18380__delegate = function(x) {
    return cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), x));
  };
  var G__18380 = function(var_args) {
    var x = null;
    if (arguments.length > 0) {
      var G__18381__i = 0, G__18381__a = new Array(arguments.length - 0);
      while (G__18381__i < G__18381__a.length) {
        G__18381__a[G__18381__i] = arguments[G__18381__i + 0];
        ++G__18381__i;
      }
      x = new cljs.core.IndexedSeq(G__18381__a, 0);
    }
    return G__18380__delegate.call(this, x);
  };
  G__18380.cljs$lang$maxFixedArity = 0;
  G__18380.cljs$lang$applyTo = function(arglist__18382) {
    var x = cljs.core.seq(arglist__18382);
    return G__18380__delegate(x);
  };
  G__18380.cljs$core$IFn$_invoke$arity$variadic = G__18380__delegate;
  return G__18380;
}()]);
qiss.core.parser = instaparse.core.parser.call(null, qiss.core.grammar);
qiss.core.parse = cljs.core.comp.call(null, cljs.core.partial.call(null, instaparse.core.transform, qiss.core.xform), qiss.core.parser);
qiss.core.parses = function qiss$core$parses(p1__18383_SHARP_) {
  return cljs.core.mapv.call(null, cljs.core.partial.call(null, instaparse.core.transform, qiss.core.xform), instaparse.core.parses.call(null, qiss.core.parser, p1__18383_SHARP_));
};
qiss.core.bool_to_long = function qiss$core$bool_to_long(x) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    if (cljs.core._EQ_.call(null, 0, cljs.core.count.call(null, x))) {
      return cljs.core.PersistentVector.EMPTY;
    } else {
      return cljs.core.mapv.call(null, qiss$core$bool_to_long, x);
    }
  } else {
    if (cljs.core.truth_(qiss.core.bool_QMARK_.call(null, x))) {
      if (cljs.core.truth_(x)) {
        return 1;
      } else {
        return 0;
      }
    } else {
      return x;
    }
  }
};
qiss.core.all_QMARK_ = function qiss$core$all_QMARK_(x) {
  if (cljs.core.every_QMARK_.call(null, function(x__$1) {
    return x__$1;
  }, x)) {
    return true;
  } else {
    return false;
  }
};
qiss.core.any_QMARK_ = function qiss$core$any_QMARK_(x) {
  if (cljs.core.truth_(cljs.core.some.call(null, function(x__$1) {
    return x__$1;
  }, x))) {
    return true;
  } else {
    return false;
  }
};
qiss.core.catv = function qiss$core$catv(x, y) {
  return cljs.core.vec.call(null, cljs.core.concat.call(null, x, y));
};
qiss.core.except = function qiss$core$except(x, y) {
  var p = cljs.core.coll_QMARK_.call(null, y) ? function(p1__18384_SHARP_) {
    return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18384_SHARP_], true), y);
  } : function(p1__18385_SHARP_) {
    return cljs.core._EQ_.call(null, p1__18385_SHARP_, y);
  };
  return cljs.core.vec.call(null, cljs.core.remove.call(null, p, x));
};
qiss.core.in$ = function qiss$core$in(x, y) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    return cljs.core.mapv.call(null, function(p1__18386_SHARP_) {
      return qiss$core$in.call(null, p1__18386_SHARP_, y);
    }, x);
  } else {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([x], true), y))) {
      return true;
    } else {
      return false;
    }
  }
};
qiss.core.inter = function qiss$core$inter(x, y) {
  return cljs.core.vec.call(null, cljs.core.filter.call(null, function(p1__18387_SHARP_) {
    return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18387_SHARP_], true), y);
  }, x));
};
qiss.core.lose_env = function qiss$core$lose_env(x) {
  if (cljs.core.truth_(qiss.core.lambda_QMARK_.call(null, x))) {
    return cljs.core.dissoc.call(null, x, new cljs.core.Keyword(null, "env", "env", -1815813235));
  } else {
    return x;
  }
};
qiss.core.null_BANG_ = function qiss$core$null_BANG_() {
  var args__15401__auto__ = [];
  var len__15394__auto___18389 = arguments.length;
  var i__15395__auto___18390 = 0;
  while (true) {
    if (i__15395__auto___18390 < len__15394__auto___18389) {
      args__15401__auto__.push(arguments[i__15395__auto___18390]);
      var G__18391 = i__15395__auto___18390 + 1;
      i__15395__auto___18390 = G__18391;
      continue;
    } else {
    }
    break;
  }
  var argseq__15402__auto__ = 0 < args__15401__auto__.length ? new cljs.core.IndexedSeq(args__15401__auto__.slice(0), 0) : null;
  return qiss.core.null_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__15402__auto__);
};
qiss.core.null_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(x) {
  cljs.core.apply.call(null, cljs.core.println, cljs.core.map.call(null, qiss.core.lose_env, x));
  return cljs.core.last.call(null, x);
};
qiss.core.null_BANG_.cljs$lang$maxFixedArity = 0;
qiss.core.null_BANG_.cljs$lang$applyTo = function(seq18388) {
  return qiss.core.null_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq18388));
};
qiss.core.push = function qiss$core$push(x, v) {
  return cljs.core.vec.call(null, cljs.core.cons.call(null, x, cljs.core.map.call(null, cljs.core.identity, v)));
};
qiss.core.raze = function qiss$core$raze(x) {
  return cljs.core.vec.call(null, cljs.core.mapcat.call(null, function(p1__18392_SHARP_) {
    if (cljs.core.coll_QMARK_.call(null, p1__18392_SHARP_)) {
      return p1__18392_SHARP_;
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18392_SHARP_], null);
    }
  }, x));
};
qiss.core.removev = function qiss$core$removev(v, i) {
  return qiss.core.catv.call(null, cljs.core.subvec.call(null, v, 0, i), cljs.core.subvec.call(null, v, 1 + i, cljs.core.count.call(null, v)));
};
qiss.core.til = function qiss$core$til(x) {
  return cljs.core.vec.call(null, cljs.core.range.call(null, x));
};
qiss.core.til_count = function qiss$core$til_count(x) {
  return cljs.core.vec.call(null, cljs.core.range.call(null, qiss.core.kcount.call(null, x)));
};
qiss.core.union = function qiss$core$union(x, y) {
  return cljs.core.vec.call(null, cljs.core.distinct.call(null, cljs.core.concat.call(null, x, y)));
};
qiss.core.where = function qiss$core$where() {
  var args18397 = [];
  var len__15394__auto___18400 = arguments.length;
  var i__15395__auto___18401 = 0;
  while (true) {
    if (i__15395__auto___18401 < len__15394__auto___18400) {
      args18397.push(arguments[i__15395__auto___18401]);
      var G__18402 = i__15395__auto___18401 + 1;
      i__15395__auto___18401 = G__18402;
      continue;
    } else {
    }
    break;
  }
  var G__18399 = args18397.length;
  switch(G__18399) {
    case 1:
      return qiss.core.where.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.where.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18397.length)].join(""));;
  }
};
qiss.core.where.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.vec.call(null, cljs.core.flatten.call(null, cljs.core.vector_QMARK_.call(null, x) ? cljs.core.map_indexed.call(null, function(p1__18394_SHARP_, p2__18393_SHARP_) {
    return cljs.core.repeat.call(null, p2__18393_SHARP_, p1__18394_SHARP_);
  }, qiss.core.bool_to_long.call(null, x)) : cljs.core.map.call(null, function(p1__18396_SHARP_, p2__18395_SHARP_) {
    return cljs.core.repeat.call(null, p2__18395_SHARP_, p1__18396_SHARP_);
  }, qiss.core.dict_key.call(null, x), (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(x))));
};
qiss.core.where.cljs$core$IFn$_invoke$arity$2 = function(e, x) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.where.call(null, x)], null);
};
qiss.core.where.cljs$lang$maxFixedArity = 2;
qiss.core.make_dict = function qiss$core$make_dict() {
  var args18404 = [];
  var len__15394__auto___18407 = arguments.length;
  var i__15395__auto___18408 = 0;
  while (true) {
    if (i__15395__auto___18408 < len__15394__auto___18407) {
      args18404.push(arguments[i__15395__auto___18408]);
      var G__18409 = i__15395__auto___18408 + 1;
      i__15395__auto___18408 = G__18409;
      continue;
    } else {
    }
    break;
  }
  var G__18406 = args18404.length;
  switch(G__18406) {
    case 0:
      return qiss.core.make_dict.cljs$core$IFn$_invoke$arity$0();
      break;
    case 2:
      return qiss.core.make_dict.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18404.length)].join(""));;
  }
};
qiss.core.make_dict.cljs$core$IFn$_invoke$arity$0 = function() {
  return qiss.core.make_dict.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY);
};
qiss.core.make_dict.cljs$core$IFn$_invoke$arity$2 = function(k, v) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "k", "k", -2146297393), k, new cljs.core.Keyword(null, "v", "v", 21465059), v], null);
};
qiss.core.make_dict.cljs$lang$maxFixedArity = 2;
qiss.core.make_keyed_table = function qiss$core$make_keyed_table(k, v) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "k", "k", -2146297393), k, new cljs.core.Keyword(null, "v", "v", 21465059), v, new cljs.core.Keyword(null, "kt", "kt", -1748259108), true], null);
};
qiss.core.make_table = function qiss$core$make_table(c, d) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "k", "k", -2146297393), c, new cljs.core.Keyword(null, "v", "v", 21465059), d, new cljs.core.Keyword(null, "t", "t", -1397832519), true], null);
};
qiss.core.dict_QMARK_ = function qiss$core$dict_QMARK_(x) {
  var and__14343__auto__ = cljs.core.map_QMARK_.call(null, x);
  if (and__14343__auto__) {
    var and__14343__auto____$1 = (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(and__14343__auto____$1)) {
      var and__14343__auto____$2 = (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(x);
      if (cljs.core.truth_(and__14343__auto____$2)) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "t", "t", -1397832519)).cljs$core$IFn$_invoke$arity$1(x)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "kt", "kt", -1748259108)).cljs$core$IFn$_invoke$arity$1(x));
      } else {
        return and__14343__auto____$2;
      }
    } else {
      return and__14343__auto____$1;
    }
  } else {
    return and__14343__auto__;
  }
};
qiss.core.dict_key = function qiss$core$dict_key(x) {
  return (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.dict_val = function qiss$core$dict_val(x) {
  return (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.keyed_table_QMARK_ = function qiss$core$keyed_table_QMARK_(x) {
  var and__14343__auto__ = cljs.core.map_QMARK_.call(null, x);
  if (and__14343__auto__) {
    var and__14343__auto____$1 = (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(and__14343__auto____$1)) {
      var and__14343__auto____$2 = (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(x);
      if (cljs.core.truth_(and__14343__auto____$2)) {
        return (new cljs.core.Keyword(null, "kt", "kt", -1748259108)).cljs$core$IFn$_invoke$arity$1(x);
      } else {
        return and__14343__auto____$2;
      }
    } else {
      return and__14343__auto____$1;
    }
  } else {
    return and__14343__auto__;
  }
};
qiss.core.lambda_QMARK_ = function qiss$core$lambda_QMARK_(x) {
  var and__14343__auto__ = cljs.core.map_QMARK_.call(null, x);
  if (and__14343__auto__) {
    return (new cljs.core.Keyword(null, "f", "f", -1597136552)).cljs$core$IFn$_invoke$arity$1(x);
  } else {
    return and__14343__auto__;
  }
};
qiss.core.lambda_body = function qiss$core$lambda_body(x) {
  return (new cljs.core.Keyword(null, "exprs", "exprs", 1795829094)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.lambda_code = function qiss$core$lambda_code(x) {
  return (new cljs.core.Keyword(null, "f", "f", -1597136552)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.lambda_callable = function qiss$core$lambda_callable(e, x) {
  var c = qiss.core.lambda_code.call(null, x);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "pass-global-env", "pass-global-env", -1301958750)).cljs$core$IFn$_invoke$arity$1(x))) {
    return cljs.core.partial.call(null, c, e);
  } else {
    return c;
  }
};
qiss.core.lambda_env = function qiss$core$lambda_env(x) {
  return (new cljs.core.Keyword(null, "env", "env", -1815813235)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.lambda_formals = function qiss$core$lambda_formals(x) {
  return (new cljs.core.Keyword(null, "formals", "formals", 925536712)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.lambda_rank = function qiss$core$lambda_rank(x) {
  return (new cljs.core.Keyword(null, "rank", "rank", -1706728502)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.lambda_text = function qiss$core$lambda_text(x) {
  return (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(x);
};
qiss.core.table_QMARK_ = function qiss$core$table_QMARK_(x) {
  var and__14343__auto__ = cljs.core.map_QMARK_.call(null, x);
  if (and__14343__auto__) {
    var and__14343__auto____$1 = (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(and__14343__auto____$1)) {
      var and__14343__auto____$2 = (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(x);
      if (cljs.core.truth_(and__14343__auto____$2)) {
        return (new cljs.core.Keyword(null, "t", "t", -1397832519)).cljs$core$IFn$_invoke$arity$1(x);
      } else {
        return and__14343__auto____$2;
      }
    } else {
      return and__14343__auto____$1;
    }
  } else {
    return and__14343__auto__;
  }
};
qiss.core.add_to_dict = function qiss$core$add_to_dict(d, k, v) {
  return cljs.core.assoc.call(null, d, new cljs.core.Keyword(null, "k", "k", -2146297393), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(d), k), new cljs.core.Keyword(null, "v", "v", 21465059), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(d), v));
};
qiss.core.remove_from_dict = function qiss$core$remove_from_dict(d, k) {
  var i = qiss.core.index_of.call(null, (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(d), k);
  if (cljs.core._EQ_.call(null, i, cljs.core.count.call(null, (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(d)))) {
    return d;
  } else {
    return qiss.core.make_dict.call(null, qiss.core.removev.call(null, (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(d), i), qiss.core.removev.call(null, (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(d), i));
  }
};
qiss.core.cols = function qiss$core$cols(x) {
  if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
    return qiss.core.dict_key.call(null, x);
  } else {
    if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
      return qiss.core.catv.call(null, qiss$core$cols.call(null, qiss.core.dict_key.call(null, x)), qiss$core$cols.call(null, qiss.core.dict_val.call(null, x)));
    } else {
      return qiss.core.err.call(null, "cols cannot be applied to", x);
    }
  }
};
qiss.core.keycols = function qiss$core$keycols(x) {
  if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
    return qiss.core.cols.call(null, qiss.core.dict_key.call(null, x));
  } else {
    return qiss.core.err.call(null, "keycols cannot be applied to ", x);
  }
};
qiss.core.d_from_t = function qiss$core$d_from_t(x) {
  return cljs.core.dissoc.call(null, x, new cljs.core.Keyword(null, "t", "t", -1397832519));
};
qiss.core.t_from_d = function qiss$core$t_from_d(x) {
  return cljs.core.assoc.call(null, x, new cljs.core.Keyword(null, "t", "t", -1397832519), true);
};
qiss.core.klast = function qiss$core$klast(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.core.last.call(null, x);
  } else {
    if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
      return qiss.core.index.call(null, x, cljs.core.count.call(null, x) - 1);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return qiss$core$klast.call(null, qiss.core.dict_val.call(null, x));
      } else {
        return qiss.core.err.call(null, "can't apply last to", x);
      }
    }
  }
};
qiss.core.at_xform_monadic = function qiss$core$at_xform_monadic(e, x, i, f) {
  var h = function qiss$core$at_xform_monadic_$_self(r, j) {
    if (cljs.core.coll_QMARK_.call(null, j)) {
      return cljs.core.reduce.call(null, qiss$core$at_xform_monadic_$_self, r, j);
    } else {
      var vec__18414 = qiss.core.invoke.call(null, e, f, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r.call(null, j)], null));
      var ne = cljs.core.nth.call(null, vec__18414, 0, null);
      var rr = cljs.core.nth.call(null, vec__18414, 1, null);
      return cljs.core.assoc_BANG_.call(null, r, j, rr);
    }
  };
  return cljs.core.persistent_BANG_.call(null, h.call(null, cljs.core.transient$.call(null, x), i));
};
qiss.core.at_xform_update_table = function qiss$core$at_xform_update_table(t, i, c) {
  if (i instanceof cljs.core.Keyword) {
    return cljs.core.assoc.call(null, t, new cljs.core.Keyword(null, "v", "v", 21465059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(t), qiss.core.findv.call(null, (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(t), i), c));
  } else {
    var a = cljs.core.truth_(qiss.core.dict_QMARK_.call(null, c)) ? c : qiss.core.make_dict.call(null, qiss.core.cols.call(null, t), cljs.core.vec.call(null, cljs.core.repeat.call(null, cljs.core.count.call(null, qiss.core.cols.call(null, t)), c)));
    return cljs.core.reduce.call(null, function(a) {
      return function(t__$1, p__18417) {
        var vec__18418 = p__18417;
        var k = cljs.core.nth.call(null, vec__18418, 0, null);
        var v = cljs.core.nth.call(null, vec__18418, 1, null);
        var p = qiss.core.findv.call(null, (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(t__$1), k);
        return cljs.core.assoc.call(null, t__$1, new cljs.core.Keyword(null, "v", "v", 21465059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(t__$1), p, cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "v", "v", 21465059)).cljs$core$IFn$_invoke$arity$1(t__$1).call(null, p), i, v)));
      };
    }(a), t, cljs.core.map.call(null, cljs.core.vector, qiss.core.dict_key.call(null, a), qiss.core.dict_val.call(null, a)));
  }
};
qiss.core.at_xform_monadic_table = function qiss$core$at_xform_monadic_table(e, x, i, f) {
  var h = function qiss$core$at_xform_monadic_table_$_self(r, j) {
    if (cljs.core.coll_QMARK_.call(null, j)) {
      return cljs.core.reduce.call(null, qiss$core$at_xform_monadic_table_$_self, r, j);
    } else {
      var vec__18422 = qiss.core.invoke.call(null, e, f, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.index.call(null, r, j)], null));
      var ne = cljs.core.nth.call(null, vec__18422, 0, null);
      var rr = cljs.core.nth.call(null, vec__18422, 1, null);
      return qiss.core.at_xform_update_table.call(null, r, j, rr);
    }
  };
  return h.call(null, x, i);
};
qiss.core.at_xform_dyadic = function qiss$core$at_xform_dyadic(e, x, i, f, y) {
  var h = function qiss$core$at_xform_dyadic_$_self(r, p__18429) {
    var vec__18432 = p__18429;
    var j = cljs.core.nth.call(null, vec__18432, 0, null);
    var b = cljs.core.nth.call(null, vec__18432, 1, null);
    if (cljs.core.coll_QMARK_.call(null, j)) {
      return cljs.core.reduce.call(null, qiss$core$at_xform_dyadic_$_self, r, cljs.core.coll_QMARK_.call(null, b) ? cljs.core.map.call(null, cljs.core.vector, j, b) : cljs.core.map.call(null, function(vec__18432, j, b) {
        return function(p1__18423_SHARP_) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18423_SHARP_, b], null);
        };
      }(vec__18432, j, b), j));
    } else {
      var vec__18433 = qiss.core.invoke.call(null, e, f, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r.call(null, j), b], null));
      var ne = cljs.core.nth.call(null, vec__18433, 0, null);
      var rr = cljs.core.nth.call(null, vec__18433, 1, null);
      return cljs.core.assoc_BANG_.call(null, r, j, rr);
    }
  };
  return cljs.core.persistent_BANG_.call(null, h.call(null, cljs.core.transient$.call(null, x), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i, y], null)));
};
qiss.core.at_xform_dyadic_table = function qiss$core$at_xform_dyadic_table(e, x, i, f, y) {
  var h = function qiss$core$at_xform_dyadic_table_$_self(r, p__18440) {
    var vec__18443 = p__18440;
    var j = cljs.core.nth.call(null, vec__18443, 0, null);
    var b = cljs.core.nth.call(null, vec__18443, 1, null);
    if (cljs.core.coll_QMARK_.call(null, j)) {
      return cljs.core.reduce.call(null, qiss$core$at_xform_dyadic_table_$_self, r, cljs.core.coll_QMARK_.call(null, b) ? cljs.core.map.call(null, cljs.core.vector, j, b) : cljs.core.map.call(null, function(vec__18443, j, b) {
        return function(p1__18434_SHARP_) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18434_SHARP_, b], null);
        };
      }(vec__18443, j, b), j));
    } else {
      var vec__18444 = qiss.core.invoke.call(null, e, f, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.index.call(null, r, j), b], null));
      var ne = cljs.core.nth.call(null, vec__18444, 0, null);
      var rr = cljs.core.nth.call(null, vec__18444, 1, null);
      return qiss.core.at_xform_update_table.call(null, r, j, rr);
    }
  };
  return h.call(null, x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i, y], null));
};
qiss.core.at_xform = function qiss$core$at_xform() {
  var args18445 = [];
  var len__15394__auto___18448 = arguments.length;
  var i__15395__auto___18449 = 0;
  while (true) {
    if (i__15395__auto___18449 < len__15394__auto___18448) {
      args18445.push(arguments[i__15395__auto___18449]);
      var G__18450 = i__15395__auto___18449 + 1;
      i__15395__auto___18449 = G__18450;
      continue;
    } else {
    }
    break;
  }
  var G__18447 = args18445.length;
  switch(G__18447) {
    case 4:
      return qiss.core.at_xform.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return qiss.core.at_xform.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18445.length)].join(""));;
  }
};
qiss.core.at_xform.cljs$core$IFn$_invoke$arity$4 = function(e, x, i, f) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    if (!cljs.core.coll_QMARK_.call(null, i)) {
      return qiss.core.at_xform_monadic.call(null, e, x, i, f);
    } else {
      if (cljs.core.empty_QMARK_.call(null, i)) {
        return x;
      } else {
        if (cljs.core.vector_QMARK_.call(null, i)) {
          return qiss.core.at_xform_monadic.call(null, e, x, i, f);
        } else {
          return qiss.core.err.call(null, "nyi at-xform", x, i);
        }
      }
    }
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), qiss.core.at_xform.call(null, e, qiss.core.dict_val.call(null, x), qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), i), f));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.at_xform_monadic_table.call(null, e, x, i, f);
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.err.call(null, "nyi");
        } else {
          return qiss.core.err.call(null, "internal error at-xform", x, i);
        }
      }
    }
  }
};
qiss.core.at_xform.cljs$core$IFn$_invoke$arity$5 = function(e, x, i, f, y) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    if (!cljs.core.coll_QMARK_.call(null, i)) {
      return qiss.core.at_xform_dyadic.call(null, e, x, i, f, y);
    } else {
      if (cljs.core.empty_QMARK_.call(null, i)) {
        return x;
      } else {
        if (cljs.core.vector_QMARK_.call(null, i)) {
          return qiss.core.at_xform_dyadic.call(null, e, x, i, f, y);
        } else {
          return qiss.core.err.call(null, "nyi at-xform", x, i);
        }
      }
    }
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), qiss.core.at_xform.call(null, e, qiss.core.dict_val.call(null, x), qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), i), f, y));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.at_xform_dyadic_table.call(null, e, x, i, f, y);
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.err.call(null, "nyi");
        } else {
          return qiss.core.err.call(null, "internal error at-xform", x, i);
        }
      }
    }
  }
};
qiss.core.at_xform.cljs$lang$maxFixedArity = 5;
qiss.core.at = function qiss$core$at() {
  var args18454 = [];
  var len__15394__auto___18460 = arguments.length;
  var i__15395__auto___18461 = 0;
  while (true) {
    if (i__15395__auto___18461 < len__15394__auto___18460) {
      args18454.push(arguments[i__15395__auto___18461]);
      var G__18462 = i__15395__auto___18461 + 1;
      i__15395__auto___18461 = G__18462;
      continue;
    } else {
    }
    break;
  }
  var G__18456 = args18454.length;
  switch(G__18456) {
    case 2:
      return qiss.core.at.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return qiss.core.at.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return qiss.core.at.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return qiss.core.at.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18454.length)].join(""));;
  }
};
qiss.core.at.cljs$core$IFn$_invoke$arity$2 = function(e, x) {
  var pred__18457 = function(p1__18452_SHARP_, p2__18453_SHARP_) {
    return cljs.core._EQ_.call(null, cljs.core.type.call(null, p1__18452_SHARP_), p2__18453_SHARP_);
  };
  var expr__18458 = x;
  if (cljs.core.truth_(pred__18457.call(null, java.lang.Boolean, expr__18458))) {
    return -1;
  } else {
    if (cljs.core.truth_(pred__18457.call(null, java.lang.Long, expr__18458))) {
      return -7;
    } else {
      if (cljs.core.truth_(pred__18457.call(null, java.lang.Double, expr__18458))) {
        return -9;
      } else {
        if (cljs.core.truth_(pred__18457.call(null, java.lang.Character, expr__18458))) {
          return -10;
        } else {
          if (cljs.core.truth_(pred__18457.call(null, java.lang.String, expr__18458))) {
            return 10;
          } else {
            if (cljs.core.truth_(pred__18457.call(null, clojure.lang.Keyword, expr__18458))) {
              return -11;
            } else {
              return 0;
            }
          }
        }
      }
    }
  }
};
qiss.core.at.cljs$core$IFn$_invoke$arity$3 = function(e, x, y) {
  return cljs.core.last.call(null, qiss.core.invoke.call(null, e, x, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [y], null)));
};
qiss.core.at.cljs$core$IFn$_invoke$arity$4 = function(e, x, y, z) {
  return qiss.core.at_xform.call(null, e, x, y, z);
};
qiss.core.at.cljs$core$IFn$_invoke$arity$5 = function(e, x, y, z, a) {
  return qiss.core.at_xform.call(null, e, x, y, z, a);
};
qiss.core.at.cljs$lang$maxFixedArity = 5;
qiss.core.massoc = function qiss$core$massoc(x, i, c) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(a, p__18466) {
    var vec__18467 = p__18466;
    var b = cljs.core.nth.call(null, vec__18467, 0, null);
    var c__$1 = cljs.core.nth.call(null, vec__18467, 1, null);
    return cljs.core.assoc_BANG_.call(null, a, b, c__$1);
  }, cljs.core.transient$.call(null, x), cljs.core.mapv.call(null, cljs.core.vector, i, c)));
};
qiss.core.dot_xform_monadic = function qiss$core$dot_xform_monadic(e, x, i, f) {
  if (cljs.core.empty_QMARK_.call(null, i)) {
    return cljs.core.last.call(null, qiss.core.invoke.call(null, e, f, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null)));
  } else {
    var j = cljs.core.first.call(null, i);
    if (!cljs.core.coll_QMARK_.call(null, j)) {
      return cljs.core.assoc.call(null, x, j, qiss$core$dot_xform_monadic.call(null, e, x.call(null, j), cljs.core.next.call(null, i), f));
    } else {
      return qiss.core.massoc.call(null, x, j, cljs.core.mapv.call(null, function(j) {
        return function(p1__18468_SHARP_) {
          return qiss$core$dot_xform_monadic.call(null, e, p1__18468_SHARP_, cljs.core.next.call(null, i), f);
        };
      }(j), qiss.core.index.call(null, x, j)));
    }
  }
};
qiss.core.dot_xform_dyadic = function qiss$core$dot_xform_dyadic(e, x, i, f, y) {
  if (cljs.core.empty_QMARK_.call(null, i)) {
    return cljs.core.last.call(null, qiss.core.invoke.call(null, e, f, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null)));
  } else {
    var j = cljs.core.first.call(null, i);
    if (!cljs.core.coll_QMARK_.call(null, j)) {
      return cljs.core.assoc.call(null, x, j, qiss$core$dot_xform_dyadic.call(null, e, x.call(null, j), cljs.core.next.call(null, i), f, y));
    } else {
      return qiss.core.massoc.call(null, x, j, cljs.core.mapv.call(null, function(j) {
        return function(p1__18469_SHARP_, p2__18470_SHARP_) {
          return qiss$core$dot_xform_dyadic.call(null, e, p1__18469_SHARP_, cljs.core.next.call(null, i), f, p2__18470_SHARP_);
        };
      }(j), qiss.core.index.call(null, x, j), y));
    }
  }
};
qiss.core.dot_xform = function qiss$core$dot_xform() {
  var args18471 = [];
  var len__15394__auto___18474 = arguments.length;
  var i__15395__auto___18475 = 0;
  while (true) {
    if (i__15395__auto___18475 < len__15394__auto___18474) {
      args18471.push(arguments[i__15395__auto___18475]);
      var G__18476 = i__15395__auto___18475 + 1;
      i__15395__auto___18475 = G__18476;
      continue;
    } else {
    }
    break;
  }
  var G__18473 = args18471.length;
  switch(G__18473) {
    case 4:
      return qiss.core.dot_xform.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return qiss.core.dot_xform.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18471.length)].join(""));;
  }
};
qiss.core.dot_xform.cljs$core$IFn$_invoke$arity$4 = function(e, x, i, f) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    if (!cljs.core.coll_QMARK_.call(null, i)) {
      return qiss.core.err.call(null, "index for . must be a container");
    } else {
      if (cljs.core.empty_QMARK_.call(null, i)) {
        return x;
      } else {
        if (cljs.core.vector_QMARK_.call(null, i)) {
          return qiss.core.dot_xform_monadic.call(null, e, x, i, f);
        } else {
          return qiss.core.err.call(null, "nyi dot-xform", x, i);
        }
      }
    }
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), qiss.core.dot_xform.call(null, e, qiss.core.dict_val.call(null, x), cljs.core.vec.call(null, cljs.core.cons.call(null, qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), cljs.core.first.call(null, i)), cljs.core.next.call(null, i))), f));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.err.call(null, "nyi");
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.err.call(null, "nyi");
        } else {
          return qiss.core.err.call(null, "internal error dot-xform", x, i);
        }
      }
    }
  }
};
qiss.core.dot_xform.cljs$core$IFn$_invoke$arity$5 = function(e, x, i, f, y) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    if (!cljs.core.coll_QMARK_.call(null, i)) {
      return qiss.core.err.call(null, "index for . must be a container");
    } else {
      if (cljs.core.empty_QMARK_.call(null, i)) {
        return x;
      } else {
        if (cljs.core.vector_QMARK_.call(null, i)) {
          return qiss.core.dot_xform_dyadic.call(null, e, x, i, f, y);
        } else {
          return qiss.core.err.call(null, "nyi dot-xform", x, i);
        }
      }
    }
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), qiss.core.dot_xform.call(null, e, qiss.core.dict_val.call(null, x), cljs.core.vec.call(null, cljs.core.cons.call(null, qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), cljs.core.first.call(null, i)), cljs.core.next.call(null, i))), f, y));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.err.call(null, "nyi");
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.err.call(null, "nyi");
        } else {
          return qiss.core.err.call(null, "internal error dot-xform", x, i);
        }
      }
    }
  }
};
qiss.core.dot_xform.cljs$lang$maxFixedArity = 5;
qiss.core.dot = function qiss$core$dot() {
  var args18478 = [];
  var len__15394__auto___18481 = arguments.length;
  var i__15395__auto___18482 = 0;
  while (true) {
    if (i__15395__auto___18482 < len__15394__auto___18481) {
      args18478.push(arguments[i__15395__auto___18482]);
      var G__18483 = i__15395__auto___18482 + 1;
      i__15395__auto___18482 = G__18483;
      continue;
    } else {
    }
    break;
  }
  var G__18480 = args18478.length;
  switch(G__18480) {
    case 2:
      return qiss.core.dot.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return qiss.core.dot.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return qiss.core.dot.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return qiss.core.dot.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18478.length)].join(""));;
  }
};
qiss.core.dot.cljs$core$IFn$_invoke$arity$2 = function(e, x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return x;
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.dict_val.call(null, x);
    } else {
      if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
        return qiss.core.dict_val.call(null, x);
      } else {
        if (x instanceof cljs.core.Keyword) {
          var temp__4423__auto__ = e.call(null, x);
          if (cljs.core.truth_(temp__4423__auto__)) {
            var u = temp__4423__auto__;
            return u;
          } else {
            return qiss.core.err.call(null, x, "not found");
          }
        } else {
          return qiss.core.err.call(null, "nyi: . on", x);
        }
      }
    }
  }
};
qiss.core.dot.cljs$core$IFn$_invoke$arity$3 = function(e, x, y) {
  return cljs.core.last.call(null, qiss.core.invoke.call(null, e, x, y));
};
qiss.core.dot.cljs$core$IFn$_invoke$arity$4 = function(e, x, y, z) {
  return qiss.core.dot_xform.call(null, e, x, y, z);
};
qiss.core.dot.cljs$core$IFn$_invoke$arity$5 = function(e, x, y, z, a) {
  return qiss.core.dot_xform.call(null, e, x, y, z, a);
};
qiss.core.dot.cljs$lang$maxFixedArity = 5;
qiss.core.atomize = function qiss$core$atomize(f) {
  return function qiss$core$atomize_$_self(x, y) {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      if (cljs.core.vector_QMARK_.call(null, y)) {
        if (cljs.core._EQ_.call(null, cljs.core.count.call(null, x), cljs.core.count.call(null, y))) {
          return cljs.core.mapv.call(null, qiss$core$atomize_$_self, x, y);
        } else {
          return qiss.core.err.call(null, "length", f, x, y);
        }
      } else {
        if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
          if (cljs.core._EQ_.call(null, cljs.core.count.call(null, x), cljs.core.count.call(null, qiss.core.dict_key.call(null, y)))) {
            return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, y), cljs.core.mapv.call(null, qiss$core$atomize_$_self, x, qiss.core.dict_val.call(null, y)));
          } else {
            return qiss.core.err.call(null, "length", f, x, y);
          }
        } else {
          if (cljs.core.coll_QMARK_.call(null, y)) {
            return qiss.core.err.call(null, "nyi", f, x, y);
          } else {
            return cljs.core.mapv.call(null, function(p1__18485_SHARP_) {
              return qiss$core$atomize_$_self.call(null, p1__18485_SHARP_, y);
            }, x);
          }
        }
      }
    } else {
      if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
        if (cljs.core.vector_QMARK_.call(null, y)) {
          if (cljs.core._EQ_.call(null, cljs.core.count.call(null, qiss.core.dict_key.call(null, x)), cljs.core.count.call(null, y))) {
            return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), cljs.core.mapv.call(null, qiss$core$atomize_$_self, qiss.core.dict_val.call(null, x), y));
          } else {
            return qiss.core.err.call(null, "length", f, x, y);
          }
        } else {
          if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
            var p = qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), qiss.core.dict_key.call(null, y));
            var n = qiss.core.index.call(null, qiss.core.dict_val.call(null, y), qiss.core.where.call(null, qiss.core.eq.call(null, p, cljs.core.count.call(null, qiss.core.dict_key.call(null, x)))));
            var o = qiss.core.where.call(null, qiss.core.less.call(null, p, cljs.core.count.call(null, qiss.core.dict_key.call(null, x))));
            return qiss.core.make_dict.call(null, qiss.core.union.call(null, qiss.core.dict_key.call(null, x), qiss.core.dict_key.call(null, y)), cljs.core.reduce.call(null, function(p, n, o) {
              return function(v, p__18496) {
                var vec__18497 = p__18496;
                var i = cljs.core.nth.call(null, vec__18497, 0, null);
                var b = cljs.core.nth.call(null, vec__18497, 1, null);
                return cljs.core.assoc.call(null, v, i, f.call(null, v.call(null, i), b));
              };
            }(p, n, o), cljs.core.vec.call(null, cljs.core.concat.call(null, qiss.core.dict_val.call(null, x), n)), cljs.core.map.call(null, cljs.core.vector, qiss.core.index.call(null, p, o), qiss.core.index.call(null, qiss.core.dict_val.call(null, y), o))));
          } else {
            if (cljs.core.coll_QMARK_.call(null, y)) {
              return qiss.core.err.call(null, "nyi", f, x, y);
            } else {
              return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), cljs.core.mapv.call(null, function(p1__18486_SHARP_) {
                return qiss$core$atomize_$_self.call(null, p1__18486_SHARP_, y);
              }, qiss.core.dict_val.call(null, x)));
            }
          }
        }
      } else {
        if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
          return qiss.core.t_from_d.call(null, qiss$core$atomize_$_self.call(null, qiss.core.d_from_t.call(null, x), y));
        } else {
          if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
            return qiss.core.make_keyed_table.call(null, qiss.core.dict_key.call(null, x), qiss$core$atomize_$_self.call(null, qiss.core.dict_val.call(null, x), y));
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              return qiss.core.err.call(null, "nyi", f, x, y);
            } else {
              if (cljs.core.vector_QMARK_.call(null, y)) {
                return cljs.core.mapv.call(null, function(p1__18487_SHARP_) {
                  return qiss$core$atomize_$_self.call(null, x, p1__18487_SHARP_);
                }, y);
              } else {
                if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
                  return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, y), cljs.core.mapv.call(null, function(p1__18488_SHARP_) {
                    return qiss$core$atomize_$_self.call(null, x, p1__18488_SHARP_);
                  }, qiss.core.dict_val.call(null, y)));
                } else {
                  if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, y))) {
                    return qiss.core.make_table.call(null, qiss.core.cols.call(null, y), cljs.core.mapv.call(null, function(p1__18489_SHARP_) {
                      return qiss$core$atomize_$_self.call(null, x, p1__18489_SHARP_);
                    }, qiss.core.dict_val.call(null, y)));
                  } else {
                    return f.call(null, x, y);
                  }
                }
              }
            }
          }
        }
      }
    }
  };
};
qiss.core.promote_bools = function qiss$core$promote_bools(_AMPERSAND_form, _AMPERSAND_env, bf, of, x, y) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f__18498__auto__", "f__18498__auto__", 270076978, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "a__18499__auto__", "a__18499__auto__", 847369993, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "b__18500__auto__", "b__18500__auto__", 666436487, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("qiss.core", "bool?", "qiss.core/bool?", 830276895, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__18499__auto__", "a__18499__auto__", 847369993, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("qiss.core", "bool?", "qiss.core/bool?", 830276895, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "b__18500__auto__", "b__18500__auto__", 666436487, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, bf), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__18499__auto__", "a__18499__auto__", 847369993, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "b__18500__auto__", "b__18500__auto__", 666436487, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, of), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__18499__auto__", "a__18499__auto__", 847369993, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  1), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "b__18500__auto__", "b__18500__auto__", 666436487, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("qiss.core", "bool?", "qiss.core/bool?", 830276895, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "b__18500__auto__", "b__18500__auto__", 666436487, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  of), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__18499__auto__", "a__18499__auto__", 847369993, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "b__18500__auto__", "b__18500__auto__", 666436487, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, of), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__18499__auto__", "a__18499__auto__", 847369993, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "b__18500__auto__", "b__18500__auto__", 666436487, null))))))))))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("qiss.core", "atomize", "qiss.core/atomize", -725524856, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f__18498__auto__", "f__18498__auto__", 270076978, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))))));
};
qiss.core.promote_bools.cljs$lang$macro = true;
qiss.core.amp = function qiss$core$amp() {
  var args18501 = [];
  var len__15394__auto___18504 = arguments.length;
  var i__15395__auto___18505 = 0;
  while (true) {
    if (i__15395__auto___18505 < len__15394__auto___18504) {
      args18501.push(arguments[i__15395__auto___18505]);
      var G__18506 = i__15395__auto___18505 + 1;
      i__15395__auto___18505 = G__18506;
      continue;
    } else {
    }
    break;
  }
  var G__18503 = args18501.length;
  switch(G__18503) {
    case 1:
      return qiss.core.amp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.amp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18501.length)].join(""));;
  }
};
qiss.core.amp.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return qiss.core.where.call(null, x);
};
qiss.core.amp.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var f__14150__auto__ = function(a__14151__auto__, b__14152__auto__) {
    if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, a__14151__auto__))) {
      if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, b__14152__auto__))) {
        var and__14343__auto__ = a__14151__auto__;
        if (cljs.core.truth_(and__14343__auto__)) {
          return b__14152__auto__;
        } else {
          return and__14343__auto__;
        }
      } else {
        var x__14674__auto__ = cljs.core.truth_(a__14151__auto__) ? 1 : 0;
        var y__14675__auto__ = b__14152__auto__;
        return x__14674__auto__ < y__14675__auto__ ? x__14674__auto__ : y__14675__auto__;
      }
    } else {
      if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, b__14152__auto__))) {
        var x__14674__auto__ = a__14151__auto__;
        var y__14675__auto__ = cljs.core.truth_(b__14152__auto__) ? 1 : 0;
        return x__14674__auto__ < y__14675__auto__ ? x__14674__auto__ : y__14675__auto__;
      } else {
        var x__14674__auto__ = a__14151__auto__;
        var y__14675__auto__ = b__14152__auto__;
        return x__14674__auto__ < y__14675__auto__ ? x__14674__auto__ : y__14675__auto__;
      }
    }
  };
  return qiss.core_macros.atomize.call(null, f__14150__auto__).call(null, x, y);
};
qiss.core.amp.cljs$lang$maxFixedArity = 2;
qiss.core.group = function qiss$core$group(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    var k = cljs.core.vec.call(null, cljs.core.distinct.call(null, x));
    return qiss.core.make_dict.call(null, k, cljs.core.reduce.call(null, function(k) {
      return function(v, p__18510) {
        var vec__18511 = p__18510;
        var i = cljs.core.nth.call(null, vec__18511, 0, null);
        var g = cljs.core.nth.call(null, vec__18511, 1, null);
        var j = qiss.core.index_of.call(null, k, g);
        return cljs.core.assoc.call(null, v, j, cljs.core.conj.call(null, v.call(null, j), i));
      };
    }(k), cljs.core.vec.call(null, cljs.core.replicate.call(null, cljs.core.count.call(null, k), cljs.core.PersistentVector.EMPTY)), cljs.core.map.call(null, cljs.core.vector, cljs.core.iterate.call(null, cljs.core.inc, 0), x)));
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss$core$group.call(null, qiss.core.dict_val.call(null, x)));
    } else {
      return qiss.core.err.call(null, "can't group ", x);
    }
  }
};
qiss.core.eq = function qiss$core$eq() {
  var args18512 = [];
  var len__15394__auto___18515 = arguments.length;
  var i__15395__auto___18516 = 0;
  while (true) {
    if (i__15395__auto___18516 < len__15394__auto___18515) {
      args18512.push(arguments[i__15395__auto___18516]);
      var G__18517 = i__15395__auto___18516 + 1;
      i__15395__auto___18516 = G__18517;
      continue;
    } else {
    }
    break;
  }
  var G__18514 = args18512.length;
  switch(G__18514) {
    case 1:
      return qiss.core.eq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.eq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18512.length)].join(""));;
  }
};
qiss.core.eq.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return qiss.core.group.call(null, x);
};
qiss.core.eq.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.atomize.call(null, cljs.core._EQ_).call(null, x, y);
};
qiss.core.eq.cljs$lang$maxFixedArity = 2;
qiss.core.neq = function qiss$core$neq(x, y) {
  return qiss.core.atomize.call(null, cljs.core.not_EQ_).call(null, x, y);
};
qiss.core.greater = function qiss$core$greater() {
  var args18519 = [];
  var len__15394__auto___18522 = arguments.length;
  var i__15395__auto___18523 = 0;
  while (true) {
    if (i__15395__auto___18523 < len__15394__auto___18522) {
      args18519.push(arguments[i__15395__auto___18523]);
      var G__18524 = i__15395__auto___18523 + 1;
      i__15395__auto___18523 = G__18524;
      continue;
    } else {
    }
    break;
  }
  var G__18521 = args18519.length;
  switch(G__18521) {
    case 1:
      return qiss.core.greater.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.greater.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18519.length)].join(""));;
  }
};
qiss.core.greater.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.core.vec.call(null, cljs.core.sort_by.call(null, x, cljs.core.comp.call(null, cljs.core._, cljs.core.compare), qiss.core.til_count.call(null, x)));
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss.core.greater.call(null, qiss.core.dict_val.call(null, x)));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.greater.call(null, cljs.core.vec.call(null, cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.map, cljs.core.vector), qiss.core.dict_val.call(null, x))));
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss.core.greater.call(null, qiss.core.dict_val.call(null, x)));
        } else {
          return qiss.core.err.call(null, "can't \x3e", x);
        }
      }
    }
  }
};
qiss.core.greater.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.atomize.call(null, cljs.core._GT_).call(null, x, y);
};
qiss.core.greater.cljs$lang$maxFixedArity = 2;
qiss.core.less = function qiss$core$less() {
  var args18526 = [];
  var len__15394__auto___18529 = arguments.length;
  var i__15395__auto___18530 = 0;
  while (true) {
    if (i__15395__auto___18530 < len__15394__auto___18529) {
      args18526.push(arguments[i__15395__auto___18530]);
      var G__18531 = i__15395__auto___18530 + 1;
      i__15395__auto___18530 = G__18531;
      continue;
    } else {
    }
    break;
  }
  var G__18528 = args18526.length;
  switch(G__18528) {
    case 1:
      return qiss.core.less.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.less.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18526.length)].join(""));;
  }
};
qiss.core.less.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.core.vec.call(null, cljs.core.sort_by.call(null, x, qiss.core.til_count.call(null, x)));
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss.core.less.call(null, qiss.core.dict_val.call(null, x)));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.less.call(null, cljs.core.vec.call(null, cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.map, cljs.core.vector), qiss.core.dict_val.call(null, x))));
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss.core.less.call(null, qiss.core.dict_val.call(null, x)));
        } else {
          return qiss.core.err.call(null, "can't \x3c", x);
        }
      }
    }
  }
};
qiss.core.less.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.atomize.call(null, cljs.core._LT_).call(null, x, y);
};
qiss.core.less.cljs$lang$maxFixedArity = 2;
qiss.core.ge = function qiss$core$ge(x, y) {
  return qiss.core.atomize.call(null, cljs.core._GT__EQ_).call(null, x, y);
};
qiss.core.le = function qiss$core$le(x, y) {
  return qiss.core.atomize.call(null, cljs.core._LT__EQ_).call(null, x, y);
};
qiss.core.pipe = function qiss$core$pipe() {
  var args18533 = [];
  var len__15394__auto___18536 = arguments.length;
  var i__15395__auto___18537 = 0;
  while (true) {
    if (i__15395__auto___18537 < len__15394__auto___18536) {
      args18533.push(arguments[i__15395__auto___18537]);
      var G__18538 = i__15395__auto___18537 + 1;
      i__15395__auto___18537 = G__18538;
      continue;
    } else {
    }
    break;
  }
  var G__18535 = args18533.length;
  switch(G__18535) {
    case 1:
      return qiss.core.pipe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18533.length)].join(""));;
  }
};
qiss.core.pipe.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.vec.call(null, cljs.core.reverse.call(null, x));
};
qiss.core.pipe.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var f__14150__auto__ = function(a__14151__auto__, b__14152__auto__) {
    if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, a__14151__auto__))) {
      if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, b__14152__auto__))) {
        var or__14355__auto__ = a__14151__auto__;
        if (cljs.core.truth_(or__14355__auto__)) {
          return or__14355__auto__;
        } else {
          return b__14152__auto__;
        }
      } else {
        var x__14667__auto__ = cljs.core.truth_(a__14151__auto__) ? 1 : 0;
        var y__14668__auto__ = b__14152__auto__;
        return x__14667__auto__ > y__14668__auto__ ? x__14667__auto__ : y__14668__auto__;
      }
    } else {
      if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, b__14152__auto__))) {
        var x__14667__auto__ = a__14151__auto__;
        var y__14668__auto__ = cljs.core.truth_(b__14152__auto__) ? 1 : 0;
        return x__14667__auto__ > y__14668__auto__ ? x__14667__auto__ : y__14668__auto__;
      } else {
        var x__14667__auto__ = a__14151__auto__;
        var y__14668__auto__ = b__14152__auto__;
        return x__14667__auto__ > y__14668__auto__ ? x__14667__auto__ : y__14668__auto__;
      }
    }
  };
  return qiss.core_macros.atomize.call(null, f__14150__auto__).call(null, x, y);
};
qiss.core.pipe.cljs$lang$maxFixedArity = 2;
qiss.core.tilde = function qiss$core$tilde() {
  var args18540 = [];
  var len__15394__auto___18543 = arguments.length;
  var i__15395__auto___18544 = 0;
  while (true) {
    if (i__15395__auto___18544 < len__15394__auto___18543) {
      args18540.push(arguments[i__15395__auto___18544]);
      var G__18545 = i__15395__auto___18544 + 1;
      i__15395__auto___18544 = G__18545;
      continue;
    } else {
    }
    break;
  }
  var G__18542 = args18540.length;
  switch(G__18542) {
    case 1:
      return qiss.core.tilde.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.tilde.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18540.length)].join(""));;
  }
};
qiss.core.tilde.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.core.mapv.call(null, qiss.core.tilde, x);
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, x), qiss.core.tilde.call(null, qiss.core.dict_val.call(null, x)));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.make_table.call(null, qiss.core.cols.call(null, x), qiss.core.tilde.call(null, qiss.core.dict_val.call(null, x)));
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.make_keyed_table.call(null, qiss.core.dict_key.call(null, x), qiss.core.tilde.call(null, qiss.core.dict_val.call(null, x)));
        } else {
          if (cljs.core._EQ_.call(null, 0, x)) {
            return true;
          } else {
            return cljs.core.not.call(null, x);
          }
        }
      }
    }
  }
};
qiss.core.tilde.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._EQ_.call(null, x, y);
};
qiss.core.tilde.cljs$lang$maxFixedArity = 2;
qiss.core.unkey_table = function qiss$core$unkey_table(x) {
  if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
    return x;
  } else {
    var k = qiss.core.dict_key.call(null, x);
    var v = qiss.core.dict_val.call(null, x);
    return qiss.core.make_table.call(null, qiss.core.catv.call(null, qiss.core.dict_key.call(null, k), qiss.core.dict_key.call(null, v)), qiss.core.catv.call(null, qiss.core.dict_val.call(null, k), qiss.core.dict_val.call(null, v)));
  }
};
qiss.core.key_table_by_colname = function qiss$core$key_table_by_colname(x, y) {
  var i = qiss.core.index_of.call(null, qiss.core.dict_key.call(null, y), x);
  if (cljs.core._EQ_.call(null, i, cljs.core.count.call(null, qiss.core.dict_key.call(null, y)))) {
    return qiss.core.err.call(null, "mismatch: key col", x, y);
  } else {
    return qiss.core.make_keyed_table.call(null, qiss.core.make_table.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.dict_val.call(null, y).call(null, i)], null)), qiss.core.make_table.call(null, qiss.core.removev.call(null, qiss.core.dict_key.call(null, y), i), qiss.core.removev.call(null, qiss.core.dict_val.call(null, y), i)));
  }
};
qiss.core.key_table_by_colnames = function qiss$core$key_table_by_colnames(x, y) {
  var i = cljs.core.mapv.call(null, function(p1__18547_SHARP_) {
    return qiss.core.index_of.call(null, qiss.core.dict_key.call(null, y), p1__18547_SHARP_);
  }, x);
  if (cljs.core.truth_(qiss.core.any_QMARK_.call(null, cljs.core.mapv.call(null, cljs.core.partial.call(null, cljs.core._EQ_, cljs.core.count.call(null, qiss.core.dict_key.call(null, y))), i)))) {
    return qiss.core.err.call(null, "mismatch: key cols", x, y);
  } else {
    return qiss.core.make_keyed_table.call(null, qiss.core.make_table.call(null, x, qiss.core.index.call(null, qiss.core.dict_val.call(null, y), i)), qiss.core.make_table.call(null, qiss.core.except.call(null, qiss.core.dict_key.call(null, y), x), qiss.core.index.call(null, qiss.core.dict_val.call(null, y), qiss.core.except.call(null, qiss.core.til_count.call(null, qiss.core.dict_key.call(null, y)), i))));
  }
};
qiss.core.key_table_by_long = function qiss$core$key_table_by_long(x, y) {
  if (cljs.core._EQ_.call(null, x, 0)) {
    return y;
  } else {
    if (x < 0) {
      return qiss.core.err.call(null, "lhs of ! must be \x3e\x3d0 when keying a table");
    } else {
      if (cljs.core.count.call(null, qiss.core.dict_key.call(null, y)) <= x) {
        return qiss.core.err.call(null, "can't key", x, "cols from", y);
      } else {
        return qiss.core.make_keyed_table.call(null, qiss.core.make_table.call(null, cljs.core.vec.call(null, cljs.core.take.call(null, x, qiss.core.dict_key.call(null, y))), cljs.core.vec.call(null, cljs.core.take.call(null, x, qiss.core.dict_val.call(null, y)))), qiss.core.make_table.call(null, cljs.core.vec.call(null, cljs.core.drop.call(null, x, qiss.core.dict_key.call(null, y))), cljs.core.vec.call(null, cljs.core.drop.call(null, x, qiss.core.dict_val.call(null, y)))));
      }
    }
  }
};
qiss.core.key_table = function qiss$core$key_table(x, y) {
  if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
    if (cljs.core._EQ_.call(null, qiss.core.kcount.call(null, x), qiss.core.kcount.call(null, y))) {
      return qiss.core.make_keyed_table.call(null, x, y);
    } else {
      return qiss.core.err.call(null, "length", x, y);
    }
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return qiss.core.key_table_by_colnames.call(null, x, y);
    } else {
      if (typeof x === "number") {
        return qiss.core.key_table_by_long.call(null, x, y);
      } else {
        if (x instanceof cljs.core.Keyword) {
          return qiss.core.key_table_by_colname.call(null, x, y);
        } else {
          return qiss.core.err.call(null, "nyi", x, "!", y);
        }
      }
    }
  }
};
qiss.core.bang = function qiss$core$bang() {
  var args18548 = [];
  var len__15394__auto___18551 = arguments.length;
  var i__15395__auto___18552 = 0;
  while (true) {
    if (i__15395__auto___18552 < len__15394__auto___18551) {
      args18548.push(arguments[i__15395__auto___18552]);
      var G__18553 = i__15395__auto___18552 + 1;
      i__15395__auto___18552 = G__18553;
      continue;
    } else {
    }
    break;
  }
  var G__18550 = args18548.length;
  switch(G__18550) {
    case 1:
      return qiss.core.bang.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.bang.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18548.length)].join(""));;
  }
};
qiss.core.bang.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (typeof x === "number") {
    return cljs.core.vec.call(null, cljs.core.range.call(null, x));
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return qiss.core.til_count.call(null, x);
    } else {
      if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
        return qiss.core.dict_key.call(null, x);
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.dict_key.call(null, x);
        } else {
          return qiss.core.err.call(null, "nyi: monadic ! on", x);
        }
      }
    }
  }
};
qiss.core.bang.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, y))) {
    return qiss.core.key_table.call(null, x, y);
  } else {
    if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, y))) {
      return qiss.core.key_table.call(null, x, qiss.core.unkey_table.call(null, y));
    } else {
      if (cljs.core.vector_QMARK_.call(null, x)) {
        if (cljs.core.vector_QMARK_.call(null, y)) {
          if (cljs.core._EQ_.call(null, cljs.core.count.call(null, x), cljs.core.count.call(null, y))) {
            return qiss.core.make_dict.call(null, x, y);
          } else {
            return qiss.core.err.call(null, "length", x, y);
          }
        } else {
          return qiss.core.err.call(null, "mismatch", x, "!", y);
        }
      } else {
        if (cljs.core.coll_QMARK_.call(null, x) || cljs.core.coll_QMARK_.call(null, y)) {
          return qiss.core.err.call(null, "type", x, y);
        } else {
          return qiss.core.make_dict.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [y], null));
        }
      }
    }
  }
};
qiss.core.bang.cljs$lang$maxFixedArity = 2;
qiss.core.div = function qiss$core$div(x, y) {
  return qiss.core.atomize.call(null, cljs.core.quot).call(null, x, y);
};
qiss.core.kmod = function qiss$core$kmod(x, y) {
  return qiss.core.atomize.call(null, cljs.core.mod).call(null, x, y);
};
qiss.core.sv = function qiss$core$sv(x, y) {
  return cljs.core.vec.call(null, clojure.string.join.call(null, cljs.core.vector_QMARK_.call(null, x) ? clojure.string.join.call(null, x) : x, cljs.core.mapv.call(null, clojure.string.join, y)));
};
qiss.core.vs = function qiss$core$vs(x, y) {
  return cljs.core.mapv.call(null, cljs.core.vec, clojure.string.split.call(null, clojure.string.join.call(null, y), cljs.core.re_pattern.call(null, cljs.core.vector_QMARK_.call(null, x) ? clojure.string.join.call(null, x) : [cljs.core.str(x)].join(""))));
};
qiss.core.fdiv = function qiss$core$fdiv() {
  var args18558 = [];
  var len__15394__auto___18561 = arguments.length;
  var i__15395__auto___18562 = 0;
  while (true) {
    if (i__15395__auto___18562 < len__15394__auto___18561) {
      args18558.push(arguments[i__15395__auto___18562]);
      var G__18563 = i__15395__auto___18562 + 1;
      i__15395__auto___18562 = G__18563;
      continue;
    } else {
    }
    break;
  }
  var G__18560 = args18558.length;
  switch(G__18560) {
    case 1:
      return qiss.core.fdiv.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.fdiv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18558.length)].join(""));;
  }
};
qiss.core.fdiv.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    return cljs.core.mapv.call(null, function(p1__18555_SHARP_) {
      return 1 / p1__18555_SHARP_;
    }, x);
  } else {
    return 1 / x;
  }
};
qiss.core.fdiv.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.atomize.call(null, function(p1__18556_SHARP_, p2__18557_SHARP_) {
    return p1__18556_SHARP_ / p2__18557_SHARP_;
  }).call(null, x, y);
};
qiss.core.fdiv.cljs$lang$maxFixedArity = 2;
qiss.core.join = function qiss$core$join() {
  var args18565 = [];
  var len__15394__auto___18568 = arguments.length;
  var i__15395__auto___18569 = 0;
  while (true) {
    if (i__15395__auto___18569 < len__15394__auto___18568) {
      args18565.push(arguments[i__15395__auto___18569]);
      var G__18570 = i__15395__auto___18569 + 1;
      i__15395__auto___18569 = G__18570;
      continue;
    } else {
    }
    break;
  }
  var G__18567 = args18565.length;
  switch(G__18567) {
    case 1:
      return qiss.core.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18565.length)].join(""));;
  }
};
qiss.core.join.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null);
};
qiss.core.join.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    if (cljs.core.vector_QMARK_.call(null, y)) {
      return cljs.core.vec.call(null, cljs.core.concat.call(null, x, y));
    } else {
      return cljs.core.conj.call(null, x, y);
    }
  } else {
    if (cljs.core.vector_QMARK_.call(null, y)) {
      return cljs.core.vec.call(null, cljs.core.cons.call(null, x, y));
    } else {
      if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
        if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
          return qiss.core.atomize.call(null, function(x__$1, y__$1) {
            return y__$1;
          }).call(null, x, y);
        } else {
          return qiss.core.err.call(null, "can't join", x, y);
        }
      } else {
        if (cljs.core.coll_QMARK_.call(null, x) || cljs.core.coll_QMARK_.call(null, y)) {
          return qiss.core.err.call(null, "can't join", x, y);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null);
        }
      }
    }
  }
};
qiss.core.join.cljs$lang$maxFixedArity = 2;
qiss.core.take_from_vec = function qiss$core$take_from_vec(n, x) {
  if (0 <= n) {
    return cljs.core.mapv.call(null, function(p1__18572_SHARP_) {
      return x.call(null, cljs.core.mod.call(null, p1__18572_SHARP_, cljs.core.count.call(null, x)));
    }, cljs.core.range.call(null, n));
  } else {
    return cljs.core.vec.call(null, cljs.core.take_last.call(null, -n, x));
  }
};
qiss.core.take_from_dict = function qiss$core$take_from_dict(n, x) {
  if (typeof n === "number") {
    return qiss.core.make_dict.call(null, qiss.core.ktake.call(null, n, qiss.core.dict_key.call(null, x)), qiss.core.ktake.call(null, n, qiss.core.dict_val.call(null, x)));
  } else {
    if (n instanceof cljs.core.Keyword) {
      return qiss$core$take_from_dict.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null), x);
    } else {
      if (!cljs.core.every_QMARK_.call(null, function(p1__18573_SHARP_) {
        return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18573_SHARP_], true), qiss.core.dict_key.call(null, x));
      }, n)) {
        return qiss.core.err.call(null, "mismatch: #", n, x);
      } else {
        return qiss.core.make_dict.call(null, n, qiss.core.index.call(null, qiss.core.dict_val.call(null, x), qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), n)));
      }
    }
  }
};
qiss.core.take_from_table = function qiss$core$take_from_table(n, x) {
  if (typeof n === "number") {
    return qiss.core.make_table.call(null, qiss.core.cols.call(null, x), cljs.core.mapv.call(null, cljs.core.partial.call(null, qiss.core.ktake, n), qiss.core.dict_val.call(null, x)));
  } else {
    if (n instanceof cljs.core.Keyword) {
      return qiss$core$take_from_table.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null), x);
    } else {
      if (!cljs.core.every_QMARK_.call(null, function(p1__18574_SHARP_) {
        return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18574_SHARP_], true), qiss.core.cols.call(null, x));
      }, n)) {
        return qiss.core.err.call(null, "mismatch: #", n, x);
      } else {
        return qiss.core.make_table.call(null, n, qiss.core.index.call(null, qiss.core.dict_val.call(null, x), qiss.core.findv.call(null, qiss.core.cols.call(null, x), n)));
      }
    }
  }
};
qiss.core.take_from_keyed_table = function qiss$core$take_from_keyed_table(n, x) {
  if (typeof n === "number") {
    return qiss.core.make_keyed_table.call(null, qiss.core.ktake.call(null, n, qiss.core.dict_key.call(null, x)), qiss.core.ktake.call(null, n, qiss.core.dict_val.call(null, x)));
  } else {
    return qiss.core.take_from_table.call(null, n, qiss.core.unkey_table.call(null, x));
  }
};
qiss.core.kcount = function qiss$core$kcount(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.core.count.call(null, x);
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return cljs.core.count.call(null, qiss.core.dict_val.call(null, x));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return cljs.core.count.call(null, cljs.core.first.call(null, qiss.core.dict_val.call(null, x)));
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return cljs.core.count.call(null, cljs.core.first.call(null, qiss.core.dict_val.call(null, qiss.core.dict_key.call(null, x))));
        } else {
          return 1;
        }
      }
    }
  }
};
qiss.core.ktake = function qiss$core$ktake(x, y) {
  if (cljs.core.coll_QMARK_.call(null, x) && !cljs.core.empty_QMARK_.call(null, x) && typeof cljs.core.first.call(null, x) === "number") {
    return qiss.core.err.call(null, "nyi: reshape");
  } else {
    var n = cljs.core.truth_(qiss.core.bool_QMARK_.call(null, x)) ? cljs.core.truth_(x) ? 1 : 0 : x;
    if (!cljs.core.coll_QMARK_.call(null, y)) {
      return cljs.core.vec.call(null, cljs.core.repeat.call(null, n, y));
    } else {
      if (cljs.core.vector_QMARK_.call(null, y)) {
        return qiss.core.take_from_vec.call(null, n, y);
      } else {
        if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
          return qiss.core.take_from_dict.call(null, n, y);
        } else {
          if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, y))) {
            return qiss.core.take_from_table.call(null, n, y);
          } else {
            if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, y))) {
              return qiss.core.take_from_keyed_table.call(null, n, y);
            } else {
              return qiss.core.err.call(null, "nyi: # on ", y);
            }
          }
        }
      }
    }
  }
};
qiss.core.pound = function qiss$core$pound() {
  var args18575 = [];
  var len__15394__auto___18578 = arguments.length;
  var i__15395__auto___18579 = 0;
  while (true) {
    if (i__15395__auto___18579 < len__15394__auto___18578) {
      args18575.push(arguments[i__15395__auto___18579]);
      var G__18580 = i__15395__auto___18579 + 1;
      i__15395__auto___18579 = G__18580;
      continue;
    } else {
    }
    break;
  }
  var G__18577 = args18575.length;
  switch(G__18577) {
    case 1:
      return qiss.core.pound.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.pound.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18575.length)].join(""));;
  }
};
qiss.core.pound.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return qiss.core.kcount.call(null, x);
};
qiss.core.pound.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.ktake.call(null, x, y);
};
qiss.core.pound.cljs$lang$maxFixedArity = 2;
qiss.core.minus = function qiss$core$minus() {
  var args18582 = [];
  var len__15394__auto___18585 = arguments.length;
  var i__15395__auto___18586 = 0;
  while (true) {
    if (i__15395__auto___18586 < len__15394__auto___18585) {
      args18582.push(arguments[i__15395__auto___18586]);
      var G__18587 = i__15395__auto___18586 + 1;
      i__15395__auto___18586 = G__18587;
      continue;
    } else {
    }
    break;
  }
  var G__18584 = args18582.length;
  switch(G__18584) {
    case 1:
      return qiss.core.minus.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.minus.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18582.length)].join(""));;
  }
};
qiss.core.minus.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
qiss.core.minus.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.atomize.call(null, cljs.core._).call(null, x, y);
};
qiss.core.minus.cljs$lang$maxFixedArity = 2;
qiss.core.each = function qiss$core$each(f) {
  return function() {
    var G__18589__delegate = function(e, x) {
      return cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.mapv, function() {
        var G__18590__delegate = function(a) {
          return cljs.core.apply.call(null, qiss.core.lambda_callable.call(null, e, f), a);
        };
        var G__18590 = function(var_args) {
          var a = null;
          if (arguments.length > 0) {
            var G__18591__i = 0, G__18591__a = new Array(arguments.length - 0);
            while (G__18591__i < G__18591__a.length) {
              G__18591__a[G__18591__i] = arguments[G__18591__i + 0];
              ++G__18591__i;
            }
            a = new cljs.core.IndexedSeq(G__18591__a, 0);
          }
          return G__18590__delegate.call(this, a);
        };
        G__18590.cljs$lang$maxFixedArity = 0;
        G__18590.cljs$lang$applyTo = function(arglist__18592) {
          var a = cljs.core.seq(arglist__18592);
          return G__18590__delegate(a);
        };
        G__18590.cljs$core$IFn$_invoke$arity$variadic = G__18590__delegate;
        return G__18590;
      }()), x);
    };
    var G__18589 = function(e, var_args) {
      var x = null;
      if (arguments.length > 1) {
        var G__18593__i = 0, G__18593__a = new Array(arguments.length - 1);
        while (G__18593__i < G__18593__a.length) {
          G__18593__a[G__18593__i] = arguments[G__18593__i + 1];
          ++G__18593__i;
        }
        x = new cljs.core.IndexedSeq(G__18593__a, 0);
      }
      return G__18589__delegate.call(this, e, x);
    };
    G__18589.cljs$lang$maxFixedArity = 1;
    G__18589.cljs$lang$applyTo = function(arglist__18594) {
      var e = cljs.core.first(arglist__18594);
      var x = cljs.core.rest(arglist__18594);
      return G__18589__delegate(e, x);
    };
    G__18589.cljs$core$IFn$_invoke$arity$variadic = G__18589__delegate;
    return G__18589;
  }();
};
qiss.core.each_left = function qiss$core$each_left(f) {
  return function(e, x, y) {
    return cljs.core.mapv.call(null, function(p1__18595_SHARP_) {
      return qiss.core.lambda_callable.call(null, e, f).call(null, p1__18595_SHARP_, y);
    }, x);
  };
};
qiss.core.each_prior = function qiss$core$each_prior(f) {
  return function() {
    var G__18596__delegate = function(e, x) {
      var p = qiss.core.lambda_callable.call(null, e, f);
      if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, x))) {
        var q = cljs.core.first.call(null, x);
        return cljs.core.vec.call(null, cljs.core.cons.call(null, cljs.core.first.call(null, q), cljs.core.map.call(null, p, cljs.core.next.call(null, q), cljs.core.drop_last.call(null, q))));
      } else {
        var q = cljs.core.second.call(null, x);
        return cljs.core.vec.call(null, cljs.core.map.call(null, p, q, cljs.core.cons.call(null, cljs.core.first.call(null, x), cljs.core.drop_last.call(null, q))));
      }
    };
    var G__18596 = function(e, var_args) {
      var x = null;
      if (arguments.length > 1) {
        var G__18597__i = 0, G__18597__a = new Array(arguments.length - 1);
        while (G__18597__i < G__18597__a.length) {
          G__18597__a[G__18597__i] = arguments[G__18597__i + 1];
          ++G__18597__i;
        }
        x = new cljs.core.IndexedSeq(G__18597__a, 0);
      }
      return G__18596__delegate.call(this, e, x);
    };
    G__18596.cljs$lang$maxFixedArity = 1;
    G__18596.cljs$lang$applyTo = function(arglist__18598) {
      var e = cljs.core.first(arglist__18598);
      var x = cljs.core.rest(arglist__18598);
      return G__18596__delegate(e, x);
    };
    G__18596.cljs$core$IFn$_invoke$arity$variadic = G__18596__delegate;
    return G__18596;
  }();
};
qiss.core.each_right = function qiss$core$each_right(f) {
  return function(e, x, y) {
    return cljs.core.mapv.call(null, cljs.core.partial.call(null, qiss.core.lambda_callable.call(null, e, f), x), y);
  };
};
qiss.core.over = function qiss$core$over(f) {
  return function() {
    var G__18599__delegate = function(e, x) {
      var p = qiss.core.lambda_callable.call(null, e, f);
      if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, x))) {
        return cljs.core.reduce.call(null, p, cljs.core.first.call(null, x));
      } else {
        return cljs.core.reduce.call(null, p, cljs.core.first.call(null, x), cljs.core.second.call(null, x));
      }
    };
    var G__18599 = function(e, var_args) {
      var x = null;
      if (arguments.length > 1) {
        var G__18600__i = 0, G__18600__a = new Array(arguments.length - 1);
        while (G__18600__i < G__18600__a.length) {
          G__18600__a[G__18600__i] = arguments[G__18600__i + 1];
          ++G__18600__i;
        }
        x = new cljs.core.IndexedSeq(G__18600__a, 0);
      }
      return G__18599__delegate.call(this, e, x);
    };
    G__18599.cljs$lang$maxFixedArity = 1;
    G__18599.cljs$lang$applyTo = function(arglist__18601) {
      var e = cljs.core.first(arglist__18601);
      var x = cljs.core.rest(arglist__18601);
      return G__18599__delegate(e, x);
    };
    G__18599.cljs$core$IFn$_invoke$arity$variadic = G__18599__delegate;
    return G__18599;
  }();
};
qiss.core.flip = function qiss$core$flip(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.core.apply.call(null, cljs.core.mapv, cljs.core.vector, x);
  } else {
    if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
      return qiss.core.d_from_t.call(null, x);
    } else {
      if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
        if (cljs.core.truth_(function() {
          var and__14343__auto__ = qiss.core.all_QMARK_.call(null, cljs.core.mapv.call(null, cljs.core.keyword_QMARK_, qiss.core.dict_key.call(null, x)));
          if (cljs.core.truth_(and__14343__auto__)) {
            var and__14343__auto____$1 = qiss.core.all_QMARK_.call(null, cljs.core.mapv.call(null, cljs.core.vector_QMARK_, qiss.core.dict_val.call(null, x)));
            if (cljs.core.truth_(and__14343__auto____$1)) {
              return cljs.core.apply.call(null, cljs.core._EQ_, cljs.core.mapv.call(null, cljs.core.count, qiss.core.dict_val.call(null, x)));
            } else {
              return and__14343__auto____$1;
            }
          } else {
            return and__14343__auto__;
          }
        }())) {
          return qiss.core.t_from_d.call(null, x);
        } else {
          return qiss.core.err.call(null, "can only flip column dicts");
        }
      } else {
        return qiss.core.err.call(null, "nyi: flip", x);
      }
    }
  }
};
qiss.core.plus = function qiss$core$plus() {
  var args18604 = [];
  var len__15394__auto___18607 = arguments.length;
  var i__15395__auto___18608 = 0;
  while (true) {
    if (i__15395__auto___18608 < len__15394__auto___18607) {
      args18604.push(arguments[i__15395__auto___18608]);
      var G__18609 = i__15395__auto___18608 + 1;
      i__15395__auto___18608 = G__18609;
      continue;
    } else {
    }
    break;
  }
  var G__18606 = args18604.length;
  switch(G__18606) {
    case 1:
      return qiss.core.plus.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.plus.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18604.length)].join(""));;
  }
};
qiss.core.plus.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return qiss.core.flip.call(null, x);
};
qiss.core.plus.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var f__14150__auto__ = function(a__14151__auto__, b__14152__auto__) {
    if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, a__14151__auto__))) {
      if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, b__14152__auto__))) {
        return function(p1__18602_SHARP_, p2__18603_SHARP_) {
          return cljs.core.map.call(null, qiss.core.bool_to_long, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18602_SHARP_, p2__18603_SHARP_], null));
        }.call(null, a__14151__auto__, b__14152__auto__);
      } else {
        return (cljs.core.truth_(a__14151__auto__) ? 1 : 0) + b__14152__auto__;
      }
    } else {
      if (cljs.core.truth_(qiss.core_macros.bool_QMARK_.call(null, b__14152__auto__))) {
        return a__14151__auto__ + (cljs.core.truth_(b__14152__auto__) ? 1 : 0);
      } else {
        return a__14151__auto__ + b__14152__auto__;
      }
    }
  };
  return qiss.core_macros.atomize.call(null, f__14150__auto__).call(null, x, y);
};
qiss.core.plus.cljs$lang$maxFixedArity = 2;
qiss.core.scan = function qiss$core$scan(f) {
  return function() {
    var G__18611__delegate = function(e, x) {
      var p = qiss.core.lambda_callable.call(null, e, f);
      return cljs.core.vec.call(null, cljs.core.drop.call(null, 1, cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, x)) ? cljs.core.reductions.call(null, f, cljs.core.first.call(null, x)) : cljs.core.reductions.call(null, p, cljs.core.first.call(null, x), cljs.core.second.call(null, x))));
    };
    var G__18611 = function(e, var_args) {
      var x = null;
      if (arguments.length > 1) {
        var G__18612__i = 0, G__18612__a = new Array(arguments.length - 1);
        while (G__18612__i < G__18612__a.length) {
          G__18612__a[G__18612__i] = arguments[G__18612__i + 1];
          ++G__18612__i;
        }
        x = new cljs.core.IndexedSeq(G__18612__a, 0);
      }
      return G__18611__delegate.call(this, e, x);
    };
    G__18611.cljs$lang$maxFixedArity = 1;
    G__18611.cljs$lang$applyTo = function(arglist__18613) {
      var e = cljs.core.first(arglist__18613);
      var x = cljs.core.rest(arglist__18613);
      return G__18611__delegate(e, x);
    };
    G__18611.cljs$core$IFn$_invoke$arity$variadic = G__18611__delegate;
    return G__18611;
  }();
};
qiss.core.times = function qiss$core$times() {
  var args18614 = [];
  var len__15394__auto___18617 = arguments.length;
  var i__15395__auto___18618 = 0;
  while (true) {
    if (i__15395__auto___18618 < len__15394__auto___18617) {
      args18614.push(arguments[i__15395__auto___18618]);
      var G__18619 = i__15395__auto___18618 + 1;
      i__15395__auto___18618 = G__18619;
      continue;
    } else {
    }
    break;
  }
  var G__18616 = args18614.length;
  switch(G__18616) {
    case 1:
      return qiss.core.times.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.times.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18614.length)].join(""));;
  }
};
qiss.core.times.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.first.call(null, x);
};
qiss.core.times.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return qiss.core.atomize.call(null, cljs.core._STAR_).call(null, x, y);
};
qiss.core.times.cljs$lang$maxFixedArity = 2;
qiss.core.msome = function qiss$core$msome() {
  var args__15401__auto__ = [];
  var len__15394__auto___18623 = arguments.length;
  var i__15395__auto___18624 = 0;
  while (true) {
    if (i__15395__auto___18624 < len__15394__auto___18623) {
      args__15401__auto__.push(arguments[i__15395__auto___18624]);
      var G__18625 = i__15395__auto___18624 + 1;
      i__15395__auto___18624 = G__18625;
      continue;
    } else {
    }
    break;
  }
  var argseq__15402__auto__ = 1 < args__15401__auto__.length ? new cljs.core.IndexedSeq(args__15401__auto__.slice(1), 0) : null;
  return qiss.core.msome.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15402__auto__);
};
qiss.core.msome.cljs$core$IFn$_invoke$arity$variadic = function(p, c) {
  while (true) {
    if (cljs.core.not.call(null, qiss.core.any_QMARK_.call(null, cljs.core.map.call(null, cljs.core.empty_QMARK_, c)))) {
      var or__14355__auto__ = cljs.core.apply.call(null, p, cljs.core.map.call(null, cljs.core.first, c));
      if (cljs.core.truth_(or__14355__auto__)) {
        return or__14355__auto__;
      } else {
        var G__18626 = p;
        var G__18627 = cljs.core.map.call(null, cljs.core.next, c);
        p = G__18626;
        c = G__18627;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
qiss.core.msome.cljs$lang$maxFixedArity = 1;
qiss.core.msome.cljs$lang$applyTo = function(seq18621) {
  var G__18622 = cljs.core.first.call(null, seq18621);
  var seq18621__$1 = cljs.core.next.call(null, seq18621);
  return qiss.core.msome.cljs$core$IFn$_invoke$arity$variadic(G__18622, seq18621__$1);
};
qiss.core.index_of_colwise = function qiss$core$index_of_colwise() {
  var args__15401__auto__ = [];
  var len__15394__auto___18630 = arguments.length;
  var i__15395__auto___18631 = 0;
  while (true) {
    if (i__15395__auto___18631 < len__15394__auto___18630) {
      args__15401__auto__.push(arguments[i__15395__auto___18631]);
      var G__18632 = i__15395__auto___18631 + 1;
      i__15395__auto___18631 = G__18632;
      continue;
    } else {
    }
    break;
  }
  var argseq__15402__auto__ = 1 < args__15401__auto__.length ? new cljs.core.IndexedSeq(args__15401__auto__.slice(1), 0) : null;
  return qiss.core.index_of_colwise.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__15402__auto__);
};
qiss.core.index_of_colwise.cljs$core$IFn$_invoke$arity$variadic = function(c, r) {
  var temp__4423__auto__ = cljs.core.apply.call(null, qiss.core.msome, function() {
    var G__18633__delegate = function(i, q) {
      if (cljs.core._EQ_.call(null, r, q)) {
        return i;
      } else {
        return null;
      }
    };
    var G__18633 = function(i, var_args) {
      var q = null;
      if (arguments.length > 1) {
        var G__18634__i = 0, G__18634__a = new Array(arguments.length - 1);
        while (G__18634__i < G__18634__a.length) {
          G__18634__a[G__18634__i] = arguments[G__18634__i + 1];
          ++G__18634__i;
        }
        q = new cljs.core.IndexedSeq(G__18634__a, 0);
      }
      return G__18633__delegate.call(this, i, q);
    };
    G__18633.cljs$lang$maxFixedArity = 1;
    G__18633.cljs$lang$applyTo = function(arglist__18635) {
      var i = cljs.core.first(arglist__18635);
      var q = cljs.core.rest(arglist__18635);
      return G__18633__delegate(i, q);
    };
    G__18633.cljs$core$IFn$_invoke$arity$variadic = G__18633__delegate;
    return G__18633;
  }(), cljs.core.iterate.call(null, cljs.core.inc, 0), c);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var k = temp__4423__auto__;
    return k;
  } else {
    return cljs.core.count.call(null, cljs.core.first.call(null, c));
  }
};
qiss.core.index_of_colwise.cljs$lang$maxFixedArity = 1;
qiss.core.index_of_colwise.cljs$lang$applyTo = function(seq18628) {
  var G__18629 = cljs.core.first.call(null, seq18628);
  var seq18628__$1 = cljs.core.next.call(null, seq18628);
  return qiss.core.index_of_colwise.cljs$core$IFn$_invoke$arity$variadic(G__18629, seq18628__$1);
};
qiss.core.findv = function qiss$core$findv(x, y) {
  if (!cljs.core.coll_QMARK_.call(null, y)) {
    return qiss.core.index_of.call(null, x, y);
  } else {
    if (cljs.core.vector_QMARK_.call(null, y)) {
      return cljs.core.mapv.call(null, function(p1__18636_SHARP_) {
        return qiss$core$findv.call(null, x, p1__18636_SHARP_);
      }, y);
    } else {
      if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
        return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, y), qiss$core$findv.call(null, x, qiss.core.dict_val.call(null, y)));
      } else {
        if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, y))) {
          return qiss.core.make_table.call(null, qiss.core.dict_key.call(null, y), qiss$core$findv.call(null, x, qiss.core.dict_val.call(null, y)));
        } else {
          if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, y))) {
            return qiss.core.make_keyed_table.call(null, qiss.core.dict_key.call(null, y), qiss$core$findv.call(null, x, qiss.core.dict_val.call(null, y)));
          } else {
            return qiss.core.err.call(null, "findv", x, y);
          }
        }
      }
    }
  }
};
qiss.core.find_table = function qiss$core$find_table(x, y) {
  if (cljs.core.truth_(function() {
    var and__14343__auto__ = function() {
      var or__14355__auto__ = qiss.core.dict_QMARK_.call(null, y);
      if (cljs.core.truth_(or__14355__auto__)) {
        return or__14355__auto__;
      } else {
        return qiss.core.table_QMARK_.call(null, y);
      }
    }();
    if (cljs.core.truth_(and__14343__auto__)) {
      return cljs.core.every_QMARK_.call(null, function(and__14343__auto__) {
        return function(p1__18637_SHARP_) {
          return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18637_SHARP_], true), qiss.core.cols.call(null, x));
        };
      }(and__14343__auto__), qiss.core.dict_key.call(null, y));
    } else {
      return and__14343__auto__;
    }
  }())) {
    var f = cljs.core.partial.call(null, qiss.core.index_of_colwise, qiss.core.dict_val.call(null, x));
    var v = qiss.core.dict_val.call(null, y);
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
      return cljs.core.apply.call(null, f, v);
    } else {
      return cljs.core.apply.call(null, cljs.core.mapv, f, v);
    }
  } else {
    return qiss.core.err.call(null, "mismatch: ?", x, y);
  }
};
qiss.core.krand = function qiss$core$krand(x, y) {
  if (cljs.core.vector_QMARK_.call(null, y)) {
    return qiss.core.index.call(null, y, cljs.core.vec.call(null, cljs.core.repeatedly.call(null, x, function() {
      return cljs.core.rand_int.call(null, cljs.core.count.call(null, y));
    })));
  } else {
    return cljs.core.vec.call(null, cljs.core.truth_(qiss.core.float_QMARK_.call(null, y)) ? cljs.core.repeatedly.call(null, x, function() {
      return cljs.core.rand.call(null, y);
    }) : cljs.core.repeatedly.call(null, x, function() {
      return cljs.core.rand_int.call(null, y);
    }));
  }
};
qiss.core.ques = function qiss$core$ques() {
  var args18638 = [];
  var len__15394__auto___18641 = arguments.length;
  var i__15395__auto___18642 = 0;
  while (true) {
    if (i__15395__auto___18642 < len__15394__auto___18641) {
      args18638.push(arguments[i__15395__auto___18642]);
      var G__18643 = i__15395__auto___18642 + 1;
      i__15395__auto___18642 = G__18643;
      continue;
    } else {
    }
    break;
  }
  var G__18640 = args18638.length;
  switch(G__18640) {
    case 1:
      return qiss.core.ques.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.ques.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return qiss.core.ques.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18638.length)].join(""));;
  }
};
qiss.core.ques.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.vec.call(null, cljs.core.distinct.call(null, x));
};
qiss.core.ques.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return qiss.core.findv.call(null, x, y);
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss.core.ques.call(null, qiss.core.dict_val.call(null, x), y));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.find_table.call(null, x, y);
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.index.call(null, qiss.core.dict_key.call(null, x), qiss.core.ques.call(null, qiss.core.dict_val.call(null, x), y));
        } else {
          return qiss.core.krand.call(null, x, y);
        }
      }
    }
  }
};
qiss.core.ques.cljs$core$IFn$_invoke$arity$3 = function(x, y, z) {
  return null;
};
qiss.core.ques.cljs$lang$maxFixedArity = 3;
qiss.core.deltas = function qiss$core$deltas(x) {
  return cljs.core.vec.call(null, cljs.core.cons.call(null, cljs.core.first.call(null, x), cljs.core.map.call(null, cljs.core._, cljs.core.next.call(null, x), cljs.core.drop_last.call(null, x))));
};
qiss.core.cut = function qiss$core$cut(x, y) {
  var i = cljs.core.mapv.call(null, cljs.core.range, cljs.core.next.call(null, qiss.core.deltas.call(null, cljs.core.conj.call(null, x, qiss.core.kcount.call(null, y)))));
  return qiss.core.index.call(null, y, cljs.core.mapv.call(null, function(i) {
    return function(p, q) {
      return cljs.core.mapv.call(null, function(i) {
        return function(p1__18645_SHARP_) {
          return p + p1__18645_SHARP_;
        };
      }(i), q);
    };
  }(i), x, i));
};
qiss.core.kdrop = function qiss$core$kdrop(x, y) {
  var o = 0 <= x ? cljs.core.partial.call(null, cljs.core.drop, x) : cljs.core.partial.call(null, cljs.core.drop_last, -x);
  if (cljs.core.vector_QMARK_.call(null, y)) {
    return cljs.core.vec.call(null, o.call(null, y));
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, y))) {
      return cljs.core.apply.call(null, qiss.core.make_dict, cljs.core.map.call(null, o, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.dict_key.call(null, y), qiss.core.dict_val.call(null, y)], null)));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, y))) {
        return qiss.core.make_table.call(null, qiss.core.dict_key.call(null, y), cljs.core.mapv.call(null, o, qiss.core.dict_val.call(null, y)));
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, y))) {
          return qiss.core.make_keyed_table.call(null, qiss$core$kdrop.call(null, x, qiss.core.dict_key.call(null, y)), qiss$core$kdrop.call(null, x, qiss.core.dict_val.call(null, y)));
        } else {
          return qiss.core.err.call(null, "nyi: _ (drop) on", x, y);
        }
      }
    }
  }
};
qiss.core.kremove = function qiss$core$kremove(x, y) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return qiss.core.removev.call(null, x, y);
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return cljs.core.apply.call(null, qiss.core.make_dict, cljs.core.map.call(null, function(p1__18646_SHARP_) {
        return qiss.core.removev.call(null, p1__18646_SHARP_, qiss.core.findv.call(null, qiss.core.dict_key.call(null, x), y));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.dict_key.call(null, x), qiss.core.dict_val.call(null, x)], null)));
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        if (y instanceof cljs.core.Keyword) {
          return qiss.core.t_from_d.call(null, qiss$core$kremove.call(null, qiss.core.d_from_t.call(null, x), y));
        } else {
          return qiss.core.make_table.call(null, qiss.core.dict_key.call(null, x), cljs.core.mapv.call(null, function(p1__18647_SHARP_) {
            return qiss.core.removev.call(null, p1__18647_SHARP_, y);
          }, qiss.core.dict_val.call(null, x)));
        }
      } else {
        return qiss.core.err.call(null, "nyi: _ (remove) for", x, y);
      }
    }
  }
};
qiss.core.under = function qiss$core$under() {
  var args18648 = [];
  var len__15394__auto___18651 = arguments.length;
  var i__15395__auto___18652 = 0;
  while (true) {
    if (i__15395__auto___18652 < len__15394__auto___18651) {
      args18648.push(arguments[i__15395__auto___18652]);
      var G__18653 = i__15395__auto___18652 + 1;
      i__15395__auto___18652 = G__18653;
      continue;
    } else {
    }
    break;
  }
  var G__18650 = args18648.length;
  switch(G__18650) {
    case 1:
      return qiss.core.under.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.under.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18648.length)].join(""));;
  }
};
qiss.core.under.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.long$.call(null, x);
};
qiss.core.under.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (cljs.core.coll_QMARK_.call(null, y)) {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return qiss.core.cut.call(null, x, y);
    } else {
      return qiss.core.kdrop.call(null, x, y);
    }
  } else {
    return qiss.core.kremove.call(null, x, y);
  }
};
qiss.core.under.cljs$lang$maxFixedArity = 2;
qiss.core.parse_double = function qiss$core$parse_double(x) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    return cljs.core.mapv.call(null, qiss$core$parse_double, x);
  } else {
    return parseDouble(x);
  }
};
qiss.core.parse_long = function qiss$core$parse_long(x) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    return cljs.core.mapv.call(null, qiss$core$parse_long, x);
  } else {
    return parseLong(x);
  }
};
qiss.core.parse_symbol = function qiss$core$parse_symbol(x) {
  if (cljs.core.coll_QMARK_.call(null, x)) {
    return cljs.core.mapv.call(null, cljs.core.keyword, x);
  } else {
    return cljs.core.keyword.call(null, x);
  }
};
qiss.core.parse_data = function qiss$core$parse_data(x, y) {
  if (cljs.core._EQ_.call(null, "J", x)) {
    return qiss.core.parse_long.call(null, y);
  } else {
    if (cljs.core._EQ_.call(null, "F", x)) {
      return qiss.core.parse_double.call(null, y);
    } else {
      if (cljs.core._EQ_.call(null, "S", x)) {
        return qiss.core.parse_symbol.call(null, y);
      } else {
        if (cljs.core._EQ_.call(null, "*", x)) {
          return y;
        } else {
          return qiss.core.err.call(null, "nyi: parse type", [cljs.core.str(x)].join(""));
        }
      }
    }
  }
};
qiss.core.rcsv = function qiss$core$rcsv(c, f) {
  return "Read csv file f with column types specified by c per the parse-data function";
};
qiss.core.rcsvh = function qiss$core$rcsvh(c, f) {
  return "Read csv file f, whose first line is a header, with column types\n  specified by c per the parse-data function";
};
qiss.core.wcsv = function qiss$core$wcsv(f, t) {
  return "Write to csv file f the content of table t";
};
qiss.core.ops = cljs.core.PersistentHashMap.fromArrays([cljs.core.keyword.call(null, ","), new cljs.core.Keyword(null, "\x3c\x3d", "\x3c\x3d", -395636158), new cljs.core.Keyword(null, "*", "*", -1294732318), new cljs.core.Keyword(null, "\x3e", "\x3e", -555517146), new cljs.core.Keyword(null, "_", "_", 1453416199), new cljs.core.Keyword(null, "|", "|", -352411576), new cljs.core.Keyword(null, "%", "%", 1704198600), new cljs.core.Keyword(null, "-", "-", -2112348439), cljs.core.keyword.call(null, "~"), 
new cljs.core.Keyword(null, "\x3e\x3d", "\x3e\x3d", -623615505), new cljs.core.Keyword(null, "?", "?", -1703165233), new cljs.core.Keyword(null, "\x3c\x3e", "\x3c\x3e", 1280186386), new cljs.core.Keyword(null, "#", "#", -275793773), new cljs.core.Keyword(null, "+", "+", 1913524883), new cljs.core.Keyword(null, "at", "at", 1476951349), new cljs.core.Keyword(null, "\x26", "\x26", 509580121), new cljs.core.Keyword(null, "dot", "dot", 1442709401), new cljs.core.Keyword(null, "!", "!", -311249637), new cljs.core.Keyword(null, 
"\x3d", "\x3d", 1152933628), new cljs.core.Keyword(null, "\x3c", "\x3c", -646864291)], [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.join, new cljs.core.Keyword(null, "text", "text", -1790561697), ",", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", 
"f", -1597136552), qiss.core.le, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x3c\x3d", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.times, new cljs.core.Keyword(null, "text", "text", -1790561697), "*", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.greater, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x3e", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), 
qiss.core.under, new cljs.core.Keyword(null, "text", "text", -1790561697), "_", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.pipe, new cljs.core.Keyword(null, "text", "text", -1790561697), "|", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.fdiv, new cljs.core.Keyword(null, "text", "text", -1790561697), "%", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.minus, 
new cljs.core.Keyword(null, "text", "text", -1790561697), "-", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.tilde, new cljs.core.Keyword(null, "text", "text", -1790561697), "~", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, 
cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.ge, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x3e\x3d", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.ques, 
new cljs.core.Keyword(null, "text", "text", -1790561697), "?", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.neq, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x3c\x3e", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.pound, new cljs.core.Keyword(null, "text", "text", -1790561697), "#", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.plus, 
new cljs.core.Keyword(null, "text", "text", -1790561697), "+", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.at, new cljs.core.Keyword(null, "pass-global-env", "pass-global-env", -1301958750), true, new cljs.core.Keyword(null, "text", "text", -1790561697), "@", new cljs.core.Keyword(null, 
"rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3, 4], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.amp, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x26", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 
4, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.dot, new cljs.core.Keyword(null, "pass-global-env", "pass-global-env", -1301958750), true, new cljs.core.Keyword(null, "text", "text", -1790561697), ".", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3, 4], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.bang, new cljs.core.Keyword(null, 
"text", "text", -1790561697), "!", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.eq, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x3d", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.less, new cljs.core.Keyword(null, "text", "text", -1790561697), "\x3c", new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null)]);
qiss.core.adverbs = new cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "'", "'", 348154780), qiss.core.each, cljs.core.keyword.call(null, "\\:"), qiss.core.each_left, cljs.core.keyword.call(null, "':"), qiss.core.each_prior, cljs.core.keyword.call(null, "/:"), qiss.core.each_right, new cljs.core.Keyword(null, "/", "/", 1282502798), qiss.core.over, cljs.core.keyword.call(null, "\\"), qiss.core.scan], true, false);
qiss.core.map_from_tuples = function qiss$core$map_from_tuples(x) {
  var vpn = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "actuals", "actuals", 87663642), new cljs.core.Keyword(null, "aggs", "aggs", -442886220), new cljs.core.Keyword(null, "by", "by", 30600856), new cljs.core.Keyword(null, "dcols", "dcols", -1379483184), new cljs.core.Keyword(null, "exprs", "exprs", 1795829094), new cljs.core.Keyword(null, "formals", "formals", 925536712), new cljs.core.Keyword(null, "where", "where", -2044795965)], 
  null);
  return cljs.core.reduce.call(null, function(vpn) {
    return function(m, t) {
      var vec__18657 = t;
      var p = cljs.core.nth.call(null, vec__18657, 0, null);
      var q = cljs.core.nthnext.call(null, vec__18657, 1);
      return cljs.core.assoc.call(null, m, p, cljs.core.truth_(function() {
        var or__14355__auto__ = cljs.core.not_EQ_.call(null, 1, cljs.core.count.call(null, q));
        if (or__14355__auto__) {
          return or__14355__auto__;
        } else {
          return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p], true), vpn);
        }
      }()) ? q : cljs.core.first.call(null, q));
    };
  }(vpn), cljs.core.PersistentArrayMap.EMPTY, x);
};
qiss.core.strmax = function qiss$core$strmax(x, y) {
  if (x == null) {
    return y;
  } else {
    if (y == null) {
      return x;
    } else {
      if (0 < cljs.core.compare.call(null, x, y)) {
        return x;
      } else {
        return y;
      }
    }
  }
};
qiss.core.implicit_args = function qiss$core$implicit_args(x) {
  var a = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["x", "y", "z"], null);
  var mia = function(a) {
    return function qiss$core$implicit_args_$_self(x__$1) {
      if (!cljs.core.coll_QMARK_.call(null, x__$1) || cljs.core.empty_QMARK_.call(null, x__$1) || cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "lambda", "lambda", -1483427225), cljs.core.first.call(null, x__$1))) {
        return null;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "id", "id", -1388402092), cljs.core.first.call(null, x__$1))) {
          if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([cljs.core.second.call(null, x__$1)], true), a))) {
            return cljs.core.second.call(null, x__$1);
          } else {
            return null;
          }
        } else {
          return cljs.core.reduce.call(null, qiss.core.strmax, cljs.core.mapv.call(null, qiss$core$implicit_args_$_self, x__$1));
        }
      }
    };
  }(a);
  var n = cljs.core.mod.call(null, 1 + qiss.core.index_of.call(null, a, mia.call(null, x)), 1 + cljs.core.count.call(null, a));
  return cljs.core.vec.call(null, cljs.core.take.call(null, n, a));
};
qiss.core.kdestructure = function qiss$core$kdestructure(a, x) {
  if (cljs.core.count.call(null, x) < cljs.core.count.call(null, a)) {
    return qiss.core.err.call(null, "destructuring mismatch", a, x);
  } else {
    return cljs.core.reduce.call(null, function(e, p__18660) {
      var vec__18661 = p__18660;
      var p = cljs.core.nth.call(null, vec__18661, 0, null);
      var q = cljs.core.nth.call(null, vec__18661, 1, null);
      var t = cljs.core.first.call(null, p);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hole", "hole", -743450790), t)) {
        return e;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "id", "id", -1388402092), t)) {
          return cljs.core.assoc.call(null, e, cljs.core.keyword.call(null, cljs.core.second.call(null, p)), q);
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "did", "did", 593382517), t)) {
            var id = cljs.core.keyword.call(null, cljs.core.second.call(null, p));
            if (cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "_", "_", 1453416199), id)) {
              return cljs.core.assoc.call(null, e, id, q);
            } else {
              return null;
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "varg", "varg", 405462767), t)) {
              return cljs.core.merge.call(null, e, qiss$core$kdestructure.call(null, cljs.core.next.call(null, p), q));
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "targ", "targ", 2067527953), t) || cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "targs", "targs", 246288491), t)) {
                return cljs.core.merge.call(null, e, qiss$core$kdestructure.call(null, cljs.core.next.call(null, p), qiss.core.dict_val.call(null, qiss.core.flip.call(null, q))));
              } else {
                if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "darg", "darg", -346444863), t) || cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ktarg", "ktarg", 711259993), t)) {
                  return cljs.core.merge.call(null, e, qiss$core$kdestructure.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, p)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.dict_key.call(null, q)], null)), qiss$core$kdestructure.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, cljs.core.next.call(null, 
                  p))], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [qiss.core.dict_val.call(null, q)], null)));
                } else {
                  return qiss.core.err.call(null, "nyi: destrucuring", a, x);
                }
              }
            }
          }
        }
      }
    }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.zipmap.call(null, a, x));
  }
};
qiss.core.args = function qiss$core$args(f) {
  qiss.core.simple = function qiss$core$args_$_simple(a) {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "formals", "formals", 925536712), a, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count.call(null, a)], null)], null);
  };
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "formals", "formals", 925536712)).cljs$core$IFn$_invoke$arity$1(f);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var a = temp__4423__auto__;
    if (cljs.core.truth_(qiss.core.all_QMARK_.call(null, cljs.core.map.call(null, function(a, temp__4423__auto__) {
      return function(p1__18662_SHARP_) {
        return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "id", "id", -1388402092), cljs.core.first, p1__18662_SHARP_);
      };
    }(a, temp__4423__auto__), a)))) {
      return qiss.core.simple.call(null, cljs.core.mapv.call(null, function(a, temp__4423__auto__) {
        return function(p1__18663_SHARP_) {
          return cljs.core.keyword.call(null, cljs.core.second.call(null, p1__18663_SHARP_));
        };
      }(a, temp__4423__auto__), a));
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "formals", "formals", 925536712), cljs.core.partial.call(null, qiss.core.kdestructure, a), new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count.call(null, a)], null)], null);
    }
  } else {
    return qiss.core.simple.call(null, cljs.core.mapv.call(null, cljs.core.keyword, qiss.core.implicit_args.call(null, (new cljs.core.Keyword(null, "exprs", "exprs", 1795829094)).cljs$core$IFn$_invoke$arity$1(f))));
  }
};
qiss.core.feval = function qiss$core$feval(tu, f) {
  return function() {
    var G__18668__delegate = function(e, x) {
      if (cljs.core.not.call(null, cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([cljs.core.count.call(null, x)], true), qiss.core.lambda_rank.call(null, f)))) {
        return qiss.core.err.call(null, "rank", qiss.core.lambda_text.call(null, f), cljs.core.vec.call(null, x));
      } else {
        var e2 = cljs.core.merge.call(null, e, qiss.core.lambda_env.call(null, f), cljs.core.coll_QMARK_.call(null, qiss.core.lambda_formals.call(null, f)) ? cljs.core.zipmap.call(null, qiss.core.lambda_formals.call(null, f), x) : qiss.core.lambda_formals.call(null, f).call(null, x));
        return cljs.core.last.call(null, cljs.core.reduce.call(null, function(e2) {
          return function(p__18666, p) {
            var vec__18667 = p__18666;
            var e3 = cljs.core.nth.call(null, vec__18667, 0, null);
            var r = cljs.core.nth.call(null, vec__18667, 1, null);
            return qiss.core.resolve_full_expr.call(null, tu, e3, p);
          };
        }(e2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, null], null), qiss.core.lambda_body.call(null, f)));
      }
    };
    var G__18668 = function(e, var_args) {
      var x = null;
      if (arguments.length > 1) {
        var G__18669__i = 0, G__18669__a = new Array(arguments.length - 1);
        while (G__18669__i < G__18669__a.length) {
          G__18669__a[G__18669__i] = arguments[G__18669__i + 1];
          ++G__18669__i;
        }
        x = new cljs.core.IndexedSeq(G__18669__a, 0);
      }
      return G__18668__delegate.call(this, e, x);
    };
    G__18668.cljs$lang$maxFixedArity = 1;
    G__18668.cljs$lang$applyTo = function(arglist__18670) {
      var e = cljs.core.first(arglist__18670);
      var x = cljs.core.rest(arglist__18670);
      return G__18668__delegate(e, x);
    };
    G__18668.cljs$core$IFn$_invoke$arity$variadic = G__18668__delegate;
    return G__18668;
  }();
};
qiss.core.index_table = function qiss$core$index_table(t, i) {
  if (cljs.core.vector_QMARK_.call(null, i) && cljs.core.first.call(null, i) instanceof cljs.core.Keyword || i instanceof cljs.core.Keyword) {
    return qiss.core.index.call(null, qiss.core.d_from_t.call(null, t), i);
  } else {
    if (cljs.core.vector_QMARK_.call(null, i) && (cljs.core.empty_QMARK_.call(null, i) || typeof cljs.core.first.call(null, i) === "number") || typeof i === "number") {
      var d = qiss.core.d_from_t.call(null, t);
      var r = qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, d), cljs.core.mapv.call(null, function(d) {
        return function(p1__18671_SHARP_) {
          return qiss.core.index.call(null, p1__18671_SHARP_, i);
        };
      }(d), qiss.core.dict_val.call(null, d)));
      if (cljs.core.vector_QMARK_.call(null, i)) {
        return qiss.core.t_from_d.call(null, r);
      } else {
        return r;
      }
    } else {
      return cljs.core.mapv.call(null, cljs.core.partial.call(null, qiss$core$index_table, t), i);
    }
  }
};
qiss.core.index_keyed_table = function qiss$core$index_keyed_table(t, i) {
  if (cljs.core.truth_(function() {
    var or__14355__auto__ = qiss.core.dict_QMARK_.call(null, i);
    if (cljs.core.truth_(or__14355__auto__)) {
      return or__14355__auto__;
    } else {
      return qiss.core.table_QMARK_.call(null, i);
    }
  }())) {
    return qiss.core.index_table.call(null, qiss.core.dict_val.call(null, t), qiss.core.find_table.call(null, qiss.core.dict_key.call(null, t), i));
  } else {
    if (cljs.core.coll_QMARK_.call(null, i) && cljs.core._EQ_.call(null, cljs.core.count.call(null, i), cljs.core.count.call(null, qiss.core.keycols.call(null, t)))) {
      return qiss$core$index_keyed_table.call(null, t, qiss.core.make_dict.call(null, qiss.core.keycols.call(null, t), i));
    } else {
      if (!cljs.core.coll_QMARK_.call(null, i) && cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, qiss.core.keycols.call(null, t)))) {
        return qiss$core$index_keyed_table.call(null, t, qiss.core.make_dict.call(null, qiss.core.keycols.call(null, t), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [i], null)));
      } else {
        return qiss.core.err.call(null, "nyi: index keyed table", t, i);
      }
    }
  }
};
qiss.core.index = function qiss$core$index(x, i) {
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hole", "hole", -743450790), i)) {
    return x;
  } else {
    if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
      return qiss.core.index_table.call(null, x, i);
    } else {
      if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
        return qiss.core.index_keyed_table.call(null, x, i);
      } else {
        if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, i))) {
          return qiss.core.make_dict.call(null, qiss.core.dict_key.call(null, i), qiss$core$index.call(null, x, qiss.core.dict_val.call(null, i)));
        } else {
          if (cljs.core.vector_QMARK_.call(null, i)) {
            return cljs.core.mapv.call(null, cljs.core.partial.call(null, qiss$core$index, x), i);
          } else {
            if (cljs.core.coll_QMARK_.call(null, i)) {
              return cljs.core.reduce.call(null, qiss$core$index, x, i);
            } else {
              if (cljs.core.vector_QMARK_.call(null, x)) {
                return x.call(null, i);
              } else {
                return qiss.core.dict_val.call(null, x).call(null, qiss.core.index_of.call(null, qiss.core.dict_key.call(null, x), i));
              }
            }
          }
        }
      }
    }
  }
};
qiss.core.index_deep = function qiss$core$index_deep(x, i) {
  if (cljs.core.empty_QMARK_.call(null, i)) {
    return x;
  } else {
    var j = cljs.core.first.call(null, i);
    var p = qiss.core.index.call(null, x, j);
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hole", "hole", -743450790), j) || cljs.core.vector_QMARK_.call(null, j) && 1 < cljs.core.count.call(null, j)) {
      return cljs.core.mapv.call(null, function(j, p) {
        return function(p1__18672_SHARP_) {
          return qiss$core$index_deep.call(null, p1__18672_SHARP_, cljs.core.next.call(null, i));
        };
      }(j, p), p);
    } else {
      return qiss$core$index_deep.call(null, p, cljs.core.next.call(null, i));
    }
  }
};
qiss.core.invoke_partial = function qiss$core$invoke_partial(e, f, a) {
  var max_rank = cljs.core.apply.call(null, cljs.core.max, qiss.core.lambda_rank.call(null, f));
  var min_rank = cljs.core.apply.call(null, cljs.core.min, qiss.core.lambda_rank.call(null, f));
  var args = cljs.core.count.call(null, a) > max_rank ? qiss.core.err.call(null, "rank") : cljs.core.count.call(null, a) < min_rank ? cljs.core.concat.call(null, a, cljs.core.repeat.call(null, min_rank - cljs.core.count.call(null, a), new cljs.core.Keyword(null, "hole", "hole", -743450790))) : a;
  var formals = cljs.core.mapv.call(null, function(max_rank, min_rank, args) {
    return function(p1__18673_SHARP_) {
      return cljs.core.keyword.call(null, clojure.string.join.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a", [cljs.core.str(p1__18673_SHARP_)].join("")], null)));
    };
  }(max_rank, min_rank, args), qiss.core.til.call(null, cljs.core.count.call(null, cljs.core.filter.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "hole", "hole", -743450790), null], null), null), args))));
  var passing = function() {
    var x = args;
    var y = formals;
    var r = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, x)) {
        return r;
      } else {
        if (cljs.core.empty_QMARK_.call(null, y)) {
          return qiss.core.catv.call(null, r, x);
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hole", "hole", -743450790), cljs.core.first.call(null, x))) {
            var G__18674 = cljs.core.rest.call(null, x);
            var G__18675 = cljs.core.rest.call(null, y);
            var G__18676 = cljs.core.conj.call(null, r, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", -1388402092), cljs.core.name.call(null, cljs.core.first.call(null, y))], null));
            x = G__18674;
            y = G__18675;
            r = G__18676;
            continue;
          } else {
            var G__18677 = cljs.core.next.call(null, x);
            var G__18678 = y;
            var G__18679 = cljs.core.conj.call(null, r, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "raw", "raw", 1604651272), cljs.core.first.call(null, x)], null));
            x = G__18677;
            y = G__18678;
            r = G__18679;
            continue;
          }
        }
      }
      break;
    }
  }();
  var w = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "formals", "formals", 925536712), formals, new cljs.core.Keyword(null, "exprs", "exprs", 1795829094), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "call", "call", -519999866), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "target", "target", 253001721), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "raw", "raw", 1604651272), f], null)], null), qiss.core.push.call(null, new cljs.core.Keyword(null, "actuals", "actuals", 87663642), passing)], null)], null), new cljs.core.Keyword(null, "pass-global-env", "pass-global-env", -1301958750), true, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [cljs.core.count.call(null, formals)], null), new cljs.core.Keyword(null, "text", "text", -1790561697), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(f), new cljs.core.Keyword(null, "env", "env", -1815813235), e], null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.assoc.call(null, w, new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.feval.call(null, "\x3csynthesized partial\x3e", w))], null);
};
qiss.core.fill_vector_holes = function qiss$core$fill_vector_holes(v, a) {
  var x = v;
  var y = a;
  var r = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, x)) {
      return r;
    } else {
      if (cljs.core.empty_QMARK_.call(null, y)) {
        return qiss.core.catv.call(null, r, x);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "hole", "hole", -743450790), cljs.core.first.call(null, x))) {
          var G__18680 = cljs.core.rest.call(null, x);
          var G__18681 = cljs.core.rest.call(null, y);
          var G__18682 = cljs.core.conj.call(null, r, cljs.core.first.call(null, y));
          x = G__18680;
          y = G__18681;
          r = G__18682;
          continue;
        } else {
          var G__18683 = cljs.core.next.call(null, x);
          var G__18684 = y;
          var G__18685 = cljs.core.conj.call(null, r, cljs.core.first.call(null, x));
          x = G__18683;
          y = G__18684;
          r = G__18685;
          continue;
        }
      }
    }
    break;
  }
};
qiss.core.invoke = function qiss$core$invoke(e, f, a) {
  if (cljs.core.not.call(null, qiss.core.lambda_QMARK_.call(null, f))) {
    if (cljs.core.truth_(function() {
      var and__14343__auto__ = cljs.core.vector_QMARK_.call(null, f);
      if (and__14343__auto__) {
        return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "hole", "hole", -743450790), null], null), null), f);
      } else {
        return and__14343__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.fill_vector_holes.call(null, f, a)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.index_deep.call(null, f, a)], null);
    }
  } else {
    var p = qiss.core.lambda_callable.call(null, e, f);
    if (cljs.core.truth_(function() {
      var and__14343__auto__ = cljs.core.not.call(null, cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "hole", "hole", -743450790), null], null), null), a));
      if (and__14343__auto__) {
        return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([cljs.core.count.call(null, a)], true), qiss.core.lambda_rank.call(null, f));
      } else {
        return and__14343__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.apply.call(null, p, a)], null);
    } else {
      return qiss.core.invoke_partial.call(null, e, f, a);
    }
  }
};
qiss.core.is_callable = function qiss$core$is_callable(x) {
  return x instanceof clojure.lang.IFn;
};
qiss.core.can_only_be_monadic = function qiss$core$can_only_be_monadic(x) {
  return cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), qiss.core.lambda_rank.call(null, x));
};
qiss.core.can_be_monadic = function qiss$core$can_be_monadic(x) {
  return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [1, null], null), null), qiss.core.lambda_rank.call(null, x));
};
qiss.core.can_be_dyadic = function qiss$core$can_be_dyadic(x) {
  return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [2, null], null), null), qiss.core.lambda_rank.call(null, x));
};
qiss.core.resolve_adverbed = function qiss$core$resolve_adverbed(tu, e, x) {
  if (cljs.core.contains_QMARK_.call(null, x, new cljs.core.Keyword(null, "lhs", "lhs", 1172082094))) {
    if (cljs.core.contains_QMARK_.call(null, x, new cljs.core.Keyword(null, "rhs", "rhs", -229356739))) {
      var vec__18692 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
      var e2 = cljs.core.nth.call(null, vec__18692, 0, null);
      var r = cljs.core.nth.call(null, vec__18692, 1, null);
      var vec__18693 = qiss.core.kresolve.call(null, tu, e2, (new cljs.core.Keyword(null, "verb", "verb", -1492655803)).cljs$core$IFn$_invoke$arity$1(x));
      var e3 = cljs.core.nth.call(null, vec__18693, 0, null);
      var o = cljs.core.nth.call(null, vec__18693, 1, null);
      var vec__18694 = qiss.core.kresolve.call(null, tu, e3, (new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x));
      var e4 = cljs.core.nth.call(null, vec__18694, 0, null);
      var l = cljs.core.nth.call(null, vec__18694, 1, null);
      var m = qiss.core.adverbs.call(null, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "adverb", "adverb", 353843337)).cljs$core$IFn$_invoke$arity$1(x)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e4, m.call(null, o).call(null, e, l, r)], null);
    } else {
      return qiss.core.err.call(null, "nyi: bind lhs of adverbed expr (partial)");
    }
  } else {
    if (cljs.core.contains_QMARK_.call(null, x, new cljs.core.Keyword(null, "rhs", "rhs", -229356739))) {
      var vec__18695 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
      var e2 = cljs.core.nth.call(null, vec__18695, 0, null);
      var r = cljs.core.nth.call(null, vec__18695, 1, null);
      var vec__18696 = qiss.core.kresolve.call(null, tu, e2, (new cljs.core.Keyword(null, "verb", "verb", -1492655803)).cljs$core$IFn$_invoke$arity$1(x));
      var e3 = cljs.core.nth.call(null, vec__18696, 0, null);
      var o = cljs.core.nth.call(null, vec__18696, 1, null);
      var m = qiss.core.adverbs.call(null, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "adverb", "adverb", 353843337)).cljs$core$IFn$_invoke$arity$1(x)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e3, m.call(null, o).call(null, e, r)], null);
    } else {
      var vec__18697 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "verb", "verb", -1492655803)).cljs$core$IFn$_invoke$arity$1(x));
      var e2 = cljs.core.nth.call(null, vec__18697, 0, null);
      var o = cljs.core.nth.call(null, vec__18697, 1, null);
      var m = qiss.core.adverbs.call(null, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "adverb", "adverb", 353843337)).cljs$core$IFn$_invoke$arity$1(x)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, cljs.core.merge.call(null, o, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), m.call(null, o), new cljs.core.Keyword(null, "pass-global-env", "pass-global-env", -1301958750), true], null))], null);
    }
  }
};
qiss.core.resolve_assign = function qiss$core$resolve_assign(tu, e, x) {
  var vec__18699 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18699, 0, null);
  var r = cljs.core.nth.call(null, vec__18699, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge.call(null, e2, qiss.core.kdestructure.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r], null))), r], null);
};
qiss.core.resolve_at = function qiss$core$resolve_at(tu, e, x) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x))) {
    var vec__18702 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
    var e2 = cljs.core.nth.call(null, vec__18702, 0, null);
    var rhs = cljs.core.nth.call(null, vec__18702, 1, null);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x))) {
      var vec__18703 = qiss.core.kresolve.call(null, tu, e2, (new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x));
      var e3 = cljs.core.nth.call(null, vec__18703, 0, null);
      var lhs = cljs.core.nth.call(null, vec__18703, 1, null);
      return qiss.core.invoke.call(null, e3, lhs, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [rhs], null));
    } else {
      return qiss.core.at.call(null, e2, rhs);
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x))) {
      return qiss.core.err.call(null, "nyi: partially bound @ from lhs");
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.ops.call(null, new cljs.core.Keyword(null, "at", "at", 1476951349))], null);
    }
  }
};
qiss.core.resolve_dot = function qiss$core$resolve_dot(tu, e, x) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x))) {
    var vec__18706 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
    var e2 = cljs.core.nth.call(null, vec__18706, 0, null);
    var rhs = cljs.core.nth.call(null, vec__18706, 1, null);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x))) {
      var vec__18707 = qiss.core.kresolve.call(null, tu, e2, (new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x));
      var e3 = cljs.core.nth.call(null, vec__18707, 0, null);
      var lhs = cljs.core.nth.call(null, vec__18707, 1, null);
      return qiss.core.invoke.call(null, e3, lhs, rhs);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, qiss.core.dot.call(null, e2, rhs)], null);
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x))) {
      return qiss.core.err.call(null, "nyi: partially bound . from lhs");
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.ops.call(null, new cljs.core.Keyword(null, "dot", "dot", 1442709401))], null);
    }
  }
};
qiss.core.resolve_dotn = function qiss$core$resolve_dotn(tu, e, x) {
  var o = qiss.core.kresolve.call(null, tu, e, cljs.core.first.call(null, x));
  cljs.core.println.call(null, "hmm");
  if (cljs.core.truth_(qiss.core.null_BANG_.call(null, qiss.core.dict_QMARK_.call(null, x)))) {
    return qiss.core.err.call(null, "nyi: dot notation for dicts");
  } else {
    return function(o) {
      return function() {
        var G__18708__delegate = function(a) {
          return cljs.core.println.call(null, "hey");
        };
        var G__18708 = function(var_args) {
          var a = null;
          if (arguments.length > 0) {
            var G__18709__i = 0, G__18709__a = new Array(arguments.length - 0);
            while (G__18709__i < G__18709__a.length) {
              G__18709__a[G__18709__i] = arguments[G__18709__i + 0];
              ++G__18709__i;
            }
            a = new cljs.core.IndexedSeq(G__18709__a, 0);
          }
          return G__18708__delegate.call(this, a);
        };
        G__18708.cljs$lang$maxFixedArity = 0;
        G__18708.cljs$lang$applyTo = function(arglist__18710) {
          var a = cljs.core.seq(arglist__18710);
          return G__18708__delegate(a);
        };
        G__18708.cljs$core$IFn$_invoke$arity$variadic = G__18708__delegate;
        return G__18708;
      }();
    }(o);
  }
};
qiss.core.resolve_call = function qiss$core$resolve_call(tu, e, x) {
  var vec__18716 = cljs.core.reduce.call(null, function(p__18718, a) {
    var vec__18719 = p__18718;
    var e2 = cljs.core.nth.call(null, vec__18719, 0, null);
    var r = cljs.core.nth.call(null, vec__18719, 1, null);
    var vec__18720 = qiss.core.kresolve.call(null, tu, e2, a);
    var e3 = cljs.core.nth.call(null, vec__18720, 0, null);
    var rr = cljs.core.nth.call(null, vec__18720, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e3, cljs.core.cons.call(null, rr, r)], null);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.PersistentVector.EMPTY], null), cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "actuals", "actuals", 87663642)).cljs$core$IFn$_invoke$arity$1(x)));
  var e4 = cljs.core.nth.call(null, vec__18716, 0, null);
  var r = cljs.core.nth.call(null, vec__18716, 1, null);
  var vec__18717 = qiss.core.kresolve.call(null, tu, e4, (new cljs.core.Keyword(null, "target", "target", 253001721)).cljs$core$IFn$_invoke$arity$1(x));
  var e5 = cljs.core.nth.call(null, vec__18717, 0, null);
  var f = cljs.core.nth.call(null, vec__18717, 1, null);
  return qiss.core.invoke.call(null, e4, f, r);
};
qiss.core.resolve_dyop = function qiss$core$resolve_dyop(tu, e, x) {
  var o = qiss.core.ops.call(null, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(x)));
  var vec__18723 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18723, 0, null);
  var rhs = cljs.core.nth.call(null, vec__18723, 1, null);
  var vec__18724 = qiss.core.kresolve.call(null, tu, e2, (new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x));
  var e3 = cljs.core.nth.call(null, vec__18724, 0, null);
  var lhs = cljs.core.nth.call(null, vec__18724, 1, null);
  return qiss.core.invoke.call(null, e3, o, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lhs, rhs], null));
};
qiss.core.force_dyadic = function qiss$core$force_dyadic(x) {
  return cljs.core.assoc.call(null, x, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null));
};
qiss.core.resolve_juxt = function qiss$core$resolve_juxt(tu, e, x) {
  var vec__18727 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18727, 0, null);
  var rhs = cljs.core.nth.call(null, vec__18727, 1, null);
  var vec__18728 = qiss.core.kresolve.call(null, tu, e2, (new cljs.core.Keyword(null, "lhs", "lhs", 1172082094)).cljs$core$IFn$_invoke$arity$1(x));
  var e3 = cljs.core.nth.call(null, vec__18728, 0, null);
  var lhs = cljs.core.nth.call(null, vec__18728, 1, null);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "second", "second", -444702010)).cljs$core$IFn$_invoke$arity$1(rhs))) {
    return qiss.core.invoke.call(null, e3, rhs, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lhs, (new cljs.core.Keyword(null, "second", "second", -444702010)).cljs$core$IFn$_invoke$arity$1(rhs)], null));
  } else {
    if (cljs.core.truth_(qiss.core.can_be_dyadic.call(null, rhs))) {
      return qiss.core.invoke.call(null, e3, qiss.core.force_dyadic.call(null, rhs), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [lhs], null));
    } else {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "second", "second", -444702010)).cljs$core$IFn$_invoke$arity$1(lhs))) {
        return qiss.core.invoke.call(null, e3, lhs, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "second", "second", -444702010)).cljs$core$IFn$_invoke$arity$1(lhs), rhs], null));
      } else {
        if (cljs.core.truth_(qiss.core.can_be_dyadic.call(null, lhs))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e3, cljs.core.merge.call(null, lhs, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "second", "second", -444702010), rhs], null))], null);
        } else {
          return qiss.core.invoke.call(null, e3, lhs, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [rhs], null));
        }
      }
    }
  }
};
qiss.core.resolve_lambda = function qiss$core$resolve_lambda(tu, t, e, x) {
  var a = qiss.core.args.call(null, x);
  var w = cljs.core.merge.call(null, x, a, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "env", "env", -1815813235), e, new cljs.core.Keyword(null, "pass-global-env", "pass-global-env", -1301958750), true, new cljs.core.Keyword(null, "text", "text", -1790561697), t], null));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.assoc.call(null, w, new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.feval.call(null, tu, w))], null);
};
qiss.core.resolve_vec = function qiss$core$resolve_vec(tu, e, x) {
  var vec__18733 = cljs.core.reduce.call(null, function(p__18734, i) {
    var vec__18735 = p__18734;
    var e__$1 = cljs.core.nth.call(null, vec__18735, 0, null);
    var r = cljs.core.nth.call(null, vec__18735, 1, null);
    var vec__18736 = qiss.core.kresolve.call(null, tu, e__$1, i);
    var ne = cljs.core.nth.call(null, vec__18736, 0, null);
    var nr = cljs.core.nth.call(null, vec__18736, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ne, cljs.core.cons.call(null, nr, r)], null);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.List.EMPTY], null), cljs.core.reverse.call(null, x));
  var e2 = cljs.core.nth.call(null, vec__18733, 0, null);
  var r = cljs.core.nth.call(null, vec__18733, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, cljs.core.vec.call(null, r)], null);
};
qiss.core.resolve_monop = function qiss$core$resolve_monop(tu, e, x) {
  var o = qiss.core.ops.call(null, cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(x)));
  var vec__18738 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "rhs", "rhs", -229356739)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18738, 0, null);
  var a = cljs.core.nth.call(null, vec__18738, 1, null);
  return qiss.core.invoke.call(null, e2, o, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [a], null));
};
qiss.core.sub_table = function qiss$core$sub_table(t, i) {
  if (cljs.core.truth_(i)) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", -1388402092), function(x) {
      if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([cljs.core.keyword.call(null, x)], true), qiss.core.cols.call(null, t)))) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "at", "at", 1476951349), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lhs", "lhs", 1172082094), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", -1388402092), x], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
        [new cljs.core.Keyword(null, "rhs", "rhs", -229356739), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "raw", "raw", 1604651272), i], null)], null)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "id", "id", -1388402092), x], null);
      }
    }], null);
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
qiss.core.apply_constraints = function qiss$core$apply_constraints(tu, env, t, w) {
  if (cljs.core.not.call(null, w)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [env, qiss.core.til_count.call(null, t)], null);
  } else {
    return cljs.core.reduce.call(null, function(p__18742, c) {
      var vec__18743 = p__18742;
      var e = cljs.core.nth.call(null, vec__18743, 0, null);
      var i = cljs.core.nth.call(null, vec__18743, 1, null);
      var vec__18744 = cljs.core.apply.call(null, qiss.core.where, qiss.core.kresolve.call(null, tu, e, instaparse.core.transform.call(null, qiss.core.sub_table.call(null, t, i), cljs.core.first.call(null, c))));
      var e2 = cljs.core.nth.call(null, vec__18744, 0, null);
      var j = cljs.core.nth.call(null, vec__18744, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, qiss.core.index.call(null, i, j)], null);
    }, cljs.core.apply.call(null, qiss.core.where, qiss.core.kresolve.call(null, tu, env, cljs.core.first.call(null, w))), cljs.core.next.call(null, w));
  }
};
qiss.core.guess_col = function qiss$core$guess_col(x) {
  if (cljs.core.empty_QMARK_.call(null, x)) {
    return new cljs.core.Keyword(null, "x", "x", 2099068185);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "id", "id", -1388402092), cljs.core.first.call(null, x))) {
      return cljs.core.keyword.call(null, cljs.core.second.call(null, x));
    } else {
      return cljs.core.last.call(null, cljs.core.map.call(null, qiss$core$guess_col, cljs.core.next.call(null, x)));
    }
  }
};
qiss.core.compute_aggs = function qiss$core$compute_aggs(tu, e, t, i, aggs) {
  return cljs.core.reduce.call(null, function(p__18748, a) {
    var vec__18749 = p__18748;
    var e__$1 = cljs.core.nth.call(null, vec__18749, 0, null);
    var r = cljs.core.nth.call(null, vec__18749, 1, null);
    var n = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "assign", "assign", -1590426222), cljs.core.first.call(null, a)) ? cljs.core.keyword.call(null, cljs.core.second.call(null, cljs.core.second.call(null, a))) : qiss.core.guess_col.call(null, a);
    var vec__18750 = qiss.core.kresolve.call(null, tu, e__$1, instaparse.core.transform.call(null, qiss.core.sub_table.call(null, t, i), a));
    var e2 = cljs.core.nth.call(null, vec__18750, 0, null);
    var d = cljs.core.nth.call(null, vec__18750, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, qiss.core.add_to_dict.call(null, r, n, d)], null);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.make_dict.call(null)], null), aggs);
};
qiss.core.resolve_delcols = function qiss$core$resolve_delcols(tu, e, x) {
  var vec__18753 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "from", "from", 1815293044)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18753, 0, null);
  var t = cljs.core.nth.call(null, vec__18753, 1, null);
  var t2 = qiss.core.t_from_d.call(null, cljs.core.reduce.call(null, qiss.core.remove_from_dict, qiss.core.d_from_t.call(null, qiss.core.unkey_table.call(null, t)), cljs.core.map.call(null, function(vec__18753, e2, t) {
    return function(p1__18751_SHARP_) {
      return cljs.core.keyword.call(null, cljs.core.second.call(null, p1__18751_SHARP_));
    };
  }(vec__18753, e2, t), (new cljs.core.Keyword(null, "dcols", "dcols", -1379483184)).cljs$core$IFn$_invoke$arity$1(x))));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.truth_(function() {
    var and__14343__auto__ = qiss.core.keyed_table_QMARK_.call(null, t);
    if (cljs.core.truth_(and__14343__auto__)) {
      return qiss.core.all_QMARK_.call(null, qiss.core.in$.call(null, qiss.core.keycols.call(null, t), qiss.core.cols.call(null, t2)));
    } else {
      return and__14343__auto__;
    }
  }()) ? qiss.core.key_table_by_colnames.call(null, qiss.core.keycols.call(null, t), t2) : t2], null);
};
qiss.core.resolve_delrows = function qiss$core$resolve_delrows(tu, e, x) {
  var vec__18756 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "from", "from", 1815293044)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18756, 0, null);
  var t = cljs.core.nth.call(null, vec__18756, 1, null);
  var ut = qiss.core.unkey_table.call(null, t);
  var e3 = cljs.core.merge.call(null, e2, cljs.core.zipmap.call(null, qiss.core.dict_key.call(null, ut), qiss.core.dict_val.call(null, ut)));
  var vec__18757 = qiss.core.apply_constraints.call(null, tu, e3, ut, (new cljs.core.Keyword(null, "where", "where", -2044795965)).cljs$core$IFn$_invoke$arity$1(x));
  var e4 = cljs.core.nth.call(null, vec__18757, 0, null);
  var i = cljs.core.nth.call(null, vec__18757, 1, null);
  var u = qiss.core.index_table.call(null, ut, qiss.core.except.call(null, qiss.core.til_count.call(null, ut), i));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.not.call(null, qiss.core.keyed_table_QMARK_.call(null, t)) ? u : qiss.core.key_table_by_colnames.call(null, qiss.core.keycols.call(null, t), u)], null);
};
qiss.core.resolve_select = function qiss$core$resolve_select(tu, e, x) {
  var vec__18765 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "from", "from", 1815293044)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18765, 0, null);
  var t = cljs.core.nth.call(null, vec__18765, 1, null);
  var ut = qiss.core.unkey_table.call(null, t);
  var e3 = cljs.core.merge.call(null, e2, cljs.core.zipmap.call(null, qiss.core.dict_key.call(null, ut), qiss.core.dict_val.call(null, ut)));
  var vec__18766 = qiss.core.apply_constraints.call(null, tu, e3, ut, (new cljs.core.Keyword(null, "where", "where", -2044795965)).cljs$core$IFn$_invoke$arity$1(x));
  var e4 = cljs.core.nth.call(null, vec__18766, 0, null);
  var i = cljs.core.nth.call(null, vec__18766, 1, null);
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "by", "by", 30600856)).cljs$core$IFn$_invoke$arity$1(x);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var b = temp__4423__auto__;
    var vec__18767 = qiss.core.compute_aggs.call(null, tu, e4, ut, i, b);
    var e5 = cljs.core.nth.call(null, vec__18767, 0, null);
    var g = cljs.core.nth.call(null, vec__18767, 1, null);
    var j = qiss.core.index.call(null, i, qiss.core.group.call(null, qiss.core.flip.call(null, qiss.core.dict_val.call(null, g))));
    var k = qiss.core.make_table.call(null, qiss.core.dict_key.call(null, g), qiss.core.flip.call(null, qiss.core.dict_key.call(null, j)));
    var temp__4423__auto____$1 = (new cljs.core.Keyword(null, "aggs", "aggs", -442886220)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var a = temp__4423__auto____$1;
      var u = cljs.core.mapv.call(null, function(a, temp__4423__auto____$1, vec__18767, e5, g, j, k, b, temp__4423__auto__, vec__18765, e2, t, ut, e3, vec__18766, e4, i) {
        return function(p1__18758_SHARP_) {
          return cljs.core.last.call(null, qiss.core.compute_aggs.call(null, tu, e5, ut, p1__18758_SHARP_, a));
        };
      }(a, temp__4423__auto____$1, vec__18767, e5, g, j, k, b, temp__4423__auto__, vec__18765, e2, t, ut, e3, vec__18766, e4, i), qiss.core.dict_val.call(null, j));
      var v = qiss.core.make_table.call(null, qiss.core.dict_key.call(null, cljs.core.first.call(null, u)), qiss.core.flip.call(null, cljs.core.mapv.call(null, qiss.core.dict_val, u)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.make_keyed_table.call(null, k, v)], null);
    } else {
      var c = qiss.core.except.call(null, qiss.core.cols.call(null, t), qiss.core.dict_key.call(null, g));
      var v = qiss.core.make_table.call(null, c, cljs.core.mapv.call(null, function(c, temp__4423__auto____$1, vec__18767, e5, g, j, k, b, temp__4423__auto__, vec__18765, e2, t, ut, e3, vec__18766, e4, i) {
        return function(p1__18759_SHARP_) {
          return qiss.core.index.call(null, p1__18759_SHARP_, qiss.core.dict_val.call(null, j));
        };
      }(c, temp__4423__auto____$1, vec__18767, e5, g, j, k, b, temp__4423__auto__, vec__18765, e2, t, ut, e3, vec__18766, e4, i), qiss.core.index.call(null, ut, c)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.make_keyed_table.call(null, k, v)], null);
    }
  } else {
    var temp__4423__auto____$1 = (new cljs.core.Keyword(null, "aggs", "aggs", -442886220)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var a = temp__4423__auto____$1;
      var vec__18768 = qiss.core.compute_aggs.call(null, tu, e4, ut, i, a);
      var e6 = cljs.core.nth.call(null, vec__18768, 0, null);
      var r = cljs.core.nth.call(null, vec__18768, 1, null);
      var n = cljs.core.apply.call(null, cljs.core.max, cljs.core.mapv.call(null, qiss.core.kcount, qiss.core.dict_val.call(null, r)));
      var v = cljs.core.mapv.call(null, function(vec__18768, e6, r, n, a, temp__4423__auto____$1, temp__4423__auto__, vec__18765, e2, t, ut, e3, vec__18766, e4, i) {
        return function(p1__18760_SHARP_) {
          if (cljs.core._EQ_.call(null, 1, qiss.core.kcount.call(null, p1__18760_SHARP_))) {
            return qiss.core.ktake.call(null, n, p1__18760_SHARP_);
          } else {
            return p1__18760_SHARP_;
          }
        };
      }(vec__18768, e6, r, n, a, temp__4423__auto____$1, temp__4423__auto__, vec__18765, e2, t, ut, e3, vec__18766, e4, i), qiss.core.dict_val.call(null, r));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.make_table.call(null, qiss.core.dict_key.call(null, r), v)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, t)) ? qiss.core.key_table_by_colnames.call(null, qiss.core.keycols.call(null, t), qiss.core.index.call(null, ut, i)) : qiss.core.index.call(null, t, i)], null);
    }
  }
};
qiss.core.resolve_table_helper = function qiss$core$resolve_table_helper(tu, e, b) {
  var c = cljs.core.map.call(null, cljs.core.comp.call(null, qiss.core.map_from_tuples, cljs.core.next), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "col", "col", -1959363084), cljs.core.first.call(null, b)) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [b], null) : b);
  var vec__18774 = cljs.core.reduce.call(null, function(c) {
    return function(p__18775, a) {
      var vec__18776 = p__18775;
      var e__$1 = cljs.core.nth.call(null, vec__18776, 0, null);
      var r = cljs.core.nth.call(null, vec__18776, 1, null);
      var vec__18777 = qiss.core.kresolve.call(null, tu, e__$1, a);
      var ne = cljs.core.nth.call(null, vec__18777, 0, null);
      var rr = cljs.core.nth.call(null, vec__18777, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ne, cljs.core.cons.call(null, rr, r)], null);
    };
  }(c), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.List.EMPTY], null), cljs.core.reverse.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "rhs", "rhs", -229356739), c)));
  var e__$1 = cljs.core.nth.call(null, vec__18774, 0, null);
  var r = cljs.core.nth.call(null, vec__18774, 1, null);
  if (cljs.core.truth_(cljs.core.apply.call(null, cljs.core._EQ_, cljs.core.map.call(null, cljs.core.count, r)))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1, qiss.core.make_table.call(null, cljs.core.mapv.call(null, function(c, vec__18774, e__$1, r) {
      return function(p1__18769_SHARP_) {
        return cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "id", "id", -1388402092)).cljs$core$IFn$_invoke$arity$1(p1__18769_SHARP_));
      };
    }(c, vec__18774, e__$1, r), c), cljs.core.vec.call(null, r))], null);
  } else {
    return qiss.core.err.call(null, "length");
  }
};
qiss.core.resolve_table = function qiss$core$resolve_table(tu, e, x) {
  var vec__18780 = qiss.core.resolve_table_helper.call(null, tu, e, (new cljs.core.Keyword(null, "cols", "cols", -1914801295)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18780, 0, null);
  var t = cljs.core.nth.call(null, vec__18780, 1, null);
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "keycols", "keycols", -951875353)).cljs$core$IFn$_invoke$arity$1(x);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var kc = temp__4423__auto__;
    var vec__18781 = qiss.core.resolve_table_helper.call(null, tu, e2, kc);
    var e3 = cljs.core.nth.call(null, vec__18781, 0, null);
    var k = cljs.core.nth.call(null, vec__18781, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e3, qiss.core.make_keyed_table.call(null, k, t)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, t], null);
  }
};
qiss.core.resolve_update = function qiss$core$resolve_update(tu, e, x) {
  var vec__18789 = qiss.core.kresolve.call(null, tu, e, (new cljs.core.Keyword(null, "from", "from", 1815293044)).cljs$core$IFn$_invoke$arity$1(x));
  var e2 = cljs.core.nth.call(null, vec__18789, 0, null);
  var t = cljs.core.nth.call(null, vec__18789, 1, null);
  var ut = qiss.core.unkey_table.call(null, t);
  var vec__18790 = qiss.core.apply_constraints.call(null, tu, cljs.core.merge.call(null, e2, cljs.core.zipmap.call(null, qiss.core.dict_key.call(null, ut), qiss.core.dict_val.call(null, ut))), ut, (new cljs.core.Keyword(null, "where", "where", -2044795965)).cljs$core$IFn$_invoke$arity$1(x));
  var e3 = cljs.core.nth.call(null, vec__18790, 0, null);
  var i = cljs.core.nth.call(null, vec__18790, 1, null);
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "by", "by", 30600856)).cljs$core$IFn$_invoke$arity$1(x);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var b = temp__4423__auto__;
    var vec__18791 = qiss.core.compute_aggs.call(null, tu, e3, ut, i, b);
    var e4 = cljs.core.nth.call(null, vec__18791, 0, null);
    var g = cljs.core.nth.call(null, vec__18791, 1, null);
    var j = qiss.core.index.call(null, i, qiss.core.group.call(null, qiss.core.flip.call(null, qiss.core.dict_val.call(null, g))));
    var k = qiss.core.make_table.call(null, qiss.core.dict_key.call(null, g), qiss.core.flip.call(null, qiss.core.dict_key.call(null, j)));
    var temp__4423__auto____$1 = (new cljs.core.Keyword(null, "aggs", "aggs", -442886220)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var a = temp__4423__auto____$1;
      var u = cljs.core.mapv.call(null, function(a, temp__4423__auto____$1, vec__18791, e4, g, j, k, b, temp__4423__auto__, vec__18789, e2, t, ut, vec__18790, e3, i) {
        return function(p1__18782_SHARP_) {
          return cljs.core.last.call(null, qiss.core.compute_aggs.call(null, tu, e4, ut, p1__18782_SHARP_, a));
        };
      }(a, temp__4423__auto____$1, vec__18791, e4, g, j, k, b, temp__4423__auto__, vec__18789, e2, t, ut, vec__18790, e3, i), qiss.core.dict_val.call(null, j));
      var v = qiss.core.make_table.call(null, qiss.core.dict_key.call(null, cljs.core.first.call(null, u)), qiss.core.flip.call(null, cljs.core.mapv.call(null, qiss.core.dict_val, u)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e4, qiss.core.make_keyed_table.call(null, k, v)], null);
    } else {
      var c = qiss.core.except.call(null, qiss.core.cols.call(null, t), qiss.core.dict_key.call(null, g));
      var v = qiss.core.make_table.call(null, c, cljs.core.mapv.call(null, function(c, temp__4423__auto____$1, vec__18791, e4, g, j, k, b, temp__4423__auto__, vec__18789, e2, t, ut, vec__18790, e3, i) {
        return function(p1__18783_SHARP_) {
          return qiss.core.index.call(null, p1__18783_SHARP_, qiss.core.dict_val.call(null, j));
        };
      }(c, temp__4423__auto____$1, vec__18791, e4, g, j, k, b, temp__4423__auto__, vec__18789, e2, t, ut, vec__18790, e3, i), qiss.core.index.call(null, ut, c)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e4, qiss.core.make_keyed_table.call(null, k, v)], null);
    }
  } else {
    var temp__4423__auto____$1 = (new cljs.core.Keyword(null, "aggs", "aggs", -442886220)).cljs$core$IFn$_invoke$arity$1(x);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var a = temp__4423__auto____$1;
      var vec__18792 = qiss.core.compute_aggs.call(null, tu, e3, ut, i, a);
      var e5 = cljs.core.nth.call(null, vec__18792, 0, null);
      var r = cljs.core.nth.call(null, vec__18792, 1, null);
      var n = cljs.core.apply.call(null, cljs.core.max, cljs.core.mapv.call(null, qiss.core.kcount, qiss.core.dict_val.call(null, r)));
      var v = cljs.core.mapv.call(null, function(vec__18792, e5, r, n, a, temp__4423__auto____$1, temp__4423__auto__, vec__18789, e2, t, ut, vec__18790, e3, i) {
        return function(p1__18784_SHARP_) {
          if (cljs.core._EQ_.call(null, 1, qiss.core.kcount.call(null, p1__18784_SHARP_))) {
            return qiss.core.ktake.call(null, n, p1__18784_SHARP_);
          } else {
            return p1__18784_SHARP_;
          }
        };
      }(vec__18792, e5, r, n, a, temp__4423__auto____$1, temp__4423__auto__, vec__18789, e2, t, ut, vec__18790, e3, i), qiss.core.dict_val.call(null, r));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e5, qiss.core.make_table.call(null, qiss.core.dict_key.call(null, r), v)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e3, t], null);
    }
  }
};
qiss.core.kresolve = function qiss$core$kresolve(tu, e, x) {
  var t = cljs.core.coll_QMARK_.call(null, x) ? cljs.core.first.call(null, x) : x;
  var v = cljs.core.coll_QMARK_.call(null, x) ? cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "vec", "vec", -657847931), t) ? cljs.core.next.call(null, x) : cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), t) ? cljs.core.second.call(null, x) : cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "parexpr", "parexpr", -1683570946), t) ? cljs.core.second.call(null, x) : cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1604651272), t) ? cljs.core.second.call(null, 
  x) : cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "dotn", "dotn", -1422820659), t) ? cljs.core.next.call(null, x) : cljs.core.vector_QMARK_.call(null, cljs.core.second.call(null, x)) ? qiss.core.map_from_tuples.call(null, cljs.core.next.call(null, x)) : cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x)) ? cljs.core.second.call(null, x) : cljs.core.next.call(null, x) : null;
  if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "adverbed", "adverbed", -309374022))) {
    return qiss.core.resolve_adverbed.call(null, tu, e, v);
  } else {
    if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "arg", "arg", -1747261837))) {
      return qiss$core$kresolve.call(null, tu, e, v);
    } else {
      if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "assign", "assign", -1590426222))) {
        return qiss.core.resolve_assign.call(null, tu, e, v);
      } else {
        if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "at", "at", 1476951349))) {
          return qiss.core.resolve_at.call(null, tu, e, v);
        } else {
          if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "bool", "bool", 1444635321))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core._EQ_.call(null, "1", v)], null);
          } else {
            if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "bools", "bools", 1248415956))) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.mapv.call(null, function(t, v) {
                return function(p1__18793_SHARP_) {
                  return cljs.core._EQ_.call(null, "1", p1__18793_SHARP_);
                };
              }(t, v), v)], null);
            } else {
              if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "call", "call", -519999866))) {
                return qiss.core.resolve_call.call(null, tu, e, v);
              } else {
                if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "char", "char", -641587586))) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.char$.call(null, cljs.core.first.call(null, v))], null);
                } else {
                  if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "chars", "chars", -1094630317))) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.vec.call(null, v)], null);
                  } else {
                    if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "delcols", "delcols", -160838953))) {
                      return qiss.core.resolve_delcols.call(null, tu, e, v);
                    } else {
                      if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "delrows", "delrows", -2067786160))) {
                        return qiss.core.resolve_delrows.call(null, tu, e, v);
                      } else {
                        if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "dot", "dot", 1442709401))) {
                          return qiss.core.resolve_dot.call(null, tu, e, v);
                        } else {
                          if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "dotn", "dotn", -1422820659))) {
                            return qiss.core.resolve_dotn.call(null, tu, e, v);
                          } else {
                            if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "dyop", "dyop", 827870066))) {
                              return qiss.core.resolve_dyop.call(null, tu, e, v);
                            } else {
                              if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "empty", "empty", 767870958))) {
                                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.PersistentVector.EMPTY], null);
                              } else {
                                if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "expr", "expr", 745722291))) {
                                  return qiss.core.resolve_full_expr.call(null, tu, e, v);
                                } else {
                                  if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "float", "float", -1732389368))) {
                                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.parse_double.call(null, v)], null);
                                  } else {
                                    if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "floats", "floats", -1126940417))) {
                                      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.parse_double.call(null, clojure.string.split.call(null, v, /[ \n\r\t]+/))], null);
                                    } else {
                                      if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "hole", "hole", -743450790))) {
                                        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, new cljs.core.Keyword(null, "hole", "hole", -743450790)], null);
                                      } else {
                                        if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "id", "id", -1388402092))) {
                                          var temp__4423__auto__ = cljs.core.keyword.call(null, v).call(null, e);
                                          if (cljs.core.truth_(temp__4423__auto__)) {
                                            var u = temp__4423__auto__;
                                            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, u], null);
                                          } else {
                                            return qiss.core.err.call(null, v, "not found in scope");
                                          }
                                        } else {
                                          if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "juxt", "juxt", -969445923))) {
                                            return qiss.core.resolve_juxt.call(null, tu, e, v);
                                          } else {
                                            if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "lambda", "lambda", -1483427225))) {
                                              return qiss.core.resolve_lambda.call(null, tu, cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.subs, tu), instaparse.viz.span.call(null, x)), e, v);
                                            } else {
                                              if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "long", "long", -171452093))) {
                                                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.parse_long.call(null, v)], null);
                                              } else {
                                                if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "longs", "longs", 1636739749))) {
                                                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.parse_long.call(null, clojure.string.split.call(null, v, /[ \n\r\t]+/))], null);
                                                } else {
                                                  if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "monop", "monop", -1867059169))) {
                                                    return qiss.core.resolve_monop.call(null, tu, e, v);
                                                  } else {
                                                    if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "op", "op", -1882987955))) {
                                                      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, qiss.core.ops.call(null, cljs.core.keyword.call(null, v))], null);
                                                    } else {
                                                      if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "parexpr", "parexpr", -1683570946))) {
                                                        return qiss.core.resolve_full_expr.call(null, tu, e, v);
                                                      } else {
                                                        if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "raw", "raw", 1604651272))) {
                                                          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, v], null);
                                                        } else {
                                                          if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "select", "select", 1147833503))) {
                                                            return qiss.core.resolve_select.call(null, tu, e, v);
                                                          } else {
                                                            if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "symbol", "symbol", -1038572696))) {
                                                              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.keyword.call(null, v)], null);
                                                            } else {
                                                              if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "symbols", "symbols", 1211743))) {
                                                                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, cljs.core.mapv.call(null, cljs.core.keyword, cljs.core.next.call(null, clojure.string.split.call(null, v, /`/)))], null);
                                                              } else {
                                                                if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "table", "table", -564943036))) {
                                                                  return qiss.core.resolve_table.call(null, tu, e, v);
                                                                } else {
                                                                  if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "update", "update", 1045576396))) {
                                                                    return qiss.core.resolve_update.call(null, tu, e, v);
                                                                  } else {
                                                                    if (cljs.core._EQ_.call(null, t, new cljs.core.Keyword(null, "vec", "vec", -657847931))) {
                                                                      return qiss.core.resolve_vec.call(null, tu, e, v);
                                                                    } else {
                                                                      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, x], null);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
qiss.core.resolve_full_expr = function qiss$core$resolve_full_expr(tu, e, x) {
  var vec__18795 = qiss.core.kresolve.call(null, tu, e, x);
  var e2 = cljs.core.nth.call(null, vec__18795, 0, null);
  var r = cljs.core.nth.call(null, vec__18795, 1, null);
  if (cljs.core.truth_(function() {
    var and__14343__auto__ = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "juxt", "juxt", -969445923), cljs.core.first.call(null, x));
    if (and__14343__auto__) {
      var and__14343__auto____$1 = (new cljs.core.Keyword(null, "second", "second", -444702010)).cljs$core$IFn$_invoke$arity$1(r);
      if (cljs.core.truth_(and__14343__auto____$1)) {
        return qiss.core.can_be_monadic.call(null, r);
      } else {
        return and__14343__auto____$1;
      }
    } else {
      return and__14343__auto__;
    }
  }())) {
    return qiss.core.invoke.call(null, e2, r, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "second", "second", -444702010)).cljs$core$IFn$_invoke$arity$1(r)], null));
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e2, r], null);
  }
};
qiss.core.viewport = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "rows", "rows", 850049680), 25, new cljs.core.Keyword(null, "cols", "cols", -1914801295), 80], null);
qiss.core.substr = function qiss$core$substr(s, b, e) {
  return cljs.core.subs.call(null, s, b, function() {
    var x__14674__auto__ = e;
    var y__14675__auto__ = cljs.core.count.call(null, s);
    return x__14674__auto__ < y__14675__auto__ ? x__14674__auto__ : y__14675__auto__;
  }());
};
qiss.core.stringify_dict = function qiss$core$stringify_dict(x) {
  var ks = cljs.core.mapv.call(null, qiss.core.stringify, qiss.core.dict_key.call(null, x));
  var kw = cljs.core.apply.call(null, cljs.core.max, cljs.core.map.call(null, cljs.core.count, ks));
  var f = [cljs.core.str("%"), cljs.core.str(kw), cljs.core.str("s| %s")].join("");
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, function(ks, kw, f) {
    return function(p1__18798_SHARP_, p2__18799_SHARP_) {
      return goog.string.format(f, p1__18798_SHARP_, p2__18799_SHARP_);
    };
  }(ks, kw, f), ks, cljs.core.mapv.call(null, qiss.core.stringify, qiss.core.dict_val.call(null, x))));
};
qiss.core.table_as_strings = function qiss$core$table_as_strings(x) {
  var h = cljs.core.mapv.call(null, cljs.core.name, qiss.core.cols.call(null, x));
  var n = function() {
    var x__14674__auto__ = (new cljs.core.Keyword(null, "rows", "rows", 850049680)).cljs$core$IFn$_invoke$arity$1(qiss.core.viewport);
    var y__14675__auto__ = cljs.core.count.call(null, cljs.core.first.call(null, qiss.core.dict_val.call(null, x)));
    return x__14674__auto__ < y__14675__auto__ ? x__14674__auto__ : y__14675__auto__;
  }();
  var c = cljs.core.mapv.call(null, function(h, n) {
    return function(p1__18800_SHARP_) {
      return cljs.core.vec.call(null, cljs.core.take.call(null, n, p1__18800_SHARP_));
    };
  }(h, n), qiss.core.dict_val.call(null, x));
  var s = cljs.core.mapv.call(null, function(h, n, c) {
    return function(p1__18801_SHARP_) {
      return cljs.core.mapv.call(null, qiss.core.stringify, p1__18801_SHARP_);
    };
  }(h, n, c), c);
  var w = cljs.core.mapv.call(null, function(h, n, c, s) {
    return function(p1__18802_SHARP_, p2__18803_SHARP_) {
      return cljs.core.apply.call(null, cljs.core.max, cljs.core.cons.call(null, cljs.core.count.call(null, p1__18802_SHARP_), cljs.core.map.call(null, cljs.core.count, p2__18803_SHARP_)));
    };
  }(h, n, c, s), h, s);
  var f = cljs.core.mapv.call(null, function(h, n, c, s, w) {
    return function(p1__18804_SHARP_) {
      return [cljs.core.str("%-"), cljs.core.str(p1__18804_SHARP_), cljs.core.str("s")].join("");
    };
  }(h, n, c, s, w), w);
  var fmt_row = function(h, n, c, s, w, f) {
    return function() {
      var G__18805__delegate = function(r) {
        return clojure.string.join.call(null, " ", cljs.core.map.call(null, goog.string.format, f, r));
      };
      var G__18805 = function(var_args) {
        var r = null;
        if (arguments.length > 0) {
          var G__18806__i = 0, G__18806__a = new Array(arguments.length - 0);
          while (G__18806__i < G__18806__a.length) {
            G__18806__a[G__18806__i] = arguments[G__18806__i + 0];
            ++G__18806__i;
          }
          r = new cljs.core.IndexedSeq(G__18806__a, 0);
        }
        return G__18805__delegate.call(this, r);
      };
      G__18805.cljs$lang$maxFixedArity = 0;
      G__18805.cljs$lang$applyTo = function(arglist__18807) {
        var r = cljs.core.seq(arglist__18807);
        return G__18805__delegate(r);
      };
      G__18805.cljs$core$IFn$_invoke$arity$variadic = G__18805__delegate;
      return G__18805;
    }();
  }(h, n, c, s, w, f);
  return cljs.core.vec.call(null, cljs.core.cons.call(null, cljs.core.apply.call(null, fmt_row, h), cljs.core.cons.call(null, clojure.string.join.call(null, cljs.core.replicate.call(null, -1 + cljs.core.count.call(null, w) + cljs.core.reduce.call(null, cljs.core._PLUS_, w), "-")), cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.map, fmt_row), s))));
};
qiss.core.stringify_keyed_table = function qiss$core$stringify_keyed_table(x) {
  var k = qiss.core.table_as_strings.call(null, qiss.core.dict_key.call(null, x));
  var v = qiss.core.table_as_strings.call(null, qiss.core.dict_val.call(null, x));
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, function(k, v) {
    return function() {
      var G__18808__delegate = function(r) {
        return clojure.string.join.call(null, "| ", r);
      };
      var G__18808 = function(var_args) {
        var r = null;
        if (arguments.length > 0) {
          var G__18809__i = 0, G__18809__a = new Array(arguments.length - 0);
          while (G__18809__i < G__18809__a.length) {
            G__18809__a[G__18809__i] = arguments[G__18809__i + 0];
            ++G__18809__i;
          }
          r = new cljs.core.IndexedSeq(G__18809__a, 0);
        }
        return G__18808__delegate.call(this, r);
      };
      G__18808.cljs$lang$maxFixedArity = 0;
      G__18808.cljs$lang$applyTo = function(arglist__18810) {
        var r = cljs.core.seq(arglist__18810);
        return G__18808__delegate(r);
      };
      G__18808.cljs$core$IFn$_invoke$arity$variadic = G__18808__delegate;
      return G__18808;
    }();
  }(k, v), k, v));
};
qiss.core.stringify_lambda = function qiss$core$stringify_lambda(x) {
  return qiss.core.lambda_text.call(null, x);
};
qiss.core.stringify_table = function qiss$core$stringify_table(x) {
  return clojure.string.join.call(null, "\n", qiss.core.table_as_strings.call(null, x));
};
qiss.core.stringify_vector = function qiss$core$stringify_vector(x) {
  if (0 < cljs.core.count.call(null, x) && cljs.core.char_QMARK_.call(null, cljs.core.first.call(null, x))) {
    return clojure.string.join.call(null, x);
  } else {
    return clojure.string.join.call(null, " ", cljs.core.mapv.call(null, qiss.core.stringify, x));
  }
};
qiss.core.stringify = function qiss$core$stringify(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return qiss.core.stringify_vector.call(null, x);
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.stringify_dict.call(null, x);
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.stringify_table.call(null, x);
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.stringify_keyed_table.call(null, x);
        } else {
          if (cljs.core.truth_(qiss.core.lambda_QMARK_.call(null, x))) {
            return qiss.core.stringify_lambda.call(null, x);
          } else {
            return [cljs.core.str(x)].join("");
          }
        }
      }
    }
  }
};
qiss.core.show_dict = function qiss$core$show_dict(x) {
  var n = function() {
    var x__14674__auto__ = (new cljs.core.Keyword(null, "rows", "rows", 850049680)).cljs$core$IFn$_invoke$arity$1(qiss.core.viewport);
    var y__14675__auto__ = cljs.core.count.call(null, qiss.core.dict_key.call(null, x));
    return x__14674__auto__ < y__14675__auto__ ? x__14674__auto__ : y__14675__auto__;
  }();
  var w = (new cljs.core.Keyword(null, "cols", "cols", -1914801295)).cljs$core$IFn$_invoke$arity$1(qiss.core.viewport);
  var ks = cljs.core.mapv.call(null, qiss.core.stringify, cljs.core.take.call(null, n, qiss.core.dict_key.call(null, x)));
  var kw = cljs.core.apply.call(null, cljs.core.max, cljs.core.map.call(null, cljs.core.count, ks));
  var f = [cljs.core.str("%"), cljs.core.str(kw), cljs.core.str("s| %s")].join("");
  var seq__18817 = cljs.core.seq.call(null, cljs.core.mapv.call(null, cljs.core.vector, ks, cljs.core.take.call(null, n, cljs.core.map.call(null, qiss.core.stringify, qiss.core.dict_val.call(null, x)))));
  var chunk__18818 = null;
  var count__18819 = 0;
  var i__18820 = 0;
  while (true) {
    if (i__18820 < count__18819) {
      var vec__18821 = cljs.core._nth.call(null, chunk__18818, i__18820);
      var k = cljs.core.nth.call(null, vec__18821, 0, null);
      var v = cljs.core.nth.call(null, vec__18821, 1, null);
      cljs.core.println.call(null, qiss.core.substr.call(null, goog.string.format(f, k, v), 0, w));
      var G__18823 = seq__18817;
      var G__18824 = chunk__18818;
      var G__18825 = count__18819;
      var G__18826 = i__18820 + 1;
      seq__18817 = G__18823;
      chunk__18818 = G__18824;
      count__18819 = G__18825;
      i__18820 = G__18826;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__18817);
      if (temp__4425__auto__) {
        var seq__18817__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18817__$1)) {
          var c__15139__auto__ = cljs.core.chunk_first.call(null, seq__18817__$1);
          var G__18827 = cljs.core.chunk_rest.call(null, seq__18817__$1);
          var G__18828 = c__15139__auto__;
          var G__18829 = cljs.core.count.call(null, c__15139__auto__);
          var G__18830 = 0;
          seq__18817 = G__18827;
          chunk__18818 = G__18828;
          count__18819 = G__18829;
          i__18820 = G__18830;
          continue;
        } else {
          var vec__18822 = cljs.core.first.call(null, seq__18817__$1);
          var k = cljs.core.nth.call(null, vec__18822, 0, null);
          var v = cljs.core.nth.call(null, vec__18822, 1, null);
          cljs.core.println.call(null, qiss.core.substr.call(null, goog.string.format(f, k, v), 0, w));
          var G__18831 = cljs.core.next.call(null, seq__18817__$1);
          var G__18832 = null;
          var G__18833 = 0;
          var G__18834 = 0;
          seq__18817 = G__18831;
          chunk__18818 = G__18832;
          count__18819 = G__18833;
          i__18820 = G__18834;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
qiss.core.show_lambda = function qiss$core$show_lambda(x) {
  return cljs.core.println.call(null, qiss.core.lambda_text.call(null, x));
};
qiss.core.show_table = function qiss$core$show_table(x) {
  return cljs.core.println.call(null, clojure.string.join.call(null, "\n", qiss.core.table_as_strings.call(null, x)));
};
qiss.core.show_keyed_table = function qiss$core$show_keyed_table(x) {
  return cljs.core.println.call(null, clojure.string.join.call(null, "\n", cljs.core.map.call(null, function() {
    var G__18835__delegate = function(r) {
      return clojure.string.join.call(null, "| ", r);
    };
    var G__18835 = function(var_args) {
      var r = null;
      if (arguments.length > 0) {
        var G__18836__i = 0, G__18836__a = new Array(arguments.length - 0);
        while (G__18836__i < G__18836__a.length) {
          G__18836__a[G__18836__i] = arguments[G__18836__i + 0];
          ++G__18836__i;
        }
        r = new cljs.core.IndexedSeq(G__18836__a, 0);
      }
      return G__18835__delegate.call(this, r);
    };
    G__18835.cljs$lang$maxFixedArity = 0;
    G__18835.cljs$lang$applyTo = function(arglist__18837) {
      var r = cljs.core.seq(arglist__18837);
      return G__18835__delegate(r);
    };
    G__18835.cljs$core$IFn$_invoke$arity$variadic = G__18835__delegate;
    return G__18835;
  }(), qiss.core.table_as_strings.call(null, qiss.core.dict_key.call(null, x)), qiss.core.table_as_strings.call(null, qiss.core.dict_val.call(null, x)))));
};
qiss.core.show_vector = function qiss$core$show_vector(x) {
  var s = function qiss$core$show_vector_$_self(x__$1) {
    if (0 < cljs.core.count.call(null, x__$1)) {
      if (cljs.core.char_QMARK_.call(null, cljs.core.first.call(null, x__$1))) {
        return [cljs.core.str('"'), cljs.core.str(clojure.string.join.call(null, x__$1)), cljs.core.str('"')].join("");
      } else {
        if (cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, x__$1))) {
          return cljs.core.mapv.call(null, qiss$core$show_vector_$_self, x__$1);
        } else {
          return x__$1;
        }
      }
    } else {
      return "[]";
    }
  };
  return cljs.core.println.call(null, s.call(null, x));
};
qiss.core.show = function qiss$core$show(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return qiss.core.show_vector.call(null, x);
  } else {
    if (cljs.core.truth_(qiss.core.dict_QMARK_.call(null, x))) {
      return qiss.core.show_dict.call(null, x);
    } else {
      if (cljs.core.truth_(qiss.core.table_QMARK_.call(null, x))) {
        return qiss.core.show_table.call(null, x);
      } else {
        if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, x))) {
          return qiss.core.show_keyed_table.call(null, x);
        } else {
          if (cljs.core.truth_(qiss.core.lambda_QMARK_.call(null, x))) {
            return qiss.core.show_lambda.call(null, x);
          } else {
            return cljs.core.println.call(null, x);
          }
        }
      }
    }
  }
};
qiss.core.eval_no_env = function qiss$core$eval_no_env(x) {
  return cljs.core.last.call(null, qiss.core.kresolve.call(null, x, cljs.core.PersistentArrayMap.EMPTY, cljs.core.second.call(null, qiss.core.parse.call(null, x))));
};
qiss.core.expand = function qiss$core$expand(x) {
  return cljs.core.reduce.call(null, function(s, c) {
    if (cljs.core.not_EQ_.call(null, "\t", c)) {
      return [cljs.core.str(s), cljs.core.str(c)].join("");
    } else {
      return cljs.core.apply.call(null, cljs.core.str, s, cljs.core.repeat.call(null, 8 - cljs.core.mod.call(null, cljs.core.count.call(null, s), 8), " "));
    }
  }, "", x);
};
qiss.core.count_leading_spaces = function qiss$core$count_leading_spaces(x) {
  var temp__4423__auto__ = cljs.core.re_matches.call(null, /( +).*/, x);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var m = temp__4423__auto__;
    return cljs.core.count.call(null, cljs.core.second.call(null, m));
  } else {
    return 0;
  }
};
qiss.core.dedents = function qiss$core$dedents(n) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, n, ":::"));
};
qiss.core.add_indent_tokens = function qiss$core$add_indent_tokens(pl) {
  return cljs.core.first.call(null, cljs.core.reduce.call(null, function(p__18840, n) {
    var vec__18841 = p__18840;
    var r = cljs.core.nth.call(null, vec__18841, 0, null);
    var s = cljs.core.nth.call(null, vec__18841, 1, null);
    var ln = cljs.core.get.call(null, pl, n);
    var i = qiss.core.count_leading_spaces.call(null, ln);
    var t = cljs.core.last.call(null, qiss.core.null_BANG_.call(null, s));
    if (cljs.core._EQ_.call(null, t, i)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, r, [cljs.core.str(";"), cljs.core.str(ln)].join("")), s], null);
    } else {
      if (t < i) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, r, [cljs.core.str("!!!"), cljs.core.str(ln)].join("")), cljs.core.conj.call(null, s, i)], null);
      } else {
        var j = qiss.core.last_index_of.call(null, s, i);
        var k = cljs.core.count.call(null, s) - (1 + j);
        if (k < 0) {
          return qiss.core.err.call(null, "bad indent on line", 1 + n, ":", ln);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.call(null, r, cljs.core.apply.call(null, cljs.core.str, ";", qiss.core.dedents.call(null, k), ln)), cljs.core.subvec.call(null, s, 0, k)], null);
        }
      }
    }
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null)], null), cljs.core.range.call(null, cljs.core.count.call(null, pl))));
};
qiss.core.kload = function qiss$core$kload(e, x) {
  return null;
};
qiss.core.lj = function qiss$core$lj(x, y) {
  if (cljs.core.not.call(null, qiss.core.keyed_table_QMARK_.call(null, y))) {
    return qiss.core.err.call(null, "rhs of lj must be a keyed table");
  } else {
    if (!cljs.core.every_QMARK_.call(null, function(p1__18844_SHARP_) {
      return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18844_SHARP_], true), qiss.core.cols.call(null, x));
    }, qiss.core.keycols.call(null, y))) {
      return qiss.core.err.call(null, "mismatch: lj", x, y);
    } else {
      var j = cljs.core.apply.call(null, cljs.core.mapv, cljs.core.partial.call(null, qiss.core.index_of_colwise, qiss.core.dict_val.call(null, qiss.core.dict_key.call(null, y))), qiss.core.index.call(null, qiss.core.dict_val.call(null, x), qiss.core.findv.call(null, qiss.core.cols.call(null, x), qiss.core.keycols.call(null, y))));
      var r = qiss.core.index_table.call(null, qiss.core.dict_val.call(null, y), j);
      return qiss.core.make_table.call(null, qiss.core.catv.call(null, qiss.core.dict_key.call(null, x), qiss.core.dict_key.call(null, r)), qiss.core.catv.call(null, qiss.core.dict_val.call(null, x), qiss.core.dict_val.call(null, r)));
    }
  }
};
qiss.core.sort_table = function qiss$core$sort_table(x, y, o) {
  var c = cljs.core.coll_QMARK_.call(null, x) ? x : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null);
  var t = qiss.core.unkey_table.call(null, y);
  if (!cljs.core.every_QMARK_.call(null, function(c, t) {
    return function(p1__18845_SHARP_) {
      return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([p1__18845_SHARP_], true), qiss.core.cols.call(null, t));
    };
  }(c, t), c)) {
    return qiss.core.err.call(null, "mismatch: xasc", c, y);
  } else {
    var r = qiss.core.index_table.call(null, t, o.call(null, cljs.core.apply.call(null, cljs.core.mapv, cljs.core.vector, qiss.core.index_table.call(null, t, c))));
    if (cljs.core.truth_(qiss.core.keyed_table_QMARK_.call(null, y))) {
      return qiss.core.key_table.call(null, qiss.core.keycols.call(null, y), r);
    } else {
      return r;
    }
  }
};
qiss.core.xasc = function qiss$core$xasc(x, y) {
  return qiss.core.sort_table.call(null, x, y, qiss.core.less);
};
qiss.core.xdesc = function qiss$core$xdesc(x, y) {
  return qiss.core.sort_table.call(null, x, y, qiss.core.greater);
};
qiss.core.builtin = qiss.core.kload.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "rcsvh", "rcsvh", 691794817), new cljs.core.Keyword(null, "xdesc", "xdesc", 1004252004), new cljs.core.Keyword(null, "read", "read", 1140058661), new cljs.core.Keyword(null, "exit", "exit", 351849638), new cljs.core.Keyword(null, "new", "new", -2085437848), new cljs.core.Keyword(null, "mod", "mod", -130487320), new cljs.core.Keyword(null, "lj", "lj", 238693775), new cljs.core.Keyword(null, 
"rcsv", "rcsv", 979296592), new cljs.core.Keyword(null, "xasc", "xasc", -870864496), new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.Keyword(null, "cols", "cols", -1914801295), new cljs.core.Keyword(null, "keys", "keys", 1068423698), new cljs.core.Keyword(null, "sv", "sv", -170947079), new cljs.core.Keyword(null, "last", "last", 1105735132), new cljs.core.Keyword(null, "wcsv", "wcsv", -6650723), new cljs.core.Keyword(null, "vs", "vs", -2022097090), new cljs.core.Keyword(null, 
"show", "show", -576705889)], [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.rcsvh, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.xdesc, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.read_lines, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.exit, new cljs.core.Keyword(null, "rank", "rank", -1706728502), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.knew, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.kmod, new cljs.core.Keyword(null, 
"rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.lj, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.rcsv, 
new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.xasc, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"f", "f", -1597136552), qiss.core.div, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.cols, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.keycols, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.sv, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.klast, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.wcsv, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.vs, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "f", "f", -1597136552), qiss.core.show, new cljs.core.Keyword(null, "rank", "rank", -1706728502), new cljs.core.PersistentVector(null, 1, 5, 
cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null)]), "src/qiss/qiss.qiss");
qiss.core.repl = function qiss$core$repl() {
  return qiss$core$repl.call(null, qiss.core.builtin);
};
qiss.core.keval = function qiss$core$keval() {
  var args18846 = [];
  var len__15394__auto___18849 = arguments.length;
  var i__15395__auto___18850 = 0;
  while (true) {
    if (i__15395__auto___18850 < len__15394__auto___18849) {
      args18846.push(arguments[i__15395__auto___18850]);
      var G__18851 = i__15395__auto___18850 + 1;
      i__15395__auto___18850 = G__18851;
      continue;
    } else {
    }
    break;
  }
  var G__18848 = args18846.length;
  switch(G__18848) {
    case 1:
      return qiss.core.keval.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.keval.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18846.length)].join(""));;
  }
};
qiss.core.keval.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return qiss.core.keval.call(null, qiss.core.builtin, x);
};
qiss.core.keval.cljs$core$IFn$_invoke$arity$2 = function(e, x) {
  return cljs.core.last.call(null, qiss.core.resolve_full_expr.call(null, x, e, cljs.core.second.call(null, qiss.core.parse.call(null, x))));
};
qiss.core.keval.cljs$lang$maxFixedArity = 2;
qiss.core.krun = function qiss$core$krun() {
  var args18853 = [];
  var len__15394__auto___18856 = arguments.length;
  var i__15395__auto___18857 = 0;
  while (true) {
    if (i__15395__auto___18857 < len__15394__auto___18856) {
      args18853.push(arguments[i__15395__auto___18857]);
      var G__18858 = i__15395__auto___18857 + 1;
      i__15395__auto___18857 = G__18858;
      continue;
    } else {
    }
    break;
  }
  var G__18855 = args18853.length;
  switch(G__18855) {
    case 1:
      return qiss.core.krun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return qiss.core.krun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args18853.length)].join(""));;
  }
};
qiss.core.krun.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return qiss.core.show.call(null, qiss.core.keval.call(null, x));
};
qiss.core.krun.cljs$core$IFn$_invoke$arity$2 = function(e, x) {
  return qiss.core.show.call(null, qiss.core.keval.call(null, e, x));
};
qiss.core.krun.cljs$lang$maxFixedArity = 2;
if (typeof qiss.core.conn !== "undefined") {
} else {
  qiss.core.conn = clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
}
qiss.core._main = function qiss$core$_main() {
  var args__15401__auto__ = [];
  var len__15394__auto___18861 = arguments.length;
  var i__15395__auto___18862 = 0;
  while (true) {
    if (i__15395__auto___18862 < len__15394__auto___18861) {
      args__15401__auto__.push(arguments[i__15395__auto___18862]);
      var G__18863 = i__15395__auto___18862 + 1;
      i__15395__auto___18862 = G__18863;
      continue;
    } else {
    }
    break;
  }
  var argseq__15402__auto__ = 0 < args__15401__auto__.length ? new cljs.core.IndexedSeq(args__15401__auto__.slice(0), 0) : null;
  return qiss.core._main.cljs$core$IFn$_invoke$arity$variadic(argseq__15402__auto__);
};
qiss.core._main.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return null;
};
qiss.core._main.cljs$lang$maxFixedArity = 0;
qiss.core._main.cljs$lang$applyTo = function(seq18860) {
  return qiss.core._main.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq18860));
};
var spec_18868 = {};
describe("about bools", function(spec_18868) {
  return function() {
    it("", function(spec_18868) {
      return function() {
        var spec__$1 = {};
        return describe("bools eval to themselves", function(spec__$1, spec_18868) {
          return function() {
            it("", function(spec__$1, spec_18868) {
              return function() {
                expect(qiss.core.keval.call(null, "1b")).toSatisfy(true, "'(keval \"1b\")'", "'true'");
                return expect(qiss.core.keval.call(null, "0b")).toSatisfy(false, "'(keval \"0b\")'", "'false'");
              };
            }(spec__$1, spec_18868));
            return null;
          };
        }(spec__$1, spec_18868));
      };
    }(spec_18868));
    return null;
  };
}(spec_18868));
var spec_18873 = {};
describe("about simple bool vector literals", function(spec_18873) {
  return function() {
    it("", function(spec_18873) {
      return function() {
        var spec__$1 = {};
        return describe("compact", function(spec__$1, spec_18873) {
          return function() {
            it("", function(spec__$1, spec_18873) {
              return function() {
                return expect(qiss.core.keval.call(null, "1001001b")).toSatisfy(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, false, false, true, false, false, true], null), "'(keval \"1001001b\")'", "'[true false false true false false true]'");
              };
            }(spec__$1, spec_18873));
            return null;
          };
        }(spec__$1, spec_18873));
      };
    }(spec_18873));
    return null;
  };
}(spec_18873));
var spec_18886 = {};
describe("about ~", function(spec_18886) {
  return function() {
    it("", function(spec_18886) {
      return function() {
        var spec_18887__$1 = {};
        describe("atom", function(spec_18887__$1, spec_18886) {
          return function() {
            it("", function(spec_18887__$1, spec_18886) {
              return function() {
                expect(qiss.core.keval.call(null, "~5")).toSatisfy(false, "'(keval \"~5\")'", "'false'");
                return expect(qiss.core.keval.call(null, "~0b")).toSatisfy(true, "'(keval \"~0b\")'", "'true'");
              };
            }(spec_18887__$1, spec_18886));
            return null;
          };
        }(spec_18887__$1, spec_18886));
        var spec_18888__$1 = {};
        describe("vector", function(spec_18888__$1, spec_18886) {
          return function() {
            it("", function(spec_18888__$1, spec_18886) {
              return function() {
                expect(qiss.core.keval.call(null, "~101b")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, true, false], null), "'(keval \"~101b\")'", "'[false true false]'");
                return expect(qiss.core.keval.call(null, "~2 7 0")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, false, true], null), "'(keval \"~2 7 0\")'", "'[false false true]'");
              };
            }(spec_18888__$1, spec_18886));
            return null;
          };
        }(spec_18888__$1, spec_18886));
        var spec_18889__$1 = {};
        describe("dict", function(spec_18889__$1, spec_18886) {
          return function() {
            it("", function(spec_18889__$1, spec_18886) {
              return function() {
                return expect(qiss.core.keval.call(null, "~`a`b`c!101b")).toSatisfy(qiss.core.keval.call(null, "`a`b`c!010b"), "'(keval \"~`a`b`c!101b\")'", "'(keval \"`a`b`c!010b\")'");
              };
            }(spec_18889__$1, spec_18886));
            return null;
          };
        }(spec_18889__$1, spec_18886));
        var spec_18890__$1 = {};
        describe("table", function(spec_18890__$1, spec_18886) {
          return function() {
            it("", function(spec_18890__$1, spec_18886) {
              return function() {
                return expect(qiss.core.keval.call(null, "~([]a:1 0 4)")).toSatisfy(qiss.core.keval.call(null, "([]a:010b)"), "'(keval \"~([]a:1 0 4)\")'", "'(keval \"([]a:010b)\")'");
              };
            }(spec_18890__$1, spec_18886));
            return null;
          };
        }(spec_18890__$1, spec_18886));
        var spec__$1 = {};
        return describe("keyed tables", function(spec__$1, spec_18886) {
          return function() {
            it("", function(spec__$1, spec_18886) {
              return function() {
                return expect(qiss.core.keval.call(null, "~([a:1 0 4]b:010b)")).toSatisfy(qiss.core.keval.call(null, "([a:1 0 4]b:101b)"), "'(keval \"~([a:1 0 4]b:010b)\")'", "'(keval \"([a:1 0 4]b:101b)\")'");
              };
            }(spec__$1, spec_18886));
            return null;
          };
        }(spec__$1, spec_18886));
      };
    }(spec_18886));
    return null;
  };
}(spec_18886));
var spec_18895 = {};
describe("about chars", function(spec_18895) {
  return function() {
    it("", function(spec_18895) {
      return function() {
        var spec__$1 = {};
        return describe("chars eval to themselves", function(spec__$1, spec_18895) {
          return function() {
            it("", function(spec__$1, spec_18895) {
              return function() {
                return expect(qiss.core.keval.call(null, '"a"')).toSatisfy("a", '\'(keval "\\"a\\"")\'', "'a'");
              };
            }(spec__$1, spec_18895));
            return null;
          };
        }(spec__$1, spec_18895));
      };
    }(spec_18895));
    return null;
  };
}(spec_18895));
var spec_18900 = {};
describe("about simple char vector literals", function(spec_18900) {
  return function() {
    it("", function(spec_18900) {
      return function() {
        var spec__$1 = {};
        return describe("char vector literals eval to vectors of char", function(spec__$1, spec_18900) {
          return function() {
            it("", function(spec__$1, spec_18900) {
              return function() {
                return expect(qiss.core.keval.call(null, '"abc"')).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a", "b", "c"], null), '\'(keval "\\"abc\\"")\'', "'[\\a \\b \\c]'");
              };
            }(spec__$1, spec_18900));
            return null;
          };
        }(spec__$1, spec_18900));
      };
    }(spec_18900));
    return null;
  };
}(spec_18900));
var spec_18905 = {};
describe("about floats", function(spec_18905) {
  return function() {
    it("", function(spec_18905) {
      return function() {
        var spec__$1 = {};
        return describe("floats eval to themselves", function(spec__$1, spec_18905) {
          return function() {
            it("", function(spec__$1, spec_18905) {
              return function() {
                expect(qiss.core.keval.call(null, "1.")).toSatisfy(1, "'(keval \"1.\")'", "'1.0'");
                return expect(qiss.core.keval.call(null, "-1.")).toSatisfy(-1, "'(keval \"-1.\")'", "'-1.0'");
              };
            }(spec__$1, spec_18905));
            return null;
          };
        }(spec__$1, spec_18905));
      };
    }(spec_18905));
    return null;
  };
}(spec_18905));
var spec_18916 = {};
describe("about float vector literals", function(spec_18916) {
  return function() {
    it("", function(spec_18916) {
      return function() {
        var spec_18917__$1 = {};
        describe("no punctuation", function(spec_18917__$1, spec_18916) {
          return function() {
            it("", function(spec_18917__$1, spec_18916) {
              return function() {
                return expect(qiss.core.keval.call(null, "1.4 2.5 3.6")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1.4, 2.5, 3.6], null), "'(keval \"1.4 2.5 3.6\")'", "'[1.4 2.5 3.6]'");
              };
            }(spec_18917__$1, spec_18916));
            return null;
          };
        }(spec_18917__$1, spec_18916));
        var spec_18918__$1 = {};
        describe("any float promotes the whole vector", function(spec_18918__$1, spec_18916) {
          return function() {
            it("", function(spec_18918__$1, spec_18916) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2.0 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"1 2.0 3\")'", "'[1.0 2.0 3.0]'");
              };
            }(spec_18918__$1, spec_18916));
            return null;
          };
        }(spec_18918__$1, spec_18916));
        var spec_18919__$1 = {};
        describe("fractional part not needed if it is zero", function(spec_18919__$1, spec_18916) {
          return function() {
            it("", function(spec_18919__$1, spec_18916) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2. 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"1 2. 3\")'", "'[1.0 2.0 3.0]'");
              };
            }(spec_18919__$1, spec_18916));
            return null;
          };
        }(spec_18919__$1, spec_18916));
        var spec__$1 = {};
        return describe("spaces may be added for formatting", function(spec__$1, spec_18916) {
          return function() {
            it("", function(spec__$1, spec_18916) {
              return function() {
                return expect(qiss.core.keval.call(null, "1     2.    3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"1     2.    3\")'", "'[1.0 2.0 3.0]'");
              };
            }(spec__$1, spec_18916));
            return null;
          };
        }(spec__$1, spec_18916));
      };
    }(spec_18916));
    return null;
  };
}(spec_18916));
var spec_18928 = {};
describe("about longs", function(spec_18928) {
  return function() {
    it("", function(spec_18928) {
      return function() {
        var spec_18929__$1 = {};
        describe("longs eval to themselves", function(spec_18929__$1, spec_18928) {
          return function() {
            it("", function(spec_18929__$1, spec_18928) {
              return function() {
                expect(qiss.core.keval.call(null, "1")).toSatisfy(1, "'(keval \"1\")'", "'1'");
                return expect(qiss.core.keval.call(null, "-123")).toSatisfy(-123, "'(keval \"-123\")'", "'-123'");
              };
            }(spec_18929__$1, spec_18928));
            return null;
          };
        }(spec_18929__$1, spec_18928));
        var spec_18930__$1 = {};
        describe("longs add", function(spec_18930__$1, spec_18928) {
          return function() {
            it("", function(spec_18930__$1, spec_18928) {
              return function() {
                expect(qiss.core.keval.call(null, "1+10")).toSatisfy(11, "'(keval \"1+10\")'", "'11'");
                expect(qiss.core.keval.call(null, "1+-10")).toSatisfy(-9, "'(keval \"1+-10\")'", "'-9'");
                return expect(qiss.core.keval.call(null, "-1+10")).toSatisfy(9, "'(keval \"-1+10\")'", "'9'");
              };
            }(spec_18930__$1, spec_18928));
            return null;
          };
        }(spec_18930__$1, spec_18928));
        var spec__$1 = {};
        return describe("longs subtract", function(spec__$1, spec_18928) {
          return function() {
            it("", function(spec__$1, spec_18928) {
              return function() {
                expect(qiss.core.keval.call(null, "1-10")).toSatisfy(-9, "'(keval \"1-10\")'", "'-9'");
                return expect(qiss.core.keval.call(null, "100-42")).toSatisfy(58, "'(keval \"100-42\")'", "'58'");
              };
            }(spec__$1, spec_18928));
            return null;
          };
        }(spec__$1, spec_18928));
      };
    }(spec_18928));
    return null;
  };
}(spec_18928));
var spec_18939 = {};
describe("about simple long vector literals", function(spec_18939) {
  return function() {
    it("", function(spec_18939) {
      return function() {
        var spec_18940__$1 = {};
        describe("no puncuation", function(spec_18940__$1, spec_18939) {
          return function() {
            it("", function(spec_18940__$1, spec_18939) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"1 2 3\")'", "'[1 2 3]'");
              };
            }(spec_18940__$1, spec_18939));
            return null;
          };
        }(spec_18940__$1, spec_18939));
        var spec_18941__$1 = {};
        describe("monadic - sticks to literals", function(spec_18941__$1, spec_18939) {
          return function() {
            it("", function(spec_18941__$1, spec_18939) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 -2 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, -2, 3], null), "'(keval \"1 -2 3\")'", "'[1 -2 3]'");
              };
            }(spec_18941__$1, spec_18939));
            return null;
          };
        }(spec_18941__$1, spec_18939));
        var spec__$1 = {};
        return describe("spaces may be added for formatting", function(spec__$1, spec_18939) {
          return function() {
            it("", function(spec__$1, spec_18939) {
              return function() {
                return expect(qiss.core.keval.call(null, "1    2     3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"1    2     3\")'", "'[1 2 3]'");
              };
            }(spec__$1, spec_18939));
            return null;
          };
        }(spec__$1, spec_18939));
      };
    }(spec_18939));
    return null;
  };
}(spec_18939));
var spec_18946 = {};
describe("about mixed vectors", function(spec_18946) {
  return function() {
    it("", function(spec_18946) {
      return function() {
        var spec__$1 = {};
        return describe("top-level indexing", function(spec__$1, spec_18946) {
          return function() {
            it("", function(spec__$1, spec_18946) {
              return function() {
                return expect(qiss.core.keval.call(null, "(`a`b`c;1)0")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "c", "c", -1763192079)], null), "'(keval \"(`a`b`c;1)0\")'", "'[:a :b :c]'");
              };
            }(spec__$1, spec_18946));
            return null;
          };
        }(spec__$1, spec_18946));
      };
    }(spec_18946));
    return null;
  };
}(spec_18946));
var spec_18957 = {};
describe("about vectors with holes", function(spec_18957) {
  return function() {
    it("", function(spec_18957) {
      return function() {
        var spec_18958__$1 = {};
        describe("holes are maintained", function(spec_18958__$1, spec_18957) {
          return function() {
            it("", function(spec_18958__$1, spec_18957) {
              return function() {
                return expect(qiss.core.keval.call(null, "(3;)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, new cljs.core.Keyword(null, "hole", "hole", -743450790)], null), "'(keval \"(3;)\")'", "'[3 :hole]'");
              };
            }(spec_18958__$1, spec_18957));
            return null;
          };
        }(spec_18958__$1, spec_18957));
        var spec_18959__$1 = {};
        describe("holes can be filled via []", function(spec_18959__$1, spec_18957) {
          return function() {
            it("", function(spec_18959__$1, spec_18957) {
              return function() {
                expect(qiss.core.keval.call(null, "(3;)[4]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 4], null), "'(keval \"(3;)[4]\")'", "'[3 4]'");
                return expect(qiss.core.keval.call(null, "(;3;)[4;5]")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 3, 5], null), "'(keval \"(;3;)[4;5]\")'", "'[4 3 5]'");
              };
            }(spec_18959__$1, spec_18957));
            return null;
          };
        }(spec_18959__$1, spec_18957));
        var spec_18960__$1 = {};
        describe("holes can be filled via juxt", function(spec_18960__$1, spec_18957) {
          return function() {
            it("", function(spec_18960__$1, spec_18957) {
              return function() {
                return expect(qiss.core.keval.call(null, "(3;)4")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 4], null), "'(keval \"(3;)4\")'", "'[3 4]'");
              };
            }(spec_18960__$1, spec_18957));
            return null;
          };
        }(spec_18960__$1, spec_18957));
        var spec__$1 = {};
        return describe("holes can be filled in stages", function(spec__$1, spec_18957) {
          return function() {
            it("", function(spec__$1, spec_18957) {
              return function() {
                expect(qiss.core.keval.call(null, "(;3;)4")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 3, new cljs.core.Keyword(null, "hole", "hole", -743450790)], null), "'(keval \"(;3;)4\")'", "'[4 3 :hole]'");
                return expect(qiss.core.keval.call(null, "(;3;)[4]5")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 3, 5], null), "'(keval \"(;3;)[4]5\")'", "'[4 3 5]'");
              };
            }(spec__$1, spec_18957));
            return null;
          };
        }(spec__$1, spec_18957));
      };
    }(spec_18957));
    return null;
  };
}(spec_18957));
var spec_18967 = {};
describe("about !", function(spec_18967) {
  return function() {
    it("", function(spec_18967) {
      return function() {
        var spec_18968__$1 = {};
        describe("monadic ! on a long is til", function(spec_18968__$1, spec_18967) {
          return function() {
            it("", function(spec_18968__$1, spec_18967) {
              return function() {
                return expect(qiss.core.keval.call(null, "!3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 2], null), "'(keval \"!3\")'", "'[0 1 2]'");
              };
            }(spec_18968__$1, spec_18967));
            return null;
          };
        }(spec_18968__$1, spec_18967));
        var spec__$1 = {};
        return describe("monadic ! on a dict is key", function(spec__$1, spec_18967) {
          return function() {
            it("", function(spec__$1, spec_18967) {
              return function() {
                return expect(qiss.core.keval.call(null, "!`a`b`c!1 2 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "c", "c", -1763192079)], null), "'(keval \"!`a`b`c!1 2 3\")'", "'[:a :b :c]'");
              };
            }(spec__$1, spec_18967));
            return null;
          };
        }(spec__$1, spec_18967));
      };
    }(spec_18967));
    return null;
  };
}(spec_18967));
var spec_18973 = {};
describe("about ?", function(spec_18973) {
  return function() {
    it("", function(spec_18973) {
      return function() {
        var spec__$1 = {};
        return describe("container?... \x3d\x3e find", function(spec__$1, spec_18973) {
          return function() {
            it("", function(spec__$1, spec_18973) {
              return function() {
                expect(qiss.core.keval.call(null, "(!5)?0")).toSatisfy(0, "'(keval \"(!5)?0\")'", "'0'");
                expect(qiss.core.keval.call(null, "(!5)?0 2 4")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 4], null), "'(keval \"(!5)?0 2 4\")'", "'[0 2 4]'");
                expect(qiss.core.keval.call(null, "(!5)?10 3 1")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, 3, 1], null), "'(keval \"(!5)?10 3 1\")'", "'[5 3 1]'");
                expect(qiss.core.keval.call(null, "(`a`b`c!1 2 3)?2")).toSatisfy(new cljs.core.Keyword(null, "b", "b", 1482224470), "'(keval \"(`a`b`c!1 2 3)?2\")'", "':b'");
                expect(qiss.core.keval.call(null, "(`a`b`c!1 2 3)?3 1")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "c", "c", -1763192079), new cljs.core.Keyword(null, "a", "a", -2123407586)], null), "'(keval \"(`a`b`c!1 2 3)?3 1\")'", "'[:c :a]'");
                expect(qiss.core.keval.call(null, "([]a:1 2 3)?([]a:1 2)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null), "'(keval \"([]a:1 2 3)?([]a:1 2)\")'", "'[0 1]'");
                return expect(qiss.core.keval.call(null, "([a:`a`b`c]b:1 2 3)?([]b:1 2)")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`b)"), "'(keval \"([a:`a`b`c]b:1 2 3)?([]b:1 2)\")'", "'(keval \"([]a:`a`b)\")'");
              };
            }(spec__$1, spec_18973));
            return null;
          };
        }(spec__$1, spec_18973));
      };
    }(spec_18973));
    return null;
  };
}(spec_18973));
var spec_18978 = {};
describe("about +", function(spec_18978) {
  return function() {
    it("", function(spec_18978) {
      return function() {
        var spec__$1 = {};
        return describe("+ is atomic", function(spec__$1, spec_18978) {
          return function() {
            it("", function(spec__$1, spec_18978) {
              return function() {
                expect(qiss.core.keval.call(null, "1+10 20")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [11, 21], null), "'(keval \"1+10 20\")'", "'[11 21]'");
                expect(qiss.core.keval.call(null, "1 2+10")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [11, 12], null), "'(keval \"1 2+10\")'", "'[11 12]'");
                return expect(qiss.core.keval.call(null, "1 2+10 20")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [11, 22], null), "'(keval \"1 2+10 20\")'", "'[11 22]'");
              };
            }(spec__$1, spec_18978));
            return null;
          };
        }(spec__$1, spec_18978));
      };
    }(spec_18978));
    return null;
  };
}(spec_18978));
var spec_18983 = {};
describe("about symbols", function(spec_18983) {
  return function() {
    it("", function(spec_18983) {
      return function() {
        var spec__$1 = {};
        return describe("symbols eval to clojure keywords", function(spec__$1, spec_18983) {
          return function() {
            it("", function(spec__$1, spec_18983) {
              return function() {
                return expect(qiss.core.keval.call(null, "`abc")).toSatisfy(new cljs.core.Keyword(null, "abc", "abc", -1232035677), "'(keval \"`abc\")'", "':abc'");
              };
            }(spec__$1, spec_18983));
            return null;
          };
        }(spec__$1, spec_18983));
      };
    }(spec_18983));
    return null;
  };
}(spec_18983));
var spec_18988 = {};
describe("about symbol vector literals", function(spec_18988) {
  return function() {
    it("", function(spec_18988) {
      return function() {
        var spec__$1 = {};
        return describe("no spaces", function(spec__$1, spec_18988) {
          return function() {
            it("", function(spec__$1, spec_18988) {
              return function() {
                return expect(qiss.core.keval.call(null, "`abc`def")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "abc", "abc", -1232035677), new cljs.core.Keyword(null, "def", "def", -1043430536)], null), "'(keval \"`abc`def\")'", "'[:abc :def]'");
              };
            }(spec__$1, spec_18988));
            return null;
          };
        }(spec__$1, spec_18988));
      };
    }(spec_18988));
    return null;
  };
}(spec_18988));
var spec_18993 = {};
describe("about +", function(spec_18993) {
  return function() {
    it("", function(spec_18993) {
      return function() {
        var spec__$1 = {};
        return describe("+ doesn't care about spaces", function(spec__$1, spec_18993) {
          return function() {
            it("", function(spec__$1, spec_18993) {
              return function() {
                expect(qiss.core.keval.call(null, "1 +2")).toSatisfy(3, "'(keval \"1 +2\")'", "'3'");
                expect(qiss.core.keval.call(null, "1+ 2")).toSatisfy(3, "'(keval \"1+ 2\")'", "'3'");
                return expect(qiss.core.keval.call(null, "1 + 2")).toSatisfy(3, "'(keval \"1 + 2\")'", "'3'");
              };
            }(spec__$1, spec_18993));
            return null;
          };
        }(spec__$1, spec_18993));
      };
    }(spec_18993));
    return null;
  };
}(spec_18993));
var spec_19000 = {};
describe("about \x3c", function(spec_19000) {
  return function() {
    it("", function(spec_19000) {
      return function() {
        var spec_19001__$1 = {};
        describe("monadic \x3c is iasc", function(spec_19001__$1, spec_19000) {
          return function() {
            it("", function(spec_19001__$1, spec_19000) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x3c`d`d`e`c`c`b`d`e`e`b")).toSatisfy(new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, 9, 3, 4, 0, 1, 6, 2, 7, 8], null), "'(keval \"\x3c`d`d`e`c`c`b`d`e`e`b\")'", "'[5 9 3 4 0 1 6 2 7 8]'");
              };
            }(spec_19001__$1, spec_19000));
            return null;
          };
        }(spec_19001__$1, spec_19000));
        var spec__$1 = {};
        return describe("\x3c works on dicts", function(spec__$1, spec_19000) {
          return function() {
            it("", function(spec__$1, spec_19000) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x3c`a`b`c`d`e`f`g`h`i`j!4 0 2 1 2 1 2 3 2 4")).toSatisfy(qiss.core.keval.call(null, "`b`d`f`c`e`g`i`h`a`j"), "'(keval \"\x3c`a`b`c`d`e`f`g`h`i`j!4 0 2 1 2 1 2 3 2 4\")'", "'(keval \"`b`d`f`c`e`g`i`h`a`j\")'");
              };
            }(spec__$1, spec_19000));
            return null;
          };
        }(spec__$1, spec_19000));
      };
    }(spec_19000));
    return null;
  };
}(spec_19000));
var spec_19006 = {};
describe("about \x3e", function(spec_19006) {
  return function() {
    it("", function(spec_19006) {
      return function() {
        var spec__$1 = {};
        return describe("monadic \x3e is idesc", function(spec__$1, spec_19006) {
          return function() {
            it("", function(spec__$1, spec_19006) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x3e`d`d`e`c`c`b`d`e`e`b")).toSatisfy(new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 7, 8, 0, 1, 6, 3, 4, 5, 9], null), "'(keval \"\x3e`d`d`e`c`c`b`d`e`e`b\")'", "'[2 7 8 0 1 6 3 4 5 9]'");
              };
            }(spec__$1, spec_19006));
            return null;
          };
        }(spec__$1, spec_19006));
      };
    }(spec_19006));
    return null;
  };
}(spec_19006));
var spec_19011 = {};
describe("about right-to-left", function(spec_19011) {
  return function() {
    it("", function(spec_19011) {
      return function() {
        var spec__$1 = {};
        return describe("no operator precedence", function(spec__$1, spec_19011) {
          return function() {
            it("", function(spec__$1, spec_19011) {
              return function() {
                return expect(qiss.core.keval.call(null, "10*2+3")).toSatisfy(50, "'(keval \"10*2+3\")'", "'50'");
              };
            }(spec__$1, spec_19011));
            return null;
          };
        }(spec__$1, spec_19011));
      };
    }(spec_19011));
    return null;
  };
}(spec_19011));
var spec_19022 = {};
describe("about _", function(spec_19022) {
  return function() {
    it("", function(spec_19022) {
      return function() {
        var spec_19023__$1 = {};
        describe("n _ container \x3d\x3e drop 1st n", function(spec_19023__$1, spec_19022) {
          return function() {
            it("", function(spec_19023__$1, spec_19022) {
              return function() {
                expect(qiss.core.keval.call(null, "2_!5")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 3, 4], null), "'(keval \"2_!5\")'", "'[2 3 4]'");
                expect(qiss.core.keval.call(null, "2_`a`b`c`d!1 2 3 4")).toSatisfy(qiss.core.keval.call(null, "`c`d!3 4"), "'(keval \"2_`a`b`c`d!1 2 3 4\")'", "'(keval \"`c`d!3 4\")'");
                expect(qiss.core.keval.call(null, "2_([]a:`a`b`c`d;b:1 2 3 4)")).toSatisfy(qiss.core.keval.call(null, "([]a:`c`d;b:3 4)"), "'(keval \"2_([]a:`a`b`c`d;b:1 2 3 4)\")'", "'(keval \"([]a:`c`d;b:3 4)\")'");
                return expect(qiss.core.keval.call(null, "2_([]a:`a`b`c;b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:,`c;b:,3)"), "'(keval \"2_([]a:`a`b`c;b:1 2 3)\")'", "'(keval \"([]a:,`c;b:,3)\")'");
              };
            }(spec_19023__$1, spec_19022));
            return null;
          };
        }(spec_19023__$1, spec_19022));
        var spec_19024__$1 = {};
        describe("(-n) _ container \x3d\x3e drop last n", function(spec_19024__$1, spec_19022) {
          return function() {
            it("", function(spec_19024__$1, spec_19022) {
              return function() {
                expect(qiss.core.keval.call(null, "-2_!5")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 2], null), "'(keval \"-2_!5\")'", "'[0 1 2]'");
                expect(qiss.core.keval.call(null, "-2_`a`b`c`d!1 2 3 4")).toSatisfy(qiss.core.keval.call(null, "`a`b!1 2"), "'(keval \"-2_`a`b`c`d!1 2 3 4\")'", "'(keval \"`a`b!1 2\")'");
                expect(qiss.core.keval.call(null, "-1_([]a:`a`b`c;b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`b;b:1 2)"), "'(keval \"-1_([]a:`a`b`c;b:1 2 3)\")'", "'(keval \"([]a:`a`b;b:1 2)\")'");
                return expect(qiss.core.keval.call(null, "2_([a:`a`b`c]b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([a:,`c]b:,3)"), "'(keval \"2_([a:`a`b`c]b:1 2 3)\")'", "'(keval \"([a:,`c]b:,3)\")'");
              };
            }(spec_19024__$1, spec_19022));
            return null;
          };
        }(spec_19024__$1, spec_19022));
        var spec_19025__$1 = {};
        describe("[n0...] _ vector \x3d\x3e cut", function(spec_19025__$1, spec_19022) {
          return function() {
            it("", function(spec_19025__$1, spec_19022) {
              return function() {
                return expect(qiss.core.keval.call(null, '0 2 5_"0123456"')).toSatisfy(qiss.core.keval.call(null, '("01";"234";"56")'), '\'(keval "0 2 5_\\"0123456\\"")\'', '\'(keval "(\\"01\\";\\"234\\";\\"56\\")")\'');
              };
            }(spec_19025__$1, spec_19022));
            return null;
          };
        }(spec_19025__$1, spec_19022));
        var spec__$1 = {};
        return describe("container _ index \x3d\x3e remove at", function(spec__$1, spec_19022) {
          return function() {
            it("", function(spec__$1, spec_19022) {
              return function() {
                expect(qiss.core.keval.call(null, "(!5)_2")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 3, 4], null), "'(keval \"(!5)_2\")'", "'[0 1 3 4]'");
                expect(qiss.core.keval.call(null, "(`a`b`c!1 2 3)_`c")).toSatisfy(qiss.core.keval.call(null, "`a`b!1 2"), "'(keval \"(`a`b`c!1 2 3)_`c\")'", "'(keval \"`a`b!1 2\")'");
                expect(qiss.core.keval.call(null, "(`a`b`c!1 2 3)_`b")).toSatisfy(qiss.core.keval.call(null, "`a`c!1 3"), "'(keval \"(`a`b`c!1 2 3)_`b\")'", "'(keval \"`a`c!1 3\")'");
                expect(qiss.core.keval.call(null, "([]a:`a`b`c;b:1 2 3)_`a")).toSatisfy(qiss.core.keval.call(null, "([]b:1 2 3)"), "'(keval \"([]a:`a`b`c;b:1 2 3)_`a\")'", "'(keval \"([]b:1 2 3)\")'");
                return expect(qiss.core.keval.call(null, "([]a:`a`b`c;b:1 2 3)_1")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`c;b:1 3)"), "'(keval \"([]a:`a`b`c;b:1 2 3)_1\")'", "'(keval \"([]a:`a`c;b:1 3)\")'");
              };
            }(spec__$1, spec_19022));
            return null;
          };
        }(spec__$1, spec_19022));
      };
    }(spec_19022));
    return null;
  };
}(spec_19022));
var spec_19038 = {};
describe("about adverbs", function(spec_19038) {
  return function() {
    it("", function(spec_19038) {
      return function() {
        var spec_19039__$1 = {};
        describe("they can be monadic", function(spec_19039__$1, spec_19038) {
          return function() {
            it("", function(spec_19039__$1, spec_19038) {
              return function() {
                return expect(qiss.core.keval.call(null, "+/1 2 3")).toSatisfy(6, "'(keval \"+/1 2 3\")'", "'6'");
              };
            }(spec_19039__$1, spec_19038));
            return null;
          };
        }(spec_19039__$1, spec_19038));
        var spec_19040__$1 = {};
        describe("they can be dyadic", function(spec_19040__$1, spec_19038) {
          return function() {
            it("", function(spec_19040__$1, spec_19038) {
              return function() {
                return expect(qiss.core.keval.call(null, "0+/1 2 3")).toSatisfy(6, "'(keval \"0+/1 2 3\")'", "'6'");
              };
            }(spec_19040__$1, spec_19038));
            return null;
          };
        }(spec_19040__$1, spec_19038));
        var spec_19041__$1 = {};
        describe("/: does", function(spec_19041__$1, spec_19038) {
          return function() {
            it("", function(spec_19041__$1, spec_19038) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2 3*/:1 2")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 4, 6], null)], null), "'(keval \"1 2 3*/:1 2\")'", "'[[1 2 3] [2 4 6]]'");
              };
            }(spec_19041__$1, spec_19038));
            return null;
          };
        }(spec_19041__$1, spec_19038));
        var spec_19042__$1 = {};
        describe("adverbed functions can be assigned", function(spec_19042__$1, spec_19038) {
          return function() {
            it("", function(spec_19042__$1, spec_19038) {
              return function() {
                return expect(qiss.core.keval.call(null, "{a:+/;a[0;3 4 5]}[]")).toSatisfy(12, "'(keval \"{a:+/;a[0;3 4 5]}[]\")'", "'12'");
              };
            }(spec_19042__$1, spec_19038));
            return null;
          };
        }(spec_19042__$1, spec_19038));
        var spec__$1 = {};
        return describe("they can be stacked", function(spec__$1, spec_19038) {
          return function() {
            it("", function(spec__$1, spec_19038) {
              return function() {
                expect(qiss.core.keval.call(null, ",//(1 2 3;(4 5 6;7 8 9))")).toSatisfy(new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3, 4, 5, 6, 7, 8, 9], null), "'(keval \",//(1 2 3;(4 5 6;7 8 9))\")'", "'[1 2 3 4 5 6 7 8 9]'");
                expect(qiss.core.keval.call(null, "1 2,/:\\:3 4")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 4], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
                [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 4], null)], null)], null), "'(keval \"1 2,/:\\\\:3 4\")'", "'[[[1 3] [1 4]] [[2 3] [2 4]]]'");
                return expect(qiss.core.keval.call(null, "#''((1 2 3;3 4 5);(5 6 7;7 8 9))")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 3], null)], null), "'(keval \"#''((1 2 3;3 4 5);(5 6 7;7 8 9))\")'", "'[[3 3] [3 3]]'");
              };
            }(spec__$1, spec_19038));
            return null;
          };
        }(spec__$1, spec_19038));
      };
    }(spec_19038));
    return null;
  };
}(spec_19038));
var spec_19047 = {};
describe("about calling functions", function(spec_19047) {
  return function() {
    it("", function(spec_19047) {
      return function() {
        var spec__$1 = {};
        return describe("supplying all arguments causing invocation", function(spec__$1, spec_19047) {
          return function() {
            it("", function(spec__$1, spec_19047) {
              return function() {
                return expect(qiss.core.keval.call(null, "div[10;3]")).toSatisfy(3, "'(keval \"div[10;3]\")'", "'3'");
              };
            }(spec__$1, spec_19047));
            return null;
          };
        }(spec__$1, spec_19047));
      };
    }(spec_19047));
    return null;
  };
}(spec_19047));
var spec_19056 = {};
describe("about partials", function(spec_19056) {
  return function() {
    it("", function(spec_19056) {
      return function() {
        var spec_19057__$1 = {};
        describe("works with []", function(spec_19057__$1, spec_19056) {
          return function() {
            it("", function(spec_19057__$1, spec_19056) {
              return function() {
                return expect(qiss.core.keval.call(null, "{z}[3][4][5]")).toSatisfy(5, "'(keval \"{z}[3][4][5]\")'", "'5'");
              };
            }(spec_19057__$1, spec_19056));
            return null;
          };
        }(spec_19057__$1, spec_19056));
        var spec_19058__$1 = {};
        describe("works with [;]", function(spec_19058__$1, spec_19056) {
          return function() {
            it("", function(spec_19058__$1, spec_19056) {
              return function() {
                expect(qiss.core.keval.call(null, "{z;y}[;10;][3;4]")).toSatisfy(10, "'(keval \"{z;y}[;10;][3;4]\")'", "'10'");
                return expect(qiss.core.keval.call(null, "{z;y}[;10][3;4]")).toSatisfy(10, "'(keval \"{z;y}[;10][3;4]\")'", "'10'");
              };
            }(spec_19058__$1, spec_19056));
            return null;
          };
        }(spec_19058__$1, spec_19056));
        var spec__$1 = {};
        return describe("works with juxt", function(spec__$1, spec_19056) {
          return function() {
            it("", function(spec__$1, spec_19056) {
              return function() {
                expect(qiss.core.keval.call(null, "{y}[3]5")).toSatisfy(5, "'(keval \"{y}[3]5\")'", "'5'");
                expect(qiss.core.keval.call(null, "(1+)3")).toSatisfy(4, "'(keval \"(1+)3\")'", "'4'");
                expect(qiss.core.keval.call(null, "@[!10;2*!5;3*]")).toSatisfy(new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 6, 3, 12, 5, 18, 7, 24, 9], null), "'(keval \"@[!10;2*!5;3*]\")'", "'[0 1 6 3 12 5 18 7 24 9]'");
                return expect(qiss.core.keval.call(null, "(in 1 2 3)1 2")).toSatisfy(qiss.core.keval.call(null, "110b"), "'(keval \"(in 1 2 3)1 2\")'", "'(keval \"110b\")'");
              };
            }(spec__$1, spec_19056));
            return null;
          };
        }(spec__$1, spec_19056));
      };
    }(spec_19056));
    return null;
  };
}(spec_19056));
var spec_19065 = {};
describe("about indexing at depth", function(spec_19065) {
  return function() {
    it("", function(spec_19065) {
      return function() {
        var spec_19066__$1 = {};
        describe("2-d vector", function(spec_19066__$1, spec_19065) {
          return function() {
            it("", function(spec_19066__$1, spec_19065) {
              return function() {
                expect(qiss.core.keval.call(null, "(`a`b`c;1 2 3)[0;1]")).toSatisfy(new cljs.core.Keyword(null, "b", "b", 1482224470), "'(keval \"(`a`b`c;1 2 3)[0;1]\")'", "':b'");
                return expect(qiss.core.keval.call(null, "(`a`b`c;1 2 3)[0;0 1]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "b", "b", 1482224470)], null), "'(keval \"(`a`b`c;1 2 3)[0;0 1]\")'", "'[:a :b]'");
              };
            }(spec_19066__$1, spec_19065));
            return null;
          };
        }(spec_19066__$1, spec_19065));
        var spec__$1 = {};
        return describe("eliding first dimension yields columns", function(spec__$1, spec_19065) {
          return function() {
            it("", function(spec__$1, spec_19065) {
              return function() {
                return expect(qiss.core.keval.call(null, "(0 1 2;3 4 5;6 7 8)[;0]")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 3, 6], null), "'(keval \"(0 1 2;3 4 5;6 7 8)[;0]\")'", "'[0 3 6]'");
              };
            }(spec__$1, spec_19065));
            return null;
          };
        }(spec__$1, spec_19065));
      };
    }(spec_19065));
    return null;
  };
}(spec_19065));
var spec_19071 = {};
describe("about lambdas", function(spec_19071) {
  return function() {
    it("", function(spec_19071) {
      return function() {
        var spec__$1 = {};
        return describe("implicit args", function(spec__$1, spec_19071) {
          return function() {
            it("", function(spec__$1, spec_19071) {
              return function() {
                expect(qiss.core.keval.call(null, "{x}[3]")).toSatisfy(3, "'(keval \"{x}[3]\")'", "'3'");
                expect(qiss.core.keval.call(null, "{x+y}[3;4]")).toSatisfy(7, "'(keval \"{x+y}[3;4]\")'", "'7'");
                return expect(qiss.core.keval.call(null, "{x+y+z}[3;4;5]")).toSatisfy(12, "'(keval \"{x+y+z}[3;4;5]\")'", "'12'");
              };
            }(spec__$1, spec_19071));
            return null;
          };
        }(spec__$1, spec_19071));
      };
    }(spec_19071));
    return null;
  };
}(spec_19071));
var spec_19082 = {};
describe("about juxtaposition", function(spec_19082) {
  return function() {
    it("", function(spec_19082) {
      return function() {
        var spec_19083__$1 = {};
        describe("lambdas juxtapose without whitespace", function(spec_19083__$1, spec_19082) {
          return function() {
            it("", function(spec_19083__$1, spec_19082) {
              return function() {
                return expect(qiss.core.keval.call(null, "{x}3")).toSatisfy(3, "'(keval \"{x}3\")'", "'3'");
              };
            }(spec_19083__$1, spec_19082));
            return null;
          };
        }(spec_19083__$1, spec_19082));
        var spec_19084__$1 = {};
        describe("symbol vector literals followed by longs", function(spec_19084__$1, spec_19082) {
          return function() {
            it("", function(spec_19084__$1, spec_19082) {
              return function() {
                expect(qiss.core.keval.call(null, "`a`b`c`d`e 1")).toSatisfy(new cljs.core.Keyword(null, "b", "b", 1482224470), "'(keval \"`a`b`c`d`e 1\")'", "':b'");
                return expect(qiss.core.keval.call(null, "`a`b`c`d`e 1 2 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "c", "c", -1763192079), new cljs.core.Keyword(null, "d", "d", 1972142424)], null), "'(keval \"`a`b`c`d`e 1 2 3\")'", "'[:b :c :d]'");
              };
            }(spec_19084__$1, spec_19082));
            return null;
          };
        }(spec_19084__$1, spec_19082));
        var spec_19085__$1 = {};
        describe("dyadic user-defined functions can be used infix", function(spec_19085__$1, spec_19082) {
          return function() {
            it("", function(spec_19085__$1, spec_19082) {
              return function() {
                expect(qiss.core.keval.call(null, "`a`b`c`d`e{x y}1 2 3")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "c", "c", -1763192079), new cljs.core.Keyword(null, "d", "d", 1972142424)], null), "'(keval \"`a`b`c`d`e{x y}1 2 3\")'", "'[:b :c :d]'");
                return expect(qiss.core.keval.call(null, "1 2 4 in 1 2 3")).toSatisfy(qiss.core.keval.call(null, "110b"), "'(keval \"1 2 4 in 1 2 3\")'", "'(keval \"110b\")'");
              };
            }(spec_19085__$1, spec_19082));
            return null;
          };
        }(spec_19085__$1, spec_19082));
        var spec__$1 = {};
        return describe("float vector literals are valid lhs", function(spec__$1, spec_19082) {
          return function() {
            it("", function(spec__$1, spec_19082) {
              return function() {
                expect(qiss.core.keval.call(null, "1 2.{x+y}3 4")).toSatisfy(qiss.core.keval.call(null, "4 6."), "'(keval \"1 2.{x+y}3 4\")'", "'(keval \"4 6.\")'");
                return expect(qiss.core.keval.call(null, "1 2. in 2 4. 6")).toSatisfy(qiss.core.keval.call(null, "01b"), "'(keval \"1 2. in 2 4. 6\")'", "'(keval \"01b\")'");
              };
            }(spec__$1, spec_19082));
            return null;
          };
        }(spec__$1, spec_19082));
      };
    }(spec_19082));
    return null;
  };
}(spec_19082));
var spec_19096 = {};
describe("about indexing", function(spec_19096) {
  return function() {
    it("", function(spec_19096) {
      return function() {
        var spec_19097__$1 = {};
        describe("square brackets no semicolons", function(spec_19097__$1, spec_19096) {
          return function() {
            it("", function(spec_19097__$1, spec_19096) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2 3 4[0 2]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), "'(keval \"1 2 3 4[0 2]\")'", "'[1 3]'");
              };
            }(spec_19097__$1, spec_19096));
            return null;
          };
        }(spec_19097__$1, spec_19096));
        var spec_19098__$1 = {};
        describe("with @", function(spec_19098__$1, spec_19096) {
          return function() {
            it("", function(spec_19098__$1, spec_19096) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2 3 4@0 2")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), "'(keval \"1 2 3 4@0 2\")'", "'[1 3]'");
              };
            }(spec_19098__$1, spec_19096));
            return null;
          };
        }(spec_19098__$1, spec_19096));
        var spec_19099__$1 = {};
        describe("with juxt", function(spec_19099__$1, spec_19096) {
          return function() {
            it("", function(spec_19099__$1, spec_19096) {
              return function() {
                return expect(qiss.core.keval.call(null, "{x 0 2}1 2 3 4")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), "'(keval \"{x 0 2}1 2 3 4\")'", "'[1 3]'");
              };
            }(spec_19099__$1, spec_19096));
            return null;
          };
        }(spec_19099__$1, spec_19096));
        var spec__$1 = {};
        return describe("repeated", function(spec__$1, spec_19096) {
          return function() {
            it("", function(spec__$1, spec_19096) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2 3 4@(0 2;1 3)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 4], null)], null), "'(keval \"1 2 3 4@(0 2;1 3)\")'", "'[[1 3] [2 4]]'");
              };
            }(spec__$1, spec_19096));
            return null;
          };
        }(spec__$1, spec_19096));
      };
    }(spec_19096));
    return null;
  };
}(spec_19096));
var spec_19106 = {};
describe("about group (monadic \x3d)", function(spec_19106) {
  return function() {
    it("", function(spec_19106) {
      return function() {
        var spec_19107__$1 = {};
        describe("vector", function(spec_19107__$1, spec_19106) {
          return function() {
            it("", function(spec_19107__$1, spec_19106) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x3d4 0 2 1 2 1 2 3 2 4")).toSatisfy(qiss.core.keval.call(null, "4 0 2 1 3!(0 9;,1;2 4 6 8;3 5;,7)"), "'(keval \"\x3d4 0 2 1 2 1 2 3 2 4\")'", "'(keval \"4 0 2 1 3!(0 9;,1;2 4 6 8;3 5;,7)\")'");
              };
            }(spec_19107__$1, spec_19106));
            return null;
          };
        }(spec_19107__$1, spec_19106));
        var spec__$1 = {};
        return describe("dict", function(spec__$1, spec_19106) {
          return function() {
            it("", function(spec__$1, spec_19106) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x3d`a`b`c`d`e`f`g`h`i`j!0 1 2 0 1 2 0 1 2 0")).toSatisfy(qiss.core.keval.call(null, "0 1 2!(`a`d`g`j;`b`e`h;`c`f`i)"), "'(keval \"\x3d`a`b`c`d`e`f`g`h`i`j!0 1 2 0 1 2 0 1 2 0\")'", "'(keval \"0 1 2!(`a`d`g`j;`b`e`h;`c`f`i)\")'");
              };
            }(spec__$1, spec_19106));
            return null;
          };
        }(spec__$1, spec_19106));
      };
    }(spec_19106));
    return null;
  };
}(spec_19106));
var spec_19112 = {};
describe("about @", function(spec_19112) {
  return function() {
    it("", function(spec_19112) {
      return function() {
        var spec__$1 = {};
        return describe("call it like a function", function(spec__$1, spec_19112) {
          return function() {
            it("", function(spec__$1, spec_19112) {
              return function() {
                expect(qiss.core.keval.call(null, "@[1 2 3 4;0 2]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), "'(keval \"@[1 2 3 4;0 2]\")'", "'[1 3]'");
                return expect(qiss.core.keval.call(null, "@[{x+x};4]")).toSatisfy(8, "'(keval \"@[{x+x};4]\")'", "'8'");
              };
            }(spec__$1, spec_19112));
            return null;
          };
        }(spec__$1, spec_19112));
      };
    }(spec_19112));
    return null;
  };
}(spec_19112));
var spec_19137 = {};
describe("about 3-arg @", function(spec_19137) {
  return function() {
    it("", function(spec_19137) {
      return function() {
        var spec_19138__$1 = {};
        describe("vector indexed with long", function(spec_19138__$1, spec_19137) {
          return function() {
            it("", function(spec_19138__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;1;{x*2}]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 2, 3], null), "'(keval \"@[!4;1;{x*2}]\")'", "'[0 2 2 3]'");
              };
            }(spec_19138__$1, spec_19137));
            return null;
          };
        }(spec_19138__$1, spec_19137));
        var spec_19139__$1 = {};
        describe("vector indexed with vector", function(spec_19139__$1, spec_19137) {
          return function() {
            it("", function(spec_19139__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;1 3;{x+1}]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 2, 4], null), "'(keval \"@[!4;1 3;{x+1}]\")'", "'[0 2 2 4]'");
              };
            }(spec_19139__$1, spec_19137));
            return null;
          };
        }(spec_19139__$1, spec_19137));
        var spec_19140__$1 = {};
        describe("vector repeatedly indexed with vector", function(spec_19140__$1, spec_19137) {
          return function() {
            it("", function(spec_19140__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;(0 1;1 2);{x+1}]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3, 3, 3], null), "'(keval \"@[!4;(0 1;1 2);{x+1}]\")'", "'[1 3 3 3]'");
              };
            }(spec_19140__$1, spec_19137));
            return null;
          };
        }(spec_19140__$1, spec_19137));
        var spec_19141__$1 = {};
        describe("dict indexed with atom", function(spec_19141__$1, spec_19137) {
          return function() {
            it("", function(spec_19141__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[`a`b`c!1 2 3;`a;{x+1}]")).toSatisfy(qiss.core.keval.call(null, "`a`b`c!2 2 3"), "'(keval \"@[`a`b`c!1 2 3;`a;{x+1}]\")'", "'(keval \"`a`b`c!2 2 3\")'");
              };
            }(spec_19141__$1, spec_19137));
            return null;
          };
        }(spec_19141__$1, spec_19137));
        var spec_19142__$1 = {};
        describe("dict indexed with vector", function(spec_19142__$1, spec_19137) {
          return function() {
            it("", function(spec_19142__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[`a`b`c!1 2 3;`a`c;{x+1}]")).toSatisfy(qiss.core.keval.call(null, "`a`b`c!2 2 4"), "'(keval \"@[`a`b`c!1 2 3;`a`c;{x+1}]\")'", "'(keval \"`a`b`c!2 2 4\")'");
              };
            }(spec_19142__$1, spec_19137));
            return null;
          };
        }(spec_19142__$1, spec_19137));
        var spec_19143__$1 = {};
        describe("dict indexed repeatedly with vector", function(spec_19143__$1, spec_19137) {
          return function() {
            it("", function(spec_19143__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[`a`b`c!1 2 3;(`a`b;`a`c);{x+1}]")).toSatisfy(qiss.core.keval.call(null, "`a`b`c!3 3 4"), "'(keval \"@[`a`b`c!1 2 3;(`a`b;`a`c);{x+1}]\")'", "'(keval \"`a`b`c!3 3 4\")'");
              };
            }(spec_19143__$1, spec_19137));
            return null;
          };
        }(spec_19143__$1, spec_19137));
        var spec_19144__$1 = {};
        describe("table indexed with long", function(spec_19144__$1, spec_19137) {
          return function() {
            it("", function(spec_19144__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[([]a:1 2 3);0;{2*x}]")).toSatisfy(qiss.core.keval.call(null, "([]a:2 2 3)"), "'(keval \"@[([]a:1 2 3);0;{2*x}]\")'", "'(keval \"([]a:2 2 3)\")'");
              };
            }(spec_19144__$1, spec_19137));
            return null;
          };
        }(spec_19144__$1, spec_19137));
        var spec_19145__$1 = {};
        describe("table indexed with longs", function(spec_19145__$1, spec_19137) {
          return function() {
            it("", function(spec_19145__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[([]a:1 2 3);0 2;{2*x}]")).toSatisfy(qiss.core.keval.call(null, "([]a:2 2 6)"), "'(keval \"@[([]a:1 2 3);0 2;{2*x}]\")'", "'(keval \"([]a:2 2 6)\")'");
              };
            }(spec_19145__$1, spec_19137));
            return null;
          };
        }(spec_19145__$1, spec_19137));
        var spec_19146__$1 = {};
        describe("table indexed with symbol", function(spec_19146__$1, spec_19137) {
          return function() {
            it("", function(spec_19146__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[([]a:1 2 3;b:10 20 30);`a;{2*x}]")).toSatisfy(qiss.core.keval.call(null, "([]a:2 4 6;b:10 20 30)"), "'(keval \"@[([]a:1 2 3;b:10 20 30);`a;{2*x}]\")'", "'(keval \"([]a:2 4 6;b:10 20 30)\")'");
              };
            }(spec_19146__$1, spec_19137));
            return null;
          };
        }(spec_19146__$1, spec_19137));
        var spec_19147__$1 = {};
        describe("table indexed with symbols", function(spec_19147__$1, spec_19137) {
          return function() {
            it("", function(spec_19147__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[([]a:1 2 3;b:10 20 30;c:100 200 300);`a`c;{2*x}]")).toSatisfy(qiss.core.keval.call(null, "([]a:2 4 6;b:10 20 30;c:200 400 600)"), "'(keval \"@[([]a:1 2 3;b:10 20 30;c:100 200 300);`a`c;{2*x}]\")'", "'(keval \"([]a:2 4 6;b:10 20 30;c:200 400 600)\")'");
              };
            }(spec_19147__$1, spec_19137));
            return null;
          };
        }(spec_19147__$1, spec_19137));
        var spec__$1 = {};
        return describe("table complex indexing", function(spec__$1, spec_19137) {
          return function() {
            it("", function(spec__$1, spec_19137) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[([]a:1 2 3;b:10 20 30;c:100 200 300);(`a;0);{2*x}]")).toSatisfy(qiss.core.keval.call(null, "([]a:4 4 6;b:20 20 30;c:200 200 300)"), "'(keval \"@[([]a:1 2 3;b:10 20 30;c:100 200 300);(`a;0);{2*x}]\")'", "'(keval \"([]a:4 4 6;b:20 20 30;c:200 200 300)\")'");
              };
            }(spec__$1, spec_19137));
            return null;
          };
        }(spec__$1, spec_19137));
      };
    }(spec_19137));
    return null;
  };
}(spec_19137));
var spec_19164 = {};
describe("about 4-arg @", function(spec_19164) {
  return function() {
    it("", function(spec_19164) {
      return function() {
        var spec_19165__$1 = {};
        describe("vector indexed with long", function(spec_19165__$1, spec_19164) {
          return function() {
            it("", function(spec_19165__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;1;*;2]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 2, 3], null), "'(keval \"@[!4;1;*;2]\")'", "'[0 2 2 3]'");
              };
            }(spec_19165__$1, spec_19164));
            return null;
          };
        }(spec_19165__$1, spec_19164));
        var spec_19166__$1 = {};
        describe("vector indexed with vector paired with atom", function(spec_19166__$1, spec_19164) {
          return function() {
            it("", function(spec_19166__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;1 3;*;2]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 2, 6], null), "'(keval \"@[!4;1 3;*;2]\")'", "'[0 2 2 6]'");
              };
            }(spec_19166__$1, spec_19164));
            return null;
          };
        }(spec_19166__$1, spec_19164));
        var spec_19167__$1 = {};
        describe("vector indexed with matrix paired with atom", function(spec_19167__$1, spec_19164) {
          return function() {
            it("", function(spec_19167__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;(1 3;2 0);*;2]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 4, 6], null), "'(keval \"@[!4;(1 3;2 0);*;2]\")'", "'[0 2 4 6]'");
              };
            }(spec_19167__$1, spec_19164));
            return null;
          };
        }(spec_19167__$1, spec_19164));
        var spec_19168__$1 = {};
        describe("vector indexed with matrix paired with vector", function(spec_19168__$1, spec_19164) {
          return function() {
            it("", function(spec_19168__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;(1 3;2 0);*;2 4]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 8, 6], null), "'(keval \"@[!4;(1 3;2 0);*;2 4]\")'", "'[0 2 8 6]'");
              };
            }(spec_19168__$1, spec_19164));
            return null;
          };
        }(spec_19168__$1, spec_19164));
        var spec_19169__$1 = {};
        describe("vector indexed with matrix paired with matrix", function(spec_19169__$1, spec_19164) {
          return function() {
            it("", function(spec_19169__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[!4;(1 3;2 0);*;(2 4;6 8)]")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2, 12, 12], null), "'(keval \"@[!4;(1 3;2 0);*;(2 4;6 8)]\")'", "'[0 2 12 12]'");
              };
            }(spec_19169__$1, spec_19164));
            return null;
          };
        }(spec_19169__$1, spec_19164));
        var spec_19170__$1 = {};
        describe("dict indexed with ragged paired with atom", function(spec_19170__$1, spec_19164) {
          return function() {
            it("", function(spec_19170__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[`a`b`c!1 2 3;(`a`c;`b);*;2]")).toSatisfy(qiss.core.keval.call(null, "`a`b`c!2 4 6"), "'(keval \"@[`a`b`c!1 2 3;(`a`c;`b);*;2]\")'", "'(keval \"`a`b`c!2 4 6\")'");
              };
            }(spec_19170__$1, spec_19164));
            return null;
          };
        }(spec_19170__$1, spec_19164));
        var spec__$1 = {};
        return describe("tables", function(spec__$1, spec_19164) {
          return function() {
            it("", function(spec__$1, spec_19164) {
              return function() {
                return expect(qiss.core.keval.call(null, "@[([]a:1 2 3;b:10 20 30;c:100 200 300);(`a`b;0);*;(5 10;100)]")).toSatisfy(qiss.core.keval.call(null, "([]a:500 10 15;b:10000 200 300;c:10000 200 300)"), "'(keval \"@[([]a:1 2 3;b:10 20 30;c:100 200 300);(`a`b;0);*;(5 10;100)]\")'", "'(keval \"([]a:500 10 15;b:10000 200 300;c:10000 200 300)\")'");
              };
            }(spec__$1, spec_19164));
            return null;
          };
        }(spec__$1, spec_19164));
      };
    }(spec_19164));
    return null;
  };
}(spec_19164));
var spec_19183 = {};
describe("about 2-arg dot", function(spec_19183) {
  return function() {
    it("", function(spec_19183) {
      return function() {
        var spec_19184__$1 = {};
        describe("indexing vectors with vectors", function(spec_19184__$1, spec_19183) {
          return function() {
            it("", function(spec_19184__$1, spec_19183) {
              return function() {
                expect(qiss.core.keval.call(null, "1 2 3 4 .,1")).toSatisfy(2, "'(keval \"1 2 3 4 .,1\")'", "'2'");
                expect(qiss.core.keval.call(null, "1 2 3 4 .,1 2")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 3], null), "'(keval \"1 2 3 4 .,1 2\")'", "'[2 3]'");
                expect(qiss.core.keval.call(null, "(0 1 2;3 4 5;6 7 8).,0 2")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1, 2], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [6, 7, 8], null)], null), "'(keval \"(0 1 2;3 4 5;6 7 8).,0 2\")'", "'[[0 1 2] [6 7 8]]'");
                expect(qiss.core.keval.call(null, "(0 1 2;3 4 5;6 7 8). 1 1")).toSatisfy(4, "'(keval \"(0 1 2;3 4 5;6 7 8). 1 1\")'", "'4'");
                expect(qiss.core.keval.call(null, "(0 1 2;3 4 5;6 7 8).(0 1;1)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 4], null), "'(keval \"(0 1 2;3 4 5;6 7 8).(0 1;1)\")'", "'[1 4]'");
                return expect(qiss.core.keval.call(null, "(0 1 2;3 4 5;6 7 8).(0 2;0 2)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [6, 8], null)], null), "'(keval \"(0 1 2;3 4 5;6 7 8).(0 2;0 2)\")'", "'[[0 2] [6 8]]'");
              };
            }(spec_19184__$1, spec_19183));
            return null;
          };
        }(spec_19184__$1, spec_19183));
        var spec_19185__$1 = {};
        describe("eliding the first index yields columns", function(spec_19185__$1, spec_19183) {
          return function() {
            it("", function(spec_19185__$1, spec_19183) {
              return function() {
                return expect(qiss.core.keval.call(null, "(0 1 2;3 4 5;6 7 8).(;0 2)")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 2], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 5], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [6, 8], null)], null), "'(keval \"(0 1 2;3 4 5;6 7 8).(;0 2)\")'", 
                "'[[0 2] [3 5] [6 8]]'");
              };
            }(spec_19185__$1, spec_19183));
            return null;
          };
        }(spec_19185__$1, spec_19183));
        var spec_19186__$1 = {};
        describe("indexing dicts of vectors", function(spec_19186__$1, spec_19183) {
          return function() {
            it("", function(spec_19186__$1, spec_19183) {
              return function() {
                expect(qiss.core.keval.call(null, "(`a`b`c!(0 1 2;3 4 5;6 7 8)).(`b;1)")).toSatisfy(4, "'(keval \"(`a`b`c!(0 1 2;3 4 5;6 7 8)).(`b;1)\")'", "'4'");
                expect(qiss.core.keval.call(null, "(`a`b`c!(0 1 2;3 4 5;6 7 8)).(`a`b;1)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 4], null), "'(keval \"(`a`b`c!(0 1 2;3 4 5;6 7 8)).(`a`b;1)\")'", "'[1 4]'");
                return expect(qiss.core.keval.call(null, "(`a`b`c!(0 1 2;3 4 5;6 7 8)).(`b;0 2)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 5], null), "'(keval \"(`a`b`c!(0 1 2;3 4 5;6 7 8)).(`b;0 2)\")'", "'[3 5]'");
              };
            }(spec_19186__$1, spec_19183));
            return null;
          };
        }(spec_19186__$1, spec_19183));
        var spec_19187__$1 = {};
        describe("indexing tables", function(spec_19187__$1, spec_19183) {
          return function() {
            it("", function(spec_19187__$1, spec_19183) {
              return function() {
                expect(qiss.core.keval.call(null, "([]a:1 2 3;b:4 5 6).(`b;1)")).toSatisfy(5, "'(keval \"([]a:1 2 3;b:4 5 6).(`b;1)\")'", "'5'");
                expect(qiss.core.keval.call(null, "([]a:1 2 3;b:4 5 6).(1;`b)")).toSatisfy(5, "'(keval \"([]a:1 2 3;b:4 5 6).(1;`b)\")'", "'5'");
                expect(qiss.core.keval.call(null, "([]a:1 2 3;b:4 5 6).(`a`b;1)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, 5], null), "'(keval \"([]a:1 2 3;b:4 5 6).(`a`b;1)\")'", "'[2 5]'");
                return expect(qiss.core.keval.call(null, "([]a:1 2 3;b:4 5 6).(`a`b;0 2)")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 6], null)], null), "'(keval \"([]a:1 2 3;b:4 5 6).(`a`b;0 2)\")'", "'[[1 3] [4 6]]'");
              };
            }(spec_19187__$1, spec_19183));
            return null;
          };
        }(spec_19187__$1, spec_19183));
        var spec__$1 = {};
        return describe("applying functions", function(spec__$1, spec_19183) {
          return function() {
            it("", function(spec__$1, spec_19183) {
              return function() {
                expect(qiss.core.keval.call(null, "{2}.()")).toSatisfy(2, "'(keval \"{2}.()\")'", "'2'");
                expect(qiss.core.keval.call(null, "{x}.,2")).toSatisfy(2, "'(keval \"{x}.,2\")'", "'2'");
                expect(qiss.core.keval.call(null, "{x+y}. 1 2")).toSatisfy(3, "'(keval \"{x+y}. 1 2\")'", "'3'");
                expect(qiss.core.keval.call(null, "+. 1 2")).toSatisfy(3, "'(keval \"+. 1 2\")'", "'3'");
                return expect(qiss.core.keval.call(null, "{x+z}. 1 2 3")).toSatisfy(4, "'(keval \"{x+z}. 1 2 3\")'", "'4'");
              };
            }(spec__$1, spec_19183));
            return null;
          };
        }(spec__$1, spec_19183));
      };
    }(spec_19183));
    return null;
  };
}(spec_19183));
var spec_19194 = {};
describe("about 3-arg dot", function(spec_19194) {
  return function() {
    it("", function(spec_19194) {
      return function() {
        var spec_19195__$1 = {};
        describe("cross-product index", function(spec_19195__$1, spec_19194) {
          return function() {
            it("", function(spec_19195__$1, spec_19194) {
              return function() {
                expect(qiss.core.keval.call(null, ".[(0 1 2;3 4 5;6 7 8);(0 1;0 1);{x+100}]")).toSatisfy(qiss.core.keval.call(null, "(100 101 2;103 104 5;6 7 8)"), "'(keval \".[(0 1 2;3 4 5;6 7 8);(0 1;0 1);{x+100}]\")'", "'(keval \"(100 101 2;103 104 5;6 7 8)\")'");
                return expect(qiss.core.keval.call(null, ".[(0 1 2;3 4 5;6 7 8);(1;0 1 2);{x+100}]")).toSatisfy(qiss.core.keval.call(null, "(0 1 2;103 104 105;6 7 8)"), "'(keval \".[(0 1 2;3 4 5;6 7 8);(1;0 1 2);{x+100}]\")'", "'(keval \"(0 1 2;103 104 105;6 7 8)\")'");
              };
            }(spec_19195__$1, spec_19194));
            return null;
          };
        }(spec_19195__$1, spec_19194));
        var spec__$1 = {};
        return describe("3d matrix", function(spec__$1, spec_19194) {
          return function() {
            it("", function(spec__$1, spec_19194) {
              return function() {
                return expect(qiss.core.keval.call(null, ".[((0 1;2 3);(4 5;6 7);(8 9;10 11));1 1 1;{x*x}]")).toSatisfy(qiss.core.keval.call(null, "((0 1;2 3);(4 5;6 49);(8 9;10 11))"), "'(keval \".[((0 1;2 3);(4 5;6 7);(8 9;10 11));1 1 1;{x*x}]\")'", "'(keval \"((0 1;2 3);(4 5;6 49);(8 9;10 11))\")'");
              };
            }(spec__$1, spec_19194));
            return null;
          };
        }(spec__$1, spec_19194));
      };
    }(spec_19194));
    return null;
  };
}(spec_19194));
var spec_19200 = {};
describe("about 4-arg dot", function(spec_19200) {
  return function() {
    it("", function(spec_19200) {
      return function() {
        var spec__$1 = {};
        return describe("dict", function(spec__$1, spec_19200) {
          return function() {
            it("", function(spec__$1, spec_19200) {
              return function() {
                return expect(qiss.core.keval.call(null, ".[`a`b`c!(0 1 2;3 4 5;6 7 8);(`b;0 2);*;10 100]")).toSatisfy(qiss.core.keval.call(null, "`a`b`c!(0 1 2;30 4 500;6 7 8)"), "'(keval \".[`a`b`c!(0 1 2;3 4 5;6 7 8);(`b;0 2);*;10 100]\")'", "'(keval \"`a`b`c!(0 1 2;30 4 500;6 7 8)\")'");
              };
            }(spec__$1, spec_19200));
            return null;
          };
        }(spec__$1, spec_19200));
      };
    }(spec_19200));
    return null;
  };
}(spec_19200));
var spec_19209 = {};
describe("about join", function(spec_19209) {
  return function() {
    it("", function(spec_19209) {
      return function() {
        var spec_19210__$1 = {};
        describe("monadic , envectors", function(spec_19210__$1, spec_19209) {
          return function() {
            it("", function(spec_19210__$1, spec_19209) {
              return function() {
                expect(qiss.core.keval.call(null, ",1")).toSatisfy(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), "'(keval \",1\")'", "'[1]'");
                return expect(qiss.core.keval.call(null, ",1 2 3")).toSatisfy(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null)], null), "'(keval \",1 2 3\")'", "'[[1 2 3]]'");
              };
            }(spec_19210__$1, spec_19209));
            return null;
          };
        }(spec_19210__$1, spec_19209));
        var spec_19211__$1 = {};
        describe("dyadic joins", function(spec_19211__$1, spec_19209) {
          return function() {
            it("", function(spec_19211__$1, spec_19209) {
              return function() {
                return expect(qiss.core.keval.call(null, "1 2,3 4")).toSatisfy(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3, 4], null), "'(keval \"1 2,3 4\")'", "'[1 2 3 4]'");
              };
            }(spec_19211__$1, spec_19209));
            return null;
          };
        }(spec_19211__$1, spec_19209));
        var spec__$1 = {};
        return describe("joining dicts is a merge where rhs wins", function(spec__$1, spec_19209) {
          return function() {
            it("", function(spec__$1, spec_19209) {
              return function() {
                return expect(qiss.core.keval.call(null, "(`a`b`c`e!1 2 3 5),`b`c`d!10 20 30")).toSatisfy(qiss.core.keval.call(null, "`a`b`c`e`d!1 10 20 5 30"), "'(keval \"(`a`b`c`e!1 2 3 5),`b`c`d!10 20 30\")'", "'(keval \"`a`b`c`e`d!1 10 20 5 30\")'");
              };
            }(spec__$1, spec_19209));
            return null;
          };
        }(spec__$1, spec_19209));
      };
    }(spec_19209));
    return null;
  };
}(spec_19209));
var spec_19222 = {};
describe("about deleting columns", function(spec_19222) {
  return function() {
    it("", function(spec_19222) {
      return function() {
        var spec_19223__$1 = {};
        describe("can delete a column", function(spec_19223__$1, spec_19222) {
          return function() {
            it("", function(spec_19223__$1, spec_19222) {
              return function() {
                return expect(qiss.core.keval.call(null, "delete b from ([]a:1 2 3;b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:1 2 3)"), "'(keval \"delete b from ([]a:1 2 3;b:1 2 3)\")'", "'(keval \"([]a:1 2 3)\")'");
              };
            }(spec_19223__$1, spec_19222));
            return null;
          };
        }(spec_19223__$1, spec_19222));
        var spec_19224__$1 = {};
        describe("can delete multiple columns", function(spec_19224__$1, spec_19222) {
          return function() {
            it("", function(spec_19224__$1, spec_19222) {
              return function() {
                return expect(qiss.core.keval.call(null, "delete a,c from ([]a:1 2 3;b:1 2 3;c:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]b:1 2 3)"), "'(keval \"delete a,c from ([]a:1 2 3;b:1 2 3;c:1 2 3)\")'", "'(keval \"([]b:1 2 3)\")'");
              };
            }(spec_19224__$1, spec_19222));
            return null;
          };
        }(spec_19224__$1, spec_19222));
        var spec_19225__$1 = {};
        describe("can delete a key column", function(spec_19225__$1, spec_19222) {
          return function() {
            it("", function(spec_19225__$1, spec_19222) {
              return function() {
                return expect(qiss.core.keval.call(null, "delete a from ([a:1 2 3]b:1 2 3;c:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]b:1 2 3;c:1 2 3)"), "'(keval \"delete a from ([a:1 2 3]b:1 2 3;c:1 2 3)\")'", "'(keval \"([]b:1 2 3;c:1 2 3)\")'");
              };
            }(spec_19225__$1, spec_19222));
            return null;
          };
        }(spec_19225__$1, spec_19222));
        var spec__$1 = {};
        return describe("deleting only non-keycols from a keyed table preserves keycols", function(spec__$1, spec_19222) {
          return function() {
            it("", function(spec__$1, spec_19222) {
              return function() {
                expect(qiss.core.keval.call(null, "delete b from ([a:1 2 3]b:1 2 3;c:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([a:1 2 3]c:1 2 3)"), "'(keval \"delete b from ([a:1 2 3]b:1 2 3;c:1 2 3)\")'", "'(keval \"([a:1 2 3]c:1 2 3)\")'");
                return expect(qiss.core.keval.call(null, "delete b from ([a:1 2 3;b:1 2 3]c:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:1 2 3;c:1 2 3)"), "'(keval \"delete b from ([a:1 2 3;b:1 2 3]c:1 2 3)\")'", "'(keval \"([]a:1 2 3;c:1 2 3)\")'");
              };
            }(spec__$1, spec_19222));
            return null;
          };
        }(spec__$1, spec_19222));
      };
    }(spec_19222));
    return null;
  };
}(spec_19222));
var spec_19234 = {};
describe("about deleting rows", function(spec_19234) {
  return function() {
    it("", function(spec_19234) {
      return function() {
        var spec_19235__$1 = {};
        describe("can delete all rows", function(spec_19235__$1, spec_19234) {
          return function() {
            it("", function(spec_19235__$1, spec_19234) {
              return function() {
                return expect(qiss.core.keval.call(null, "delete from([]a:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:())"), "'(keval \"delete from([]a:1 2 3)\")'", "'(keval \"([]a:())\")'");
              };
            }(spec_19235__$1, spec_19234));
            return null;
          };
        }(spec_19235__$1, spec_19234));
        var spec_19236__$1 = {};
        describe("can delete rows specified by where", function(spec_19236__$1, spec_19234) {
          return function() {
            it("", function(spec_19236__$1, spec_19234) {
              return function() {
                return expect(qiss.core.keval.call(null, "delete from([]a:1 2 3)where a\x3d2")).toSatisfy(qiss.core.keval.call(null, "([]a:1 3)"), "'(keval \"delete from([]a:1 2 3)where a\x3d2\")'", "'(keval \"([]a:1 3)\")'");
              };
            }(spec_19236__$1, spec_19234));
            return null;
          };
        }(spec_19236__$1, spec_19234));
        var spec__$1 = {};
        return describe("can delete rows from keyed tables", function(spec__$1, spec_19234) {
          return function() {
            it("", function(spec__$1, spec_19234) {
              return function() {
                return expect(qiss.core.keval.call(null, "delete from ([a:1 2 3]b:1 2 3)where a\x3d2")).toSatisfy(qiss.core.keval.call(null, "([a:1 3]b:1 3)"), "'(keval \"delete from ([a:1 2 3]b:1 2 3)where a\x3d2\")'", "'(keval \"([a:1 3]b:1 3)\")'");
              };
            }(spec__$1, spec_19234));
            return null;
          };
        }(spec__$1, spec_19234));
      };
    }(spec_19234));
    return null;
  };
}(spec_19234));
var spec_19245 = {};
describe("about select", function(spec_19245) {
  return function() {
    it("", function(spec_19245) {
      return function() {
        var spec_19246__$1 = {};
        describe("no agg required", function(spec_19246__$1, spec_19245) {
          return function() {
            it("", function(spec_19246__$1, spec_19245) {
              return function() {
                return expect(qiss.core.keval.call(null, "select from([]a:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:1 2 3)"), "'(keval \"select from([]a:1 2 3)\")'", "'(keval \"([]a:1 2 3)\")'");
              };
            }(spec_19246__$1, spec_19245));
            return null;
          };
        }(spec_19246__$1, spec_19245));
        var spec_19247__$1 = {};
        describe("id agg guesses result column to match original column", function(spec_19247__$1, spec_19245) {
          return function() {
            it("", function(spec_19247__$1, spec_19245) {
              return function() {
                return expect(qiss.core.keval.call(null, "select a from([]a:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:1 2 3)"), "'(keval \"select a from([]a:1 2 3)\")'", "'(keval \"([]a:1 2 3)\")'");
              };
            }(spec_19247__$1, spec_19245));
            return null;
          };
        }(spec_19247__$1, spec_19245));
        var spec__$1 = {};
        return describe("works on keyed tables", function(spec__$1, spec_19245) {
          return function() {
            it("", function(spec__$1, spec_19245) {
              return function() {
                return expect(qiss.core.keval.call(null, "select from([a:`a`b]b:1 2)")).toSatisfy(qiss.core.keval.call(null, "([a:`a`b]b:1 2)"), "'(keval \"select from([a:`a`b]b:1 2)\")'", "'(keval \"([a:`a`b]b:1 2)\")'");
              };
            }(spec__$1, spec_19245));
            return null;
          };
        }(spec__$1, spec_19245));
      };
    }(spec_19245));
    return null;
  };
}(spec_19245));
var spec_19254 = {};
describe("about by", function(spec_19254) {
  return function() {
    it("", function(spec_19254) {
      return function() {
        var spec_19255__$1 = {};
        describe("simple case", function(spec_19255__$1, spec_19254) {
          return function() {
            it("", function(spec_19255__$1, spec_19254) {
              return function() {
                return expect(qiss.core.keval.call(null, "select +/b by a from([]a:6#`a`b`c;b:!6)")).toSatisfy(qiss.core.keval.call(null, "([a:`a`b`c]b:3 5 7)"), "'(keval \"select +/b by a from([]a:6#`a`b`c;b:!6)\")'", "'(keval \"([a:`a`b`c]b:3 5 7)\")'");
              };
            }(spec_19255__$1, spec_19254));
            return null;
          };
        }(spec_19255__$1, spec_19254));
        var spec__$1 = {};
        return describe("compound by clause", function(spec__$1, spec_19254) {
          return function() {
            it("", function(spec__$1, spec_19254) {
              return function() {
                return expect(qiss.core.keval.call(null, "select by a,b from([]a:8#`a`a`b`b;b:8#`a`b;c:!8)")).toSatisfy(qiss.core.keval.call(null, "([a:`a`a`b`b;b:`a`b`a`b];c:(0 4;1 5;2 6;3 7))"), "'(keval \"select by a,b from([]a:8#`a`a`b`b;b:8#`a`b;c:!8)\")'", "'(keval \"([a:`a`a`b`b;b:`a`b`a`b];c:(0 4;1 5;2 6;3 7))\")'");
              };
            }(spec__$1, spec_19254));
            return null;
          };
        }(spec__$1, spec_19254));
      };
    }(spec_19254));
    return null;
  };
}(spec_19254));
var spec_19262 = {};
describe("about keying tables", function(spec_19262) {
  return function() {
    it("", function(spec_19262) {
      return function() {
        var spec_19263__$1 = {};
        describe("can key by first n columns", function(spec_19263__$1, spec_19262) {
          return function() {
            it("", function(spec_19263__$1, spec_19262) {
              return function() {
                expect(qiss.core.keval.call(null, "1!([]a:`a`b`c;b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([a:`a`b`c]b:1 2 3)"), "'(keval \"1!([]a:`a`b`c;b:1 2 3)\")'", "'(keval \"([a:`a`b`c]b:1 2 3)\")'");
                return expect(qiss.core.keval.call(null, "2!([]a:`a`b;b:1 2;c:3 4")).toSatisfy(qiss.core.keval.call(null, "([a:`a`b;b:1 2]c:3 4"), "'(keval \"2!([]a:`a`b;b:1 2;c:3 4\")'", "'(keval \"([a:`a`b;b:1 2]c:3 4\")'");
              };
            }(spec_19263__$1, spec_19262));
            return null;
          };
        }(spec_19263__$1, spec_19262));
        var spec__$1 = {};
        return describe("can key by col name(s)", function(spec__$1, spec_19262) {
          return function() {
            it("", function(spec__$1, spec_19262) {
              return function() {
                expect(qiss.core.keval.call(null, "`a!([]a:`a`b`c;b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([a:`a`b`c]b:1 2 3)"), "'(keval \"`a!([]a:`a`b`c;b:1 2 3)\")'", "'(keval \"([a:`a`b`c]b:1 2 3)\")'");
                return expect(qiss.core.keval.call(null, "`a`c!([]a:`a`b;b:1 2;c:3 4")).toSatisfy(qiss.core.keval.call(null, "([a:`a`b;c:3 4]b:1 2"), "'(keval \"`a`c!([]a:`a`b;b:1 2;c:3 4\")'", "'(keval \"([a:`a`b;c:3 4]b:1 2\")'");
              };
            }(spec__$1, spec_19262));
            return null;
          };
        }(spec__$1, spec_19262));
      };
    }(spec_19262));
    return null;
  };
}(spec_19262));
var spec_19272 = {};
describe("about indexing keyed tables", function(spec_19272) {
  return function() {
    it("", function(spec_19272) {
      return function() {
        var spec_19273__$1 = {};
        describe("can be done with a dict", function(spec_19273__$1, spec_19272) {
          return function() {
            it("", function(spec_19273__$1, spec_19272) {
              return function() {
                return expect(qiss.core.keval.call(null, "([a:`a`b`c]b:1 2 3)`a!`a")).toSatisfy(qiss.core.keval.call(null, "`b!1"), "'(keval \"([a:`a`b`c]b:1 2 3)`a!`a\")'", "'(keval \"`b!1\")'");
              };
            }(spec_19273__$1, spec_19272));
            return null;
          };
        }(spec_19273__$1, spec_19272));
        var spec_19274__$1 = {};
        describe("can be done with just the value of a dict", function(spec_19274__$1, spec_19272) {
          return function() {
            it("", function(spec_19274__$1, spec_19272) {
              return function() {
                return expect(qiss.core.keval.call(null, "([a:`a`b`c]b:1 2 3)`c")).toSatisfy(qiss.core.keval.call(null, "`b!3"), "'(keval \"([a:`a`b`c]b:1 2 3)`c\")'", "'(keval \"`b!3\")'");
              };
            }(spec_19274__$1, spec_19272));
            return null;
          };
        }(spec_19274__$1, spec_19272));
        var spec__$1 = {};
        return describe("can be done with a table", function(spec__$1, spec_19272) {
          return function() {
            it("", function(spec__$1, spec_19272) {
              return function() {
                return expect(qiss.core.keval.call(null, "([a:`a`b`c]b:1 2 3)([]a:`a`c)")).toSatisfy(qiss.core.keval.call(null, "([]b:1 3)"), "'(keval \"([a:`a`b`c]b:1 2 3)([]a:`a`c)\")'", "'(keval \"([]b:1 3)\")'");
              };
            }(spec__$1, spec_19272));
            return null;
          };
        }(spec__$1, spec_19272));
      };
    }(spec_19272));
    return null;
  };
}(spec_19272));
var spec_19281 = {};
describe("about where", function(spec_19281) {
  return function() {
    it("", function(spec_19281) {
      return function() {
        var spec_19282__$1 = {};
        describe("works with bools", function(spec_19282__$1, spec_19281) {
          return function() {
            it("", function(spec_19282__$1, spec_19281) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x261001b")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 3], null), "'(keval \"\x261001b\")'", "'[0 3]'");
              };
            }(spec_19282__$1, spec_19281));
            return null;
          };
        }(spec_19282__$1, spec_19281));
        var spec__$1 = {};
        return describe("works with longs", function(spec__$1, spec_19281) {
          return function() {
            it("", function(spec__$1, spec_19281) {
              return function() {
                return expect(qiss.core.keval.call(null, "\x260 1 2 3")).toSatisfy(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 2, 3, 3, 3], null), "'(keval \"\x260 1 2 3\")'", "'[1 2 2 3 3 3]'");
              };
            }(spec__$1, spec_19281));
            return null;
          };
        }(spec__$1, spec_19281));
      };
    }(spec_19281));
    return null;
  };
}(spec_19281));
var spec_19289 = {};
describe("about lj", function(spec_19289) {
  return function() {
    it("", function(spec_19289) {
      return function() {
        var spec_19290__$1 = {};
        describe("uses rhs key col", function(spec_19290__$1, spec_19289) {
          return function() {
            it("", function(spec_19290__$1, spec_19289) {
              return function() {
                return expect(qiss.core.keval.call(null, "([]a:`a`b`c)lj([a:`a`b`c]b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`b`c;b:1 2 3)"), "'(keval \"([]a:`a`b`c)lj([a:`a`b`c]b:1 2 3)\")'", "'(keval \"([]a:`a`b`c;b:1 2 3)\")'");
              };
            }(spec_19290__$1, spec_19289));
            return null;
          };
        }(spec_19290__$1, spec_19289));
        var spec__$1 = {};
        return describe("two key cols", function(spec__$1, spec_19289) {
          return function() {
            it("", function(spec__$1, spec_19289) {
              return function() {
                return expect(qiss.core.keval.call(null, "([]a:`a`b`c;b:1 2 3)lj([a:`a`b`c;b:1 2 3]c:10 20 30)")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`b`c;b:1 2 3;c:10 20 30)"), "'(keval \"([]a:`a`b`c;b:1 2 3)lj([a:`a`b`c;b:1 2 3]c:10 20 30)\")'", "'(keval \"([]a:`a`b`c;b:1 2 3;c:10 20 30)\")'");
              };
            }(spec__$1, spec_19289));
            return null;
          };
        }(spec__$1, spec_19289));
      };
    }(spec_19289));
    return null;
  };
}(spec_19289));
var spec_19299 = {};
describe("about xasc", function(spec_19299) {
  return function() {
    it("", function(spec_19299) {
      return function() {
        var spec_19300__$1 = {};
        describe("sort on one col", function(spec_19300__$1, spec_19299) {
          return function() {
            it("", function(spec_19300__$1, spec_19299) {
              return function() {
                return expect(qiss.core.keval.call(null, "`a xasc([]a:`c`b`a;b:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`b`c;b:3 2 1)"), "'(keval \"`a xasc([]a:`c`b`a;b:1 2 3)\")'", "'(keval \"([]a:`a`b`c;b:3 2 1)\")'");
              };
            }(spec_19300__$1, spec_19299));
            return null;
          };
        }(spec_19300__$1, spec_19299));
        var spec_19301__$1 = {};
        describe("sort on two cols", function(spec_19301__$1, spec_19299) {
          return function() {
            it("", function(spec_19301__$1, spec_19299) {
              return function() {
                return expect(qiss.core.keval.call(null, "`a`b xasc([]a:`c`b`a`a`b`c;b:3 10 3 20 30 2)")).toSatisfy(qiss.core.keval.call(null, "([]a:`a`a`b`b`c`c;b:3 20 10 30 2 3)"), "'(keval \"`a`b xasc([]a:`c`b`a`a`b`c;b:3 10 3 20 30 2)\")'", "'(keval \"([]a:`a`a`b`b`c`c;b:3 20 10 30 2 3)\")'");
              };
            }(spec_19301__$1, spec_19299));
            return null;
          };
        }(spec_19301__$1, spec_19299));
        var spec__$1 = {};
        return describe("works on keyed tables", function(spec__$1, spec_19299) {
          return function() {
            it("", function(spec__$1, spec_19299) {
              return function() {
                return expect(qiss.core.keval.call(null, "`a`b xasc([a:`c`b`a`a`b`c]b:3 10 3 20 30 2)")).toSatisfy(qiss.core.keval.call(null, "([a:`a`a`b`b`c`c];b:3 20 10 30 2 3)"), "'(keval \"`a`b xasc([a:`c`b`a`a`b`c]b:3 10 3 20 30 2)\")'", "'(keval \"([a:`a`a`b`b`c`c];b:3 20 10 30 2 3)\")'");
              };
            }(spec__$1, spec_19299));
            return null;
          };
        }(spec__$1, spec_19299));
      };
    }(spec_19299));
    return null;
  };
}(spec_19299));
var spec_19340 = {};
describe("about parsing non-ambiguity", function(spec_19340) {
  return function() {
    it("", function(spec_19340) {
      return function() {
        var spec_19341__$1 = {};
        describe("adverbed", function(spec_19341__$1, spec_19340) {
          return function() {
            it("", function(spec_19341__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "f/"))).toSatisfy(1, "'(count (parses \"f/\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "f/1 2 3"))).toSatisfy(1, "'(count (parses \"f/1 2 3\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "0 f/1 2 3"))).toSatisfy(1, "'(count (parses \"0 f/1 2 3\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "0 f//1 2 3"))).toSatisfy(1, "'(count (parses \"0 f//1 2 3\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "f//1 2 3"))).toSatisfy(1, "'(count (parses \"f//1 2 3\"))'", "'1'");
              };
            }(spec_19341__$1, spec_19340));
            return null;
          };
        }(spec_19341__$1, spec_19340));
        var spec_19342__$1 = {};
        describe("assign", function(spec_19342__$1, spec_19340) {
          return function() {
            it("", function(spec_19342__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "a:3"))).toSatisfy(1, "'(count (parses \"a:3\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "a:`a`b`c`d`e 1 2 3"))).toSatisfy(1, "'(count (parses \"a:`a`b`c`d`e 1 2 3\"))'", "'1'");
              };
            }(spec_19342__$1, spec_19340));
            return null;
          };
        }(spec_19342__$1, spec_19340));
        var spec_19343__$1 = {};
        describe("bools", function(spec_19343__$1, spec_19340) {
          return function() {
            it("", function(spec_19343__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "0b"))).toSatisfy(1, "'(count (parses \"0b\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1b"))).toSatisfy(1, "'(count (parses \"1b\"))'", "'1'");
              };
            }(spec_19343__$1, spec_19340));
            return null;
          };
        }(spec_19343__$1, spec_19340));
        var spec_19344__$1 = {};
        describe("bool vector literals", function(spec_19344__$1, spec_19340) {
          return function() {
            it("", function(spec_19344__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "010b"))).toSatisfy(1, "'(count (parses \"010b\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1001b"))).toSatisfy(1, "'(count (parses \"1001b\"))'", "'1'");
              };
            }(spec_19344__$1, spec_19340));
            return null;
          };
        }(spec_19344__$1, spec_19340));
        var spec_19345__$1 = {};
        describe("call", function(spec_19345__$1, spec_19340) {
          return function() {
            it("", function(spec_19345__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a`b`c[0]"))).toSatisfy(1, "'(count (parses \"`a`b`c[0]\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a`b`c[0 1]"))).toSatisfy(1, "'(count (parses \"`a`b`c[0 1]\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "{x}[0]"))).toSatisfy(1, "'(count (parses \"{x}[0]\"))'", "'1'");
              };
            }(spec_19345__$1, spec_19340));
            return null;
          };
        }(spec_19345__$1, spec_19340));
        var spec_19346__$1 = {};
        describe("chars", function(spec_19346__$1, spec_19340) {
          return function() {
            it("", function(spec_19346__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, '"a"'))).toSatisfy(1, '\'(count (parses "\\"a\\""))\'', "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, '"\\""'))).toSatisfy(1, '\'(count (parses "\\"\\\\\\"\\""))\'', "'1'");
              };
            }(spec_19346__$1, spec_19340));
            return null;
          };
        }(spec_19346__$1, spec_19340));
        var spec_19347__$1 = {};
        describe("char vector lterals", function(spec_19347__$1, spec_19340) {
          return function() {
            it("", function(spec_19347__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, '"abc"'))).toSatisfy(1, '\'(count (parses "\\"abc\\""))\'', "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, '"abc\\""def'))).toSatisfy(1, '\'(count (parses "\\"abc\\\\\\"\\"def"))\'', "'1'");
              };
            }(spec_19347__$1, spec_19340));
            return null;
          };
        }(spec_19347__$1, spec_19340));
        var spec_19348__$1 = {};
        describe("dyop", function(spec_19348__$1, spec_19340) {
          return function() {
            it("", function(spec_19348__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1+2"))).toSatisfy(1, "'(count (parses \"1+2\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1 +2"))).toSatisfy(1, "'(count (parses \"1 +2\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1+ 2"))).toSatisfy(1, "'(count (parses \"1+ 2\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1 + 2"))).toSatisfy(1, "'(count (parses \"1 + 2\"))'", "'1'");
              };
            }(spec_19348__$1, spec_19340));
            return null;
          };
        }(spec_19348__$1, spec_19340));
        var spec_19349__$1 = {};
        describe("floats", function(spec_19349__$1, spec_19340) {
          return function() {
            it("", function(spec_19349__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1."))).toSatisfy(1, "'(count (parses \"1.\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "-1."))).toSatisfy(1, "'(count (parses \"-1.\"))'", "'1'");
              };
            }(spec_19349__$1, spec_19340));
            return null;
          };
        }(spec_19349__$1, spec_19340));
        var spec_19350__$1 = {};
        describe("float vector literals", function(spec_19350__$1, spec_19340) {
          return function() {
            it("", function(spec_19350__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1. 2 3"))).toSatisfy(1, "'(count (parses \"1. 2 3\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1 2. 3"))).toSatisfy(1, "'(count (parses \"1 2. 3\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "-1 2. 3"))).toSatisfy(1, "'(count (parses \"-1 2. 3\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1    2.    3"))).toSatisfy(1, "'(count (parses \"1    2.    3\"))'", "'1'");
              };
            }(spec_19350__$1, spec_19340));
            return null;
          };
        }(spec_19350__$1, spec_19340));
        var spec_19351__$1 = {};
        describe("ids", function(spec_19351__$1, spec_19340) {
          return function() {
            it("", function(spec_19351__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "x"))).toSatisfy(1, "'(count (parses \"x\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "xyzzy"))).toSatisfy(1, "'(count (parses \"xyzzy\"))'", "'1'");
              };
            }(spec_19351__$1, spec_19340));
            return null;
          };
        }(spec_19351__$1, spec_19340));
        var spec_19352__$1 = {};
        describe("juxt", function(spec_19352__$1, spec_19340) {
          return function() {
            it("", function(spec_19352__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a`b`c`d`e 1"))).toSatisfy(1, "'(count (parses \"`a`b`c`d`e 1\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a`b`c`d`e 1 2 3"))).toSatisfy(1, "'(count (parses \"`a`b`c`d`e 1 2 3\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "x 1"))).toSatisfy(1, "'(count (parses \"x 1\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "x 1+2"))).toSatisfy(1, "'(count (parses \"x 1+2\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "{x}3"))).toSatisfy(1, "'(count (parses \"{x}3\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1{y}3"))).toSatisfy(1, "'(count (parses \"1{y}3\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1{y}"))).toSatisfy(1, "'(count (parses \"1{y}\"))'", "'1'");
              };
            }(spec_19352__$1, spec_19340));
            return null;
          };
        }(spec_19352__$1, spec_19340));
        var spec_19353__$1 = {};
        describe("lambdas", function(spec_19353__$1, spec_19340) {
          return function() {
            it("", function(spec_19353__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "{}"))).toSatisfy(1, "'(count (parses \"{}\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "{x}"))).toSatisfy(1, "'(count (parses \"{x}\"))'", "'1'");
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "{[a]a}"))).toSatisfy(1, "'(count (parses \"{[a]a}\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a`b`c{x y}0 1 2"))).toSatisfy(1, "'(count (parses \"`a`b`c{x y}0 1 2\"))'", "'1'");
              };
            }(spec_19353__$1, spec_19340));
            return null;
          };
        }(spec_19353__$1, spec_19340));
        var spec_19354__$1 = {};
        describe("longs", function(spec_19354__$1, spec_19340) {
          return function() {
            it("", function(spec_19354__$1, spec_19340) {
              return function() {
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1"))).toSatisfy(1, "'(count (parses \"1\"))'", "'1'");
              };
            }(spec_19354__$1, spec_19340));
            return null;
          };
        }(spec_19354__$1, spec_19340));
        var spec_19355__$1 = {};
        describe("long vector literals", function(spec_19355__$1, spec_19340) {
          return function() {
            it("", function(spec_19355__$1, spec_19340) {
              return function() {
                expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1 2 3"))).toSatisfy(1, "'(count (parses \"1 2 3\"))'", "'1'");
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "1    2    3"))).toSatisfy(1, "'(count (parses \"1    2    3\"))'", "'1'");
              };
            }(spec_19355__$1, spec_19340));
            return null;
          };
        }(spec_19355__$1, spec_19340));
        var spec_19356__$1 = {};
        describe("monop", function(spec_19356__$1, spec_19340) {
          return function() {
            it("", function(spec_19356__$1, spec_19340) {
              return function() {
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "*1 2 3"))).toSatisfy(1, "'(count (parses \"*1 2 3\"))'", "'1'");
              };
            }(spec_19356__$1, spec_19340));
            return null;
          };
        }(spec_19356__$1, spec_19340));
        var spec_19357__$1 = {};
        describe("symbols", function(spec_19357__$1, spec_19340) {
          return function() {
            it("", function(spec_19357__$1, spec_19340) {
              return function() {
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a"))).toSatisfy(1, "'(count (parses \"`a\"))'", "'1'");
              };
            }(spec_19357__$1, spec_19340));
            return null;
          };
        }(spec_19357__$1, spec_19340));
        var spec__$1 = {};
        return describe("symbol vector literals", function(spec__$1, spec_19340) {
          return function() {
            it("", function(spec__$1, spec_19340) {
              return function() {
                return expect(cljs.core.count.call(null, qiss.core.parses.call(null, "`a`b`c`d`e"))).toSatisfy(1, "'(count (parses \"`a`b`c`d`e\"))'", "'1'");
              };
            }(spec__$1, spec_19340));
            return null;
          };
        }(spec__$1, spec_19340));
      };
    }(spec_19340));
    return null;
  };
}(spec_19340));
var spec_19380 = {};
describe("about destructuring function arguments", function(spec_19380) {
  return function() {
    it("", function(spec_19380) {
      return function() {
        var spec_19381__$1 = {};
        describe("vector destructuring can use vector literal syntax", function(spec_19381__$1, spec_19380) {
          return function() {
            it("", function(spec_19381__$1, spec_19380) {
              return function() {
                expect(qiss.core.keval.call(null, "{[(x;y)]y}1 2")).toSatisfy(2, "'(keval \"{[(x;y)]y}1 2\")'", "'2'");
                expect(qiss.core.keval.call(null, "{[(x;y);z]z}[1 2;3]")).toSatisfy(3, "'(keval \"{[(x;y);z]z}[1 2;3]\")'", "'3'");
                return expect(qiss.core.keval.call(null, "{[x;(y;z)]z}[1;2 3]")).toSatisfy(3, "'(keval \"{[x;(y;z)]z}[1;2 3]\")'", "'3'");
              };
            }(spec_19381__$1, spec_19380));
            return null;
          };
        }(spec_19381__$1, spec_19380));
        var spec_19382__$1 = {};
        describe("vector destructuring can use whitespace", function(spec_19382__$1, spec_19380) {
          return function() {
            it("", function(spec_19382__$1, spec_19380) {
              return function() {
                expect(qiss.core.keval.call(null, "{[x y]y}1 2")).toSatisfy(2, "'(keval \"{[x y]y}1 2\")'", "'2'");
                expect(qiss.core.keval.call(null, "{[x y;z]z}[1 2;3]")).toSatisfy(3, "'(keval \"{[x y;z]z}[1 2;3]\")'", "'3'");
                expect(qiss.core.keval.call(null, "{[x;y z]z}[1;2 3]")).toSatisfy(3, "'(keval \"{[x;y z]z}[1;2 3]\")'", "'3'");
                return expect(qiss.core.keval.call(null, "*'0 1{[x y;z]y,x+y}\\!10")).toSatisfy(new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1, 2, 3, 5, 8, 13, 21, 34, 55], null), "'(keval \"*'0 1{[x y;z]y,x+y}\\\\!10\")'", "'[1 1 2 3 5 8 13 21 34 55]'");
              };
            }(spec_19382__$1, spec_19380));
            return null;
          };
        }(spec_19382__$1, spec_19380));
        var spec_19383__$1 = {};
        describe("dictionary destructuring uses !", function(spec_19383__$1, spec_19380) {
          return function() {
            it("", function(spec_19383__$1, spec_19380) {
              return function() {
                expect(qiss.core.keval.call(null, "{[x!y]y}`a`b!3 4")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 4], null), "'(keval \"{[x!y]y}`a`b!3 4\")'", "'[3 4]'");
                expect(qiss.core.keval.call(null, "{[x!y;z]y}[`a`b!3 4;5]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 4], null), "'(keval \"{[x!y;z]y}[`a`b!3 4;5]\")'", "'[3 4]'");
                return expect(qiss.core.keval.call(null, "{[x;y!z]y}[6;`a`b!3 4]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "b", "b", 1482224470)], null), "'(keval \"{[x;y!z]y}[6;`a`b!3 4]\")'", "'[:a :b]'");
              };
            }(spec_19383__$1, spec_19380));
            return null;
          };
        }(spec_19383__$1, spec_19380));
        var spec_19384__$1 = {};
        describe("dictionary destructuring works on keyed tables", function(spec_19384__$1, spec_19380) {
          return function() {
            it("", function(spec_19384__$1, spec_19380) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[k!v]v}([p:`a`b`c]q:1 2 3)")).toSatisfy(qiss.core.keval.call(null, "([]q:1 2 3)"), "'(keval \"{[k!v]v}([p:`a`b`c]q:1 2 3)\")'", "'(keval \"([]q:1 2 3)\")'");
              };
            }(spec_19384__$1, spec_19380));
            return null;
          };
        }(spec_19384__$1, spec_19380));
        var spec_19385__$1 = {};
        describe("table destructuring can use table literal syntax", function(spec_19385__$1, spec_19380) {
          return function() {
            it("", function(spec_19385__$1, spec_19380) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[([]a;b)]b}([]p:`a`b`c;q:1 2 3)")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[([]a;b)]b}([]p:`a`b`c;q:1 2 3)\")'", "'[1 2 3]'");
              };
            }(spec_19385__$1, spec_19380));
            return null;
          };
        }(spec_19385__$1, spec_19380));
        var spec_19386__$1 = {};
        describe("table destructuring can use spaces instead of ;", function(spec_19386__$1, spec_19380) {
          return function() {
            it("", function(spec_19386__$1, spec_19380) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[([]a b)]b}([]p:`a`b`c;q:1 2 3)")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[([]a b)]b}([]p:`a`b`c;q:1 2 3)\")'", "'[1 2 3]'");
              };
            }(spec_19386__$1, spec_19380));
            return null;
          };
        }(spec_19386__$1, spec_19380));
        var spec_19387__$1 = {};
        describe("keyed tables too", function(spec_19387__$1, spec_19380) {
          return function() {
            it("", function(spec_19387__$1, spec_19380) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[([a]b c)]c}([p:`a`b`c]q:`d`e`f;r:1 2 3)")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[([a]b c)]c}([p:`a`b`c]q:`d`e`f;r:1 2 3)\")'", "'[1 2 3]'");
              };
            }(spec_19387__$1, spec_19380));
            return null;
          };
        }(spec_19387__$1, spec_19380));
        var spec_19388__$1 = {};
        describe("destructuring can use _ for values you don't need", function(spec_19388__$1, spec_19380) {
          return function() {
            it("", function(spec_19388__$1, spec_19380) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[_ _ a _ _]a}@!5")).toSatisfy(2, "'(keval \"{[_ _ a _ _]a}@!5\")'", "'2'");
              };
            }(spec_19388__$1, spec_19380));
            return null;
          };
        }(spec_19388__$1, spec_19380));
        var spec_19389__$1 = {};
        describe("destructuring can be incomplete", function(spec_19389__$1, spec_19380) {
          return function() {
            it("", function(spec_19389__$1, spec_19380) {
              return function() {
                expect(qiss.core.keval.call(null, "{[x y z]z}1 2 3 4")).toSatisfy(3, "'(keval \"{[x y z]z}1 2 3 4\")'", "'3'");
                expect(qiss.core.keval.call(null, "{[a b!c d]c}`a`b`c`d!!4")).toSatisfy(0, "'(keval \"{[a b!c d]c}`a`b`c`d!!4\")'", "'0'");
                return expect(qiss.core.keval.call(null, "{[_ _ a]a}@!5")).toSatisfy(2, "'(keval \"{[_ _ a]a}@!5\")'", "'2'");
              };
            }(spec_19389__$1, spec_19380));
            return null;
          };
        }(spec_19389__$1, spec_19380));
        var spec__$1 = {};
        return describe("destructuring is recursive", function(spec__$1, spec_19380) {
          return function() {
            it("", function(spec__$1, spec_19380) {
              return function() {
                expect(qiss.core.keval.call(null, "{[(a b;c d)]c}(1 2;3 4)")).toSatisfy(3, "'(keval \"{[(a b;c d)]c}(1 2;3 4)\")'", "'3'");
                expect(qiss.core.keval.call(null, "{[a b!c d]c}`a`b!1 2")).toSatisfy(1, "'(keval \"{[a b!c d]c}`a`b!1 2\")'", "'1'");
                expect(qiss.core.keval.call(null, "{[_!_ a b]a*b}`a`b`c`d`e!!5")).toSatisfy(2, "'(keval \"{[_!_ a b]a*b}`a`b`c`d`e!!5\")'", "'2'");
                return expect(qiss.core.keval.call(null, "{[([]a)!([]b)]b}([p:`a`b`c]q:1 2 3)")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[([]a)!([]b)]b}([p:`a`b`c]q:1 2 3)\")'", "'[1 2 3]'");
              };
            }(spec__$1, spec_19380));
            return null;
          };
        }(spec__$1, spec_19380));
      };
    }(spec_19380));
    return null;
  };
}(spec_19380));
var spec_19404 = {};
describe("about destructuring assignments", function(spec_19404) {
  return function() {
    it("", function(spec_19404) {
      return function() {
        var spec_19405__$1 = {};
        describe("vector destructuring can use vector literal syntax", function(spec_19405__$1, spec_19404) {
          return function() {
            it("", function(spec_19405__$1, spec_19404) {
              return function() {
                return expect(qiss.core.keval.call(null, "{(a;b):1 2;b}[]")).toSatisfy(2, "'(keval \"{(a;b):1 2;b}[]\")'", "'2'");
              };
            }(spec_19405__$1, spec_19404));
            return null;
          };
        }(spec_19405__$1, spec_19404));
        var spec_19406__$1 = {};
        describe("vector destructuring can use whitespace but parens are required", function(spec_19406__$1, spec_19404) {
          return function() {
            it("", function(spec_19406__$1, spec_19404) {
              return function() {
                return expect(qiss.core.keval.call(null, "{(a b):1 2;b}[]")).toSatisfy(2, "'(keval \"{(a b):1 2;b}[]\")'", "'2'");
              };
            }(spec_19406__$1, spec_19404));
            return null;
          };
        }(spec_19406__$1, spec_19404));
        var spec_19407__$1 = {};
        describe("dictionary destructuring requires parens", function(spec_19407__$1, spec_19404) {
          return function() {
            it("", function(spec_19407__$1, spec_19404) {
              return function() {
                return expect(qiss.core.keval.call(null, "{(a!b):`a`b!1 2;a}[]")).toSatisfy(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "b", "b", 1482224470)], null), "'(keval \"{(a!b):`a`b!1 2;a}[]\")'", "'[:a :b]'");
              };
            }(spec_19407__$1, spec_19404));
            return null;
          };
        }(spec_19407__$1, spec_19404));
        var spec_19408__$1 = {};
        describe("table destructuring can use table literal syntax", function(spec_19408__$1, spec_19404) {
          return function() {
            it("", function(spec_19408__$1, spec_19404) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[]([]a;b):([]p:`a`b`c;q:1 2 3);b}[]")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[]([]a;b):([]p:`a`b`c;q:1 2 3);b}[]\")'", "'[1 2 3]'");
              };
            }(spec_19408__$1, spec_19404));
            return null;
          };
        }(spec_19408__$1, spec_19404));
        var spec_19409__$1 = {};
        describe("table destructuring can use spaces instead of ;", function(spec_19409__$1, spec_19404) {
          return function() {
            it("", function(spec_19409__$1, spec_19404) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[]([]a b):([]p:`a`b`c;q:1 2 3);b}[]")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[]([]a b):([]p:`a`b`c;q:1 2 3);b}[]\")'", "'[1 2 3]'");
              };
            }(spec_19409__$1, spec_19404));
            return null;
          };
        }(spec_19409__$1, spec_19404));
        var spec__$1 = {};
        return describe("keyed tables too", function(spec__$1, spec_19404) {
          return function() {
            it("", function(spec__$1, spec_19404) {
              return function() {
                return expect(qiss.core.keval.call(null, "{[]([a]b):([p:`a`b`c]q:1 2 3);b}[]")).toSatisfy(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null), "'(keval \"{[]([a]b):([p:`a`b`c]q:1 2 3);b}[]\")'", "'[1 2 3]'");
              };
            }(spec__$1, spec_19404));
            return null;
          };
        }(spec__$1, spec_19404));
      };
    }(spec_19404));
    return null;
  };
}(spec_19404));
